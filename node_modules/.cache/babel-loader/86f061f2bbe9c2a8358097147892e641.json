{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n// Multi-device Conversation is a Preview feature.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n/* eslint-disable max-classes-per-file */\n\n\nimport { ConversationConnectionConfig } from \"../../common.speech/Exports\";\nimport { marshalPromiseToCallbacks } from \"../../common/Exports\";\nimport { Contracts } from \"../Contracts\";\nimport { AudioConfig, CancellationErrorCode, CancellationReason, ProfanityOption, PropertyCollection, PropertyId, SpeechTranslationConfig, TranslationRecognizer } from \"../Exports\";\nimport { ConversationImpl } from \"./Conversation\";\nimport { ConversationCommon, ConversationTranslationCanceledEventArgs } from \"./Exports\";\nexport var SpeechState;\n\n(function (SpeechState) {\n  SpeechState[SpeechState[\"Inactive\"] = 0] = \"Inactive\";\n  SpeechState[SpeechState[\"Connecting\"] = 1] = \"Connecting\";\n  SpeechState[SpeechState[\"Connected\"] = 2] = \"Connected\";\n})(SpeechState || (SpeechState = {})); // child class of TranslationRecognizer meant only for use with ConversationTranslator\n\n\nclass ConversationTranslationRecognizer extends TranslationRecognizer {\n  constructor(speechConfig, audioConfig, translator) {\n    super(speechConfig, audioConfig);\n    this.privSpeechState = SpeechState.Inactive;\n\n    if (!!translator) {\n      this.privTranslator = translator;\n\n      this.sessionStarted = () => {\n        this.privSpeechState = SpeechState.Connected;\n      };\n\n      this.sessionStopped = () => {\n        this.privSpeechState = SpeechState.Inactive;\n      }; // eslint-disable-next-line @typescript-eslint/no-misused-promises\n\n\n      this.recognized = (tr, e) => __awaiter(this, void 0, void 0, function* () {\n        // TODO: add support for getting recognitions from here if own speech\n        var _a; // if there is an error connecting to the conversation service from the speech service the error will be returned in the ErrorDetails field.\n\n\n        if ((_a = e.result) === null || _a === void 0 ? void 0 : _a.errorDetails) {\n          yield this.cancelSpeech(); // TODO: format the error message contained in 'errorDetails'\n\n          this.fireCancelEvent(e.result.errorDetails);\n        }\n      }); // eslint-disable-next-line @typescript-eslint/no-misused-promises\n\n\n      this.canceled = () => __awaiter(this, void 0, void 0, function* () {\n        if (this.privSpeechState !== SpeechState.Inactive) {\n          try {\n            yield this.cancelSpeech();\n          } catch (error) {\n            this.privSpeechState = SpeechState.Inactive;\n          }\n        }\n      });\n    }\n  }\n\n  get state() {\n    return this.privSpeechState;\n  }\n\n  set state(newState) {\n    this.privSpeechState = newState;\n  }\n\n  onConnection() {\n    this.privSpeechState = SpeechState.Connected;\n  }\n\n  onDisconnection() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.privSpeechState = SpeechState.Inactive;\n      yield this.cancelSpeech();\n    });\n  }\n  /**\n   * Fire a cancel event\n   * @param error\n   */\n\n\n  fireCancelEvent(error) {\n    try {\n      if (!!this.privTranslator.canceled) {\n        const cancelEvent = new ConversationTranslationCanceledEventArgs(CancellationReason.Error, error, CancellationErrorCode.RuntimeError);\n        this.privTranslator.canceled(this.privTranslator, cancelEvent);\n      }\n    } catch (e) {//\n    }\n  }\n\n  cancelSpeech() {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        this.stopContinuousRecognitionAsync();\n        yield (_a = this.privReco) === null || _a === void 0 ? void 0 : _a.disconnect();\n        this.privSpeechState = SpeechState.Inactive;\n      } catch (e) {// ignore the error\n      }\n    });\n  }\n\n}\n/**\n * Join, leave or connect to a conversation.\n */\n\n\nexport class ConversationTranslator extends ConversationCommon {\n  constructor(audioConfig) {\n    super(audioConfig);\n    this.privErrors = ConversationConnectionConfig.restErrors;\n    this.privIsDisposed = false;\n    this.privIsSpeaking = false;\n    this.privPlaceholderKey = \"abcdefghijklmnopqrstuvwxyz012345\";\n    this.privPlaceholderRegion = \"westus\";\n    this.privProperties = new PropertyCollection();\n  }\n\n  get properties() {\n    return this.privProperties;\n  }\n\n  get speechRecognitionLanguage() {\n    return this.privSpeechRecognitionLanguage;\n  }\n\n  get participants() {\n    var _a;\n\n    return (_a = this.privConversation) === null || _a === void 0 ? void 0 : _a.participants;\n  }\n\n  get canSpeak() {\n    // is there a Conversation websocket available and has the Recognizer been set up\n    if (!this.privConversation.isConnected || !this.privCTRecognizer) {\n      return false;\n    } // is the user already speaking\n\n\n    if (this.privIsSpeaking || this.privCTRecognizer.state === SpeechState.Connected || this.privCTRecognizer.state === SpeechState.Connecting) {\n      return false;\n    } // is the user muted\n\n\n    if (this.privConversation.isMutedByHost) {\n      return false;\n    }\n\n    return true;\n  }\n\n  joinConversationAsync(conversation, nickname, param1, param2, param3) {\n    try {\n      if (typeof conversation === \"string\") {\n        Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\n        Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\n\n        if (!!this.privConversation) {\n          this.handleError(new Error(this.privErrors.permissionDeniedStart), param3);\n        }\n\n        let lang = param1;\n\n        if (lang === undefined || lang === null || lang === \"\") {\n          lang = ConversationConnectionConfig.defaultLanguageCode;\n        } // create a placeholder config\n\n\n        this.privSpeechTranslationConfig = SpeechTranslationConfig.fromSubscription(this.privPlaceholderKey, this.privPlaceholderRegion);\n        this.privSpeechTranslationConfig.setProfanity(ProfanityOption.Masked);\n        this.privSpeechTranslationConfig.addTargetLanguage(lang);\n        this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], lang);\n        this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Name], nickname);\n        const endpoint = this.privProperties.getProperty(PropertyId.ConversationTranslator_Host);\n\n        if (endpoint) {\n          this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Host], endpoint);\n        }\n\n        const speechEndpointHost = this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Host);\n\n        if (speechEndpointHost) {\n          this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_Host], speechEndpointHost);\n        } // join the conversation\n\n\n        this.privConversation = new ConversationImpl(this.privSpeechTranslationConfig);\n        this.privConversation.conversationTranslator = this;\n        this.privConversation.joinConversationAsync(conversation, nickname, lang, result => {\n          if (!result) {\n            this.handleError(new Error(this.privErrors.permissionDeniedConnect), param3);\n          }\n\n          this.privSpeechTranslationConfig.authorizationToken = result; // connect to the ws\n\n          this.privConversation.startConversationAsync(() => {\n            this.handleCallback(param2, param3);\n          }, error => {\n            this.handleError(error, param3);\n          });\n        }, error => {\n          this.handleError(error, param3);\n        });\n      } else if (typeof conversation === \"object\") {\n        Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\n        Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\")); // save the nickname\n\n        this.privProperties.setProperty(PropertyId.ConversationTranslator_Name, nickname); // ref the conversation object\n\n        this.privConversation = conversation; // ref the conversation translator object\n\n        this.privConversation.conversationTranslator = this;\n        Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedConnect);\n        Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\n        this.privSpeechTranslationConfig = conversation.config;\n        this.handleCallback(param1, param2);\n      } else {\n        this.handleError(new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"invalid conversation type\")), param2);\n      }\n    } catch (error) {\n      this.handleError(error, typeof param1 === \"string\" ? param3 : param2);\n    }\n  }\n  /**\n   * Leave the conversation\n   * @param cb\n   * @param err\n   */\n\n\n  leaveConversationAsync(cb, err) {\n    marshalPromiseToCallbacks((() => __awaiter(this, void 0, void 0, function* () {\n      // stop the speech websocket\n      yield this.cancelSpeech(); // stop the websocket\n\n      yield this.privConversation.endConversationImplAsync(); // https delete request\n\n      yield this.privConversation.deleteConversationImplAsync();\n      this.dispose();\n    }))(), cb, err);\n  }\n  /**\n   * Send a text message\n   * @param message\n   * @param cb\n   * @param err\n   */\n\n\n  sendTextMessageAsync(message, cb, err) {\n    try {\n      Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\n      Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", message));\n      this.privConversation.sendTextMessageAsync(message, cb, err);\n    } catch (error) {\n      this.handleError(error, err);\n    }\n  }\n  /**\n   * Start speaking\n   * @param cb\n   * @param err\n   */\n\n\n  startTranscribingAsync(cb, err) {\n    marshalPromiseToCallbacks((() => __awaiter(this, void 0, void 0, function* () {\n      try {\n        Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\n        Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\n\n        if (this.privCTRecognizer === undefined) {\n          yield this.connectTranslatorRecognizer();\n        }\n\n        Contracts.throwIfNullOrUndefined(this.privCTRecognizer, this.privErrors.permissionDeniedSend);\n\n        if (!this.canSpeak) {\n          this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\n        }\n\n        yield this.startContinuousRecognition();\n        this.privIsSpeaking = true;\n      } catch (error) {\n        this.privIsSpeaking = false;\n        yield this.cancelSpeech();\n        throw error;\n      }\n    }))(), cb, err);\n  }\n  /**\n   * Stop speaking\n   * @param cb\n   * @param err\n   */\n\n\n  stopTranscribingAsync(cb, err) {\n    marshalPromiseToCallbacks((() => __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (!this.privIsSpeaking) {\n          // stop speech\n          yield this.cancelSpeech();\n          return;\n        } // stop the recognition but leave the websocket open\n\n\n        this.privIsSpeaking = false;\n        yield new Promise((resolve, reject) => {\n          this.privCTRecognizer.stopContinuousRecognitionAsync(resolve, reject);\n        });\n      } catch (error) {\n        yield this.cancelSpeech();\n      }\n    }))(), cb, err);\n  }\n\n  isDisposed() {\n    return this.privIsDisposed;\n  }\n\n  dispose(reason, success, err) {\n    marshalPromiseToCallbacks((() => __awaiter(this, void 0, void 0, function* () {\n      if (this.isDisposed && !this.privIsSpeaking) {\n        return;\n      }\n\n      yield this.cancelSpeech();\n      this.privIsDisposed = true;\n      this.privSpeechTranslationConfig.close();\n      this.privSpeechRecognitionLanguage = undefined;\n      this.privProperties = undefined;\n      this.privAudioConfig = undefined;\n      this.privSpeechTranslationConfig = undefined;\n      this.privConversation.dispose();\n      this.privConversation = undefined;\n    }))(), success, err);\n  }\n  /**\n   * Cancel the speech websocket\n   */\n\n\n  cancelSpeech() {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        this.privIsSpeaking = false;\n        yield (_a = this.privCTRecognizer) === null || _a === void 0 ? void 0 : _a.onDisconnection();\n        this.privCTRecognizer = undefined;\n      } catch (e) {// ignore the error\n      }\n    });\n  }\n  /**\n   * Connect to the speech translation recognizer.\n   * Currently there is no language validation performed before sending the SpeechLanguage code to the service.\n   * If it's an invalid language the raw error will be: 'Error during WebSocket handshake: Unexpected response code: 400'\n   * e.g. pass in 'fr' instead of 'fr-FR', or a text-only language 'cy'\n   */\n\n\n  connectTranslatorRecognizer() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (this.privAudioConfig === undefined) {\n          this.privAudioConfig = AudioConfig.fromDefaultMicrophoneInput();\n        } // clear the temp subscription key if it's a participant joining\n\n\n        if (this.privSpeechTranslationConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]) === this.privPlaceholderKey) {\n          this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_Key], \"\");\n        } // TODO\n\n\n        const token = encodeURIComponent(this.privConversation.room.token);\n        let endpointHost = this.privSpeechTranslationConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Host], ConversationConnectionConfig.speechHost);\n        endpointHost = endpointHost.replace(\"{region}\", this.privConversation.room.cognitiveSpeechRegion);\n        const url = `wss://${endpointHost}${ConversationConnectionConfig.speechPath}?${ConversationConnectionConfig.configParams.token}=${token}`;\n        this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_Endpoint], url);\n        this.privCTRecognizer = new ConversationTranslationRecognizer(this.privSpeechTranslationConfig, this.privAudioConfig, this);\n      } catch (error) {\n        yield this.cancelSpeech();\n        throw error;\n      }\n    });\n  }\n  /**\n   * Handle the start speaking request\n   */\n\n\n  startContinuousRecognition() {\n    return new Promise((resolve, reject) => {\n      this.privCTRecognizer.startContinuousRecognitionAsync(resolve, reject);\n    });\n  }\n\n}","map":{"version":3,"sources":["src/sdk/Transcription/ConversationTranslator.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { ConversationConnectionConfig } from \"../../common.speech/Exports\";\r\nimport {\r\n    IDisposable,\r\n    IErrorMessages,\r\n    marshalPromiseToCallbacks\r\n} from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SessionEventArgs,\r\n    SpeechTranslationConfig,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognizer\r\n} from \"../Exports\";\r\nimport { ConversationImpl } from \"./Conversation\";\r\nimport {\r\n    ConversationCommon,\r\n    ConversationExpirationEventArgs,\r\n    ConversationHandler,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationEventArgs,\r\n    IConversationTranslator,\r\n    Participant\r\n} from \"./Exports\";\r\nimport { Callback, IConversation } from \"./IConversation\";\r\n\r\nexport enum SpeechState {\r\n    Inactive, Connecting, Connected\r\n}\r\n\r\n// child class of TranslationRecognizer meant only for use with ConversationTranslator\r\nclass ConversationTranslationRecognizer extends TranslationRecognizer {\r\n    private privTranslator: ConversationTranslator;\r\n    private privSpeechState: SpeechState;\r\n    public constructor(speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig, translator?: ConversationTranslator) {\r\n        super(speechConfig, audioConfig);\r\n        this.privSpeechState = SpeechState.Inactive;\r\n        if (!!translator) {\r\n            this.privTranslator = translator;\r\n            this.sessionStarted = (): void => {\r\n                this.privSpeechState = SpeechState.Connected;\r\n            };\r\n\r\n            this.sessionStopped = (): void => {\r\n                this.privSpeechState = SpeechState.Inactive;\r\n            };\r\n\r\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\r\n            this.recognized = async (tr: TranslationRecognizer, e: TranslationRecognitionEventArgs): Promise<void> => {\r\n                // TODO: add support for getting recognitions from here if own speech\r\n\r\n                // if there is an error connecting to the conversation service from the speech service the error will be returned in the ErrorDetails field.\r\n                if (e.result?.errorDetails) {\r\n                    await this.cancelSpeech();\r\n                    // TODO: format the error message contained in 'errorDetails'\r\n                    this.fireCancelEvent(e.result.errorDetails);\r\n                }\r\n            };\r\n\r\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\r\n            this.canceled = async (): Promise<void> => {\r\n                if (this.privSpeechState !== SpeechState.Inactive) {\r\n                    try {\r\n                        await this.cancelSpeech();\r\n                    } catch (error) {\r\n                        this.privSpeechState = SpeechState.Inactive;\r\n                    }\r\n                }\r\n            };\r\n        }\r\n    }\r\n    public get state(): SpeechState {\r\n        return this.privSpeechState;\r\n    }\r\n\r\n    public set state(newState: SpeechState) {\r\n        this.privSpeechState = newState;\r\n    }\r\n\r\n    public onConnection(): void {\r\n        this.privSpeechState = SpeechState.Connected;\r\n    }\r\n\r\n    public async onDisconnection(): Promise<void> {\r\n        this.privSpeechState = SpeechState.Inactive;\r\n        await this.cancelSpeech();\r\n    }\r\n\r\n    /**\r\n     * Fire a cancel event\r\n     * @param error\r\n     */\r\n    private fireCancelEvent(error: string): void {\r\n        try {\r\n            if (!!this.privTranslator.canceled) {\r\n                const cancelEvent: ConversationTranslationCanceledEventArgs = new ConversationTranslationCanceledEventArgs(\r\n                    CancellationReason.Error,\r\n                    error,\r\n                    CancellationErrorCode.RuntimeError\r\n                    );\r\n\r\n                this.privTranslator.canceled(this.privTranslator, cancelEvent);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    private async cancelSpeech(): Promise<void> {\r\n        try {\r\n            this.stopContinuousRecognitionAsync();\r\n            await this.privReco?.disconnect();\r\n            this.privSpeechState = SpeechState.Inactive;\r\n        } catch (e) {\r\n            // ignore the error\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Join, leave or connect to a conversation.\r\n */\r\nexport class ConversationTranslator extends ConversationCommon implements IConversationTranslator, IDisposable {\r\n\r\n    public canceled: (sender: ConversationHandler, event: ConversationTranslationCanceledEventArgs) => void;\r\n    public conversationExpiration: (sender: IConversationTranslator, event: ConversationExpirationEventArgs) => void;\r\n    public participantsChanged: (sender: IConversationTranslator, event: ConversationParticipantsChangedEventArgs) => void;\r\n    public sessionStarted: (sender: ConversationHandler, event: SessionEventArgs) => void;\r\n    public sessionStopped: (sender: ConversationHandler, event: SessionEventArgs) => void;\r\n    public textMessageReceived: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n    public transcribed: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n    public transcribing: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n\r\n    private privSpeechRecognitionLanguage: string;\r\n    private privProperties: PropertyCollection;\r\n    private privIsDisposed: boolean;\r\n    private privCTRecognizer: ConversationTranslationRecognizer;\r\n    private privIsSpeaking: boolean;\r\n    private privConversation: ConversationImpl;\r\n    private privErrors: IErrorMessages = ConversationConnectionConfig.restErrors;\r\n    private privPlaceholderKey: string;\r\n    private privPlaceholderRegion: string;\r\n\r\n    public constructor(audioConfig?: AudioConfig) {\r\n        super(audioConfig);\r\n        this.privIsDisposed = false;\r\n        this.privIsSpeaking = false;\r\n        this.privPlaceholderKey = \"abcdefghijklmnopqrstuvwxyz012345\";\r\n        this.privPlaceholderRegion = \"westus\";\r\n        this.privProperties = new PropertyCollection();\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechRecognitionLanguage;\r\n    }\r\n\r\n    public get participants(): Participant[] {\r\n        return this.privConversation?.participants;\r\n    }\r\n\r\n    private get canSpeak(): boolean {\r\n\r\n        // is there a Conversation websocket available and has the Recognizer been set up\r\n        if (!this.privConversation.isConnected || !this.privCTRecognizer) {\r\n            return false;\r\n        }\r\n\r\n        // is the user already speaking\r\n        if (this.privIsSpeaking || this.privCTRecognizer.state === SpeechState.Connected || this.privCTRecognizer.state === SpeechState.Connecting) {\r\n            return false;\r\n        }\r\n\r\n        // is the user muted\r\n        if (this.privConversation.isMutedByHost) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Join a conversation. If this is the host, pass in the previously created Conversation object.\r\n     * @param conversation\r\n     * @param nickname\r\n     * @param lang\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public joinConversationAsync(conversation: IConversation, nickname: string, cb?: Callback, err?: Callback): void;\r\n    public joinConversationAsync(conversationId: string, nickname: string, lang: string, cb?: Callback, err?: Callback): void;\r\n    public joinConversationAsync(conversation: string | { config: SpeechTranslationConfig }, nickname: string, param1?: string | Callback, param2?: Callback, param3?: Callback): void {\r\n\r\n        try {\r\n\r\n            if (typeof conversation === \"string\") {\r\n\r\n                Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\r\n                Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n\r\n                if (!!this.privConversation) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedStart), param3);\r\n                }\r\n\r\n                let lang: string = param1 as string;\r\n                if (lang === undefined || lang === null || lang === \"\") {\r\n                    lang = ConversationConnectionConfig.defaultLanguageCode;\r\n                }\r\n\r\n                // create a placeholder config\r\n                this.privSpeechTranslationConfig = SpeechTranslationConfig.fromSubscription(\r\n                    this.privPlaceholderKey,\r\n                    this.privPlaceholderRegion);\r\n                this.privSpeechTranslationConfig.setProfanity(ProfanityOption.Masked);\r\n                this.privSpeechTranslationConfig.addTargetLanguage(lang);\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], lang);\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Name], nickname);\r\n\r\n                const endpoint: string = this.privProperties.getProperty(PropertyId.ConversationTranslator_Host);\r\n                if (endpoint) {\r\n                    this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Host], endpoint);\r\n                }\r\n                const speechEndpointHost: string = this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Host);\r\n                if (speechEndpointHost) {\r\n                    this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_Host], speechEndpointHost);\r\n                }\r\n\r\n                // join the conversation\r\n                this.privConversation = new ConversationImpl(this.privSpeechTranslationConfig);\r\n                this.privConversation.conversationTranslator = this;\r\n\r\n                this.privConversation.joinConversationAsync(\r\n                    conversation,\r\n                    nickname,\r\n                    lang,\r\n                    ((result: string): void => {\r\n\r\n                        if (!result) {\r\n                            this.handleError(new Error(this.privErrors.permissionDeniedConnect), param3);\r\n                        }\r\n\r\n                        this.privSpeechTranslationConfig.authorizationToken = result;\r\n\r\n                        // connect to the ws\r\n                        this.privConversation.startConversationAsync(\r\n                            ((): void => {\r\n                                this.handleCallback(param2, param3);\r\n                            }),\r\n                            ((error: any): void => {\r\n                                this.handleError(error, param3);\r\n                            }));\r\n\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, param3);\r\n                    }));\r\n\r\n            } else if (typeof conversation === \"object\") {\r\n\r\n                Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\r\n                Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n\r\n                // save the nickname\r\n                this.privProperties.setProperty(PropertyId.ConversationTranslator_Name, nickname);\r\n                // ref the conversation object\r\n                this.privConversation = conversation as ConversationImpl;\r\n                // ref the conversation translator object\r\n                this.privConversation.conversationTranslator = this;\r\n\r\n                Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedConnect);\r\n                Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\r\n\r\n                this.privSpeechTranslationConfig = conversation.config;\r\n\r\n                this.handleCallback(param1 as Callback, param2);\r\n            } else {\r\n                this.handleError(\r\n                    new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"invalid conversation type\")),\r\n                    param2);\r\n            }\r\n\r\n        } catch (error) {\r\n            this.handleError(error, typeof param1 === \"string\" ? param3 : param2);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Leave the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public leaveConversationAsync(cb?: Callback, err?: Callback): void {\r\n\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n\r\n            // stop the speech websocket\r\n            await this.cancelSpeech();\r\n            // stop the websocket\r\n            await this.privConversation.endConversationImplAsync();\r\n            // https delete request\r\n            await this.privConversation.deleteConversationImplAsync();\r\n            this.dispose();\r\n\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Send a text message\r\n     * @param message\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public sendTextMessageAsync(message: string, cb?: Callback, err?: Callback): void {\r\n\r\n        try {\r\n            Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\r\n            Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", message));\r\n\r\n            this.privConversation.sendTextMessageAsync(message, cb, err);\r\n        } catch (error) {\r\n\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Start speaking\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public startTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n            try {\r\n                Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\r\n                Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\r\n\r\n                if (this.privCTRecognizer === undefined) {\r\n                    await this.connectTranslatorRecognizer();\r\n                }\r\n                Contracts.throwIfNullOrUndefined(this.privCTRecognizer, this.privErrors.permissionDeniedSend);\r\n\r\n                if (!this.canSpeak) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n                }\r\n\r\n                await this.startContinuousRecognition();\r\n\r\n                this.privIsSpeaking = true;\r\n            } catch (error) {\r\n                this.privIsSpeaking = false;\r\n                await this.cancelSpeech();\r\n                throw error;\r\n            }\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stop speaking\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public stopTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n            try {\r\n                if (!this.privIsSpeaking) {\r\n                    // stop speech\r\n                    await this.cancelSpeech();\r\n                    return;\r\n                }\r\n\r\n                // stop the recognition but leave the websocket open\r\n                this.privIsSpeaking = false;\r\n                await new Promise((resolve: () => void, reject: (error: string) => void): void => {\r\n                    this.privCTRecognizer.stopContinuousRecognitionAsync(resolve, reject);\r\n                });\r\n\r\n            } catch (error) {\r\n                await this.cancelSpeech();\r\n            }\r\n        })(), cb, err);\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(reason?: string, success?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n            if (this.isDisposed && !this.privIsSpeaking) {\r\n                return;\r\n            }\r\n            await this.cancelSpeech();\r\n            this.privIsDisposed = true;\r\n            this.privSpeechTranslationConfig.close();\r\n            this.privSpeechRecognitionLanguage = undefined;\r\n            this.privProperties = undefined;\r\n            this.privAudioConfig = undefined;\r\n            this.privSpeechTranslationConfig = undefined;\r\n            this.privConversation.dispose();\r\n            this.privConversation = undefined;\r\n        })(), success, err);\r\n    }\r\n\r\n    /**\r\n     * Cancel the speech websocket\r\n     */\r\n    private async cancelSpeech(): Promise<void> {\r\n        try {\r\n            this.privIsSpeaking = false;\r\n            await this.privCTRecognizer?.onDisconnection();\r\n            this.privCTRecognizer = undefined;\r\n        } catch (e) {\r\n            // ignore the error\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Connect to the speech translation recognizer.\r\n     * Currently there is no language validation performed before sending the SpeechLanguage code to the service.\r\n     * If it's an invalid language the raw error will be: 'Error during WebSocket handshake: Unexpected response code: 400'\r\n     * e.g. pass in 'fr' instead of 'fr-FR', or a text-only language 'cy'\r\n     */\r\n    private async connectTranslatorRecognizer(): Promise<void> {\r\n        try {\r\n\r\n            if (this.privAudioConfig === undefined) {\r\n                this.privAudioConfig = AudioConfig.fromDefaultMicrophoneInput();\r\n            }\r\n\r\n            // clear the temp subscription key if it's a participant joining\r\n            if (this.privSpeechTranslationConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key])\r\n                === this.privPlaceholderKey) {\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_Key], \"\");\r\n            }\r\n\r\n            // TODO\r\n            const token: string = encodeURIComponent(this.privConversation.room.token);\r\n\r\n            let endpointHost: string = this.privSpeechTranslationConfig.getProperty(\r\n                PropertyId[PropertyId.SpeechServiceConnection_Host], ConversationConnectionConfig.speechHost);\r\n            endpointHost = endpointHost.replace(\"{region}\", this.privConversation.room.cognitiveSpeechRegion);\r\n\r\n            const url = `wss://${endpointHost}${ConversationConnectionConfig.speechPath}?${ConversationConnectionConfig.configParams.token}=${token}`;\r\n\r\n            this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_Endpoint], url);\r\n\r\n            this.privCTRecognizer = new ConversationTranslationRecognizer(this.privSpeechTranslationConfig, this.privAudioConfig, this);\r\n        } catch (error) {\r\n            await this.cancelSpeech();\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle the start speaking request\r\n     */\r\n    private startContinuousRecognition(): Promise<void> {\r\n        return new Promise((resolve: () => void, reject: (error: string) => void): void => {\r\n            this.privCTRecognizer.startContinuousRecognitionAsync(resolve, reject);\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}