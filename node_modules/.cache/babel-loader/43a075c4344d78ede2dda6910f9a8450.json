{"ast":null,"code":"import { RestConfigBase, RestMessageAdapter, RestRequestType } from \"../common.browser/Exports\";\nimport { PropertyId } from \"../sdk/Exports\";\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\nimport { HeaderNames } from \"./HeaderNames\";\n/**\n * Implements methods for speaker recognition classes, sending requests to endpoint\n * and parsing response into expected format\n * @class SynthesisRestAdapter\n */\n\nexport class SynthesisRestAdapter {\n  constructor(config) {\n    let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\n\n    if (!endpoint) {\n      const region = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"westus\");\n      const hostSuffix = ConnectionFactoryBase.getHostSuffix(region);\n      endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, `https://${region}.tts.speech${hostSuffix}`);\n    }\n\n    this.privUri = `${endpoint}/cognitiveservices/voices/list`;\n    const options = RestConfigBase.requestOptions;\n    options.headers[RestConfigBase.configParams.subscriptionKey] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\n    this.privRestAdapter = new RestMessageAdapter(options);\n  }\n  /**\n   * Sends list voices request to endpoint.\n   * @function\n   * @public\n   * @param connectionId - guid for connectionId\n   * @returns {Promise<IRestResponse>} rest response to status request\n   */\n\n\n  getVoicesList(connectionId) {\n    this.privRestAdapter.setHeaders(HeaderNames.ConnectionId, connectionId);\n    return this.privRestAdapter.request(RestRequestType.Get, this.privUri);\n  }\n\n}","map":{"version":3,"sources":["src/common.speech/SynthesisRestAdapter.ts"],"names":[],"mappings":"AAAA,SAGI,cAHJ,EAII,kBAJJ,EAKI,eALJ,QAMO,2BANP;AAOA,SACI,UADJ,QAEO,gBAFP;AAGA,SAAS,qBAAT,QAAsC,yBAAtC;AAEA,SAAS,WAAT,QAA4B,eAA5B;AAEA;;;;AAIG;;AACH,OAAM,MAAO,oBAAP,CAA2B;AAI7B,EAAA,WAAA,CAAmB,MAAnB,EAA4C;AAExC,QAAI,QAAQ,GAAG,MAAM,CAAC,UAAP,CAAkB,WAAlB,CAA8B,UAAU,CAAC,gCAAzC,EAA2E,SAA3E,CAAf;;AACA,QAAI,CAAC,QAAL,EAAe;AACX,YAAM,MAAM,GAAW,MAAM,CAAC,UAAP,CAAkB,WAAlB,CAA8B,UAAU,CAAC,8BAAzC,EAAyE,QAAzE,CAAvB;AACA,YAAM,UAAU,GAAW,qBAAqB,CAAC,aAAtB,CAAoC,MAApC,CAA3B;AACA,MAAA,QAAQ,GAAG,MAAM,CAAC,UAAP,CAAkB,WAAlB,CAA8B,UAAU,CAAC,4BAAzC,EAAuE,WAAW,MAAM,cAAc,UAAU,EAAhH,CAAX;AACH;;AACD,SAAK,OAAL,GAAe,GAAG,QAAQ,gCAA1B;AAEA,UAAM,OAAO,GAAoB,cAAc,CAAC,cAAhD;AACA,IAAA,OAAO,CAAC,OAAR,CAAgB,cAAc,CAAC,YAAf,CAA4B,eAA5C,IAA+D,MAAM,CAAC,UAAP,CAAkB,WAAlB,CAA8B,UAAU,CAAC,2BAAzC,EAAsE,SAAtE,CAA/D;AAEA,SAAK,eAAL,GAAuB,IAAI,kBAAJ,CAAuB,OAAvB,CAAvB;AACH;AAED;;;;;;AAMG;;;AACI,EAAA,aAAa,CAAC,YAAD,EAAqB;AACrC,SAAK,eAAL,CAAqB,UAArB,CAAgC,WAAW,CAAC,YAA5C,EAA0D,YAA1D;AACA,WAAO,KAAK,eAAL,CAAqB,OAArB,CAA6B,eAAe,CAAC,GAA7C,EAAkD,KAAK,OAAvD,CAAP;AACH;;AA9B4B","sourcesContent":["import {\r\n    IRequestOptions,\r\n    IRestResponse,\r\n    RestConfigBase,\r\n    RestMessageAdapter,\r\n    RestRequestType,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    PropertyId,\r\n} from \"../sdk/Exports\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\r\nimport { SynthesizerConfig } from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\n\r\n/**\r\n * Implements methods for speaker recognition classes, sending requests to endpoint\r\n * and parsing response into expected format\r\n * @class SynthesisRestAdapter\r\n */\r\nexport class SynthesisRestAdapter {\r\n    private privRestAdapter: RestMessageAdapter;\r\n    private privUri: string;\r\n\r\n    public constructor(config: SynthesizerConfig) {\r\n\r\n        let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"westus\");\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, `https://${region}.tts.speech${hostSuffix}`);\r\n        }\r\n        this.privUri = `${endpoint}/cognitiveservices/voices/list`;\r\n\r\n        const options: IRequestOptions = RestConfigBase.requestOptions;\r\n        options.headers[RestConfigBase.configParams.subscriptionKey] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\r\n\r\n        this.privRestAdapter = new RestMessageAdapter(options);\r\n    }\r\n\r\n    /**\r\n     * Sends list voices request to endpoint.\r\n     * @function\r\n     * @public\r\n     * @param connectionId - guid for connectionId\r\n     * @returns {Promise<IRestResponse>} rest response to status request\r\n     */\r\n    public getVoicesList(connectionId: string): Promise<IRestResponse> {\r\n        this.privRestAdapter.setHeaders(HeaderNames.ConnectionId, connectionId);\r\n        return this.privRestAdapter.request(RestRequestType.Get, this.privUri);\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}