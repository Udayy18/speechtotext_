{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { RecognitionStatus } from \"../Exports\";\nexport class DetailedSpeechPhrase {\n  constructor(json) {\n    this.privDetailedSpeechPhrase = JSON.parse(json);\n    this.privDetailedSpeechPhrase.RecognitionStatus = RecognitionStatus[this.privDetailedSpeechPhrase.RecognitionStatus];\n  }\n\n  static fromJSON(json) {\n    return new DetailedSpeechPhrase(json);\n  }\n\n  getJsonWithCorrectedOffsets(baseOffset) {\n    if (!!this.privDetailedSpeechPhrase.NBest) {\n      let firstWordOffset;\n\n      for (const phrase of this.privDetailedSpeechPhrase.NBest) {\n        if (!!phrase.Words && !!phrase.Words[0]) {\n          firstWordOffset = phrase.Words[0].Offset;\n          break;\n        }\n      }\n\n      if (!!firstWordOffset && firstWordOffset < baseOffset) {\n        const offset = baseOffset - firstWordOffset;\n\n        for (const details of this.privDetailedSpeechPhrase.NBest) {\n          if (!!details.Words) {\n            for (const word of details.Words) {\n              word.Offset += offset;\n            }\n          }\n        }\n      }\n    }\n\n    return JSON.stringify(this.privDetailedSpeechPhrase);\n  }\n\n  get RecognitionStatus() {\n    return this.privDetailedSpeechPhrase.RecognitionStatus;\n  }\n\n  get NBest() {\n    return this.privDetailedSpeechPhrase.NBest;\n  }\n\n  get Duration() {\n    return this.privDetailedSpeechPhrase.Duration;\n  }\n\n  get Offset() {\n    return this.privDetailedSpeechPhrase.Offset;\n  }\n\n  get Language() {\n    return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Language;\n  }\n\n  get LanguageDetectionConfidence() {\n    return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Confidence;\n  }\n\n  get Text() {\n    return !!this.privDetailedSpeechPhrase.NBest && this.privDetailedSpeechPhrase.NBest[0] ? this.privDetailedSpeechPhrase.NBest[0].Display : this.privDetailedSpeechPhrase.DisplayText;\n  }\n\n  get SpeakerId() {\n    return this.privDetailedSpeechPhrase.SpeakerId;\n  }\n\n}","map":{"version":3,"sources":["src/common.speech/ServiceMessages/DetailedSpeechPhrase.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SAA2B,iBAA3B,QAAoD,YAApD;AA4BA,OAAM,MAAO,oBAAP,CAA2B;AAG7B,EAAA,WAAA,CAAoB,IAApB,EAAgC;AAC5B,SAAK,wBAAL,GAAgC,IAAI,CAAC,KAAL,CAAW,IAAX,CAAhC;AACA,SAAK,wBAAL,CAA8B,iBAA9B,GAAkD,iBAAiB,CAAC,KAAK,wBAAL,CAA8B,iBAA/B,CAAnE;AACH;;AAEM,SAAO,QAAP,CAAgB,IAAhB,EAA4B;AAC/B,WAAO,IAAI,oBAAJ,CAAyB,IAAzB,CAAP;AACH;;AAEM,EAAA,2BAA2B,CAAC,UAAD,EAAmB;AACjD,QAAI,CAAC,CAAC,KAAK,wBAAL,CAA8B,KAApC,EAA2C;AACvC,UAAI,eAAJ;;AACA,WAAK,MAAM,MAAX,IAAqB,KAAK,wBAAL,CAA8B,KAAnD,EAA0D;AACtD,YAAI,CAAC,CAAC,MAAM,CAAC,KAAT,IAAkB,CAAC,CAAC,MAAM,CAAC,KAAP,CAAa,CAAb,CAAxB,EAAyC;AACrC,UAAA,eAAe,GAAG,MAAM,CAAC,KAAP,CAAa,CAAb,EAAgB,MAAlC;AACA;AACH;AACJ;;AACD,UAAI,CAAC,CAAC,eAAF,IAAqB,eAAe,GAAG,UAA3C,EAAuD;AACnD,cAAM,MAAM,GAAW,UAAU,GAAG,eAApC;;AACA,aAAK,MAAM,OAAX,IAAsB,KAAK,wBAAL,CAA8B,KAApD,EAA2D;AACvD,cAAI,CAAC,CAAC,OAAO,CAAC,KAAd,EAAqB;AACjB,iBAAK,MAAM,IAAX,IAAmB,OAAO,CAAC,KAA3B,EAAkC;AAC9B,cAAA,IAAI,CAAC,MAAL,IAAe,MAAf;AACH;AACJ;AACJ;AACJ;AACJ;;AACD,WAAO,IAAI,CAAC,SAAL,CAAe,KAAK,wBAApB,CAAP;AACH;;AAED,MAAW,iBAAX,GAA4B;AACxB,WAAO,KAAK,wBAAL,CAA8B,iBAArC;AACH;;AACD,MAAW,KAAX,GAAgB;AACZ,WAAO,KAAK,wBAAL,CAA8B,KAArC;AACH;;AACD,MAAW,QAAX,GAAmB;AACf,WAAO,KAAK,wBAAL,CAA8B,QAArC;AACH;;AACD,MAAW,MAAX,GAAiB;AACb,WAAO,KAAK,wBAAL,CAA8B,MAArC;AACH;;AACD,MAAW,QAAX,GAAmB;AACf,WAAO,KAAK,wBAAL,CAA8B,eAA9B,KAAkD,SAAlD,GAA8D,SAA9D,GAA0E,KAAK,wBAAL,CAA8B,eAA9B,CAA8C,QAA/H;AACH;;AACD,MAAW,2BAAX,GAAsC;AAClC,WAAO,KAAK,wBAAL,CAA8B,eAA9B,KAAkD,SAAlD,GAA8D,SAA9D,GAA0E,KAAK,wBAAL,CAA8B,eAA9B,CAA8C,UAA/H;AACH;;AACD,MAAW,IAAX,GAAe;AACX,WAAO,CAAC,CAAC,KAAK,wBAAL,CAA8B,KAAhC,IAAyC,KAAK,wBAAL,CAA8B,KAA9B,CAAoC,CAApC,CAAzC,GAAkF,KAAK,wBAAL,CAA8B,KAA9B,CAAoC,CAApC,EAAuC,OAAzH,GAAmI,KAAK,wBAAL,CAA8B,WAAxK;AACH;;AACD,MAAW,SAAX,GAAoB;AAChB,WAAO,KAAK,wBAAL,CAA8B,SAArC;AACH;;AA1D4B","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IPrimaryLanguage, RecognitionStatus } from \"../Exports\";\r\n\r\n// speech.phrase for detailed\r\nexport interface IDetailedSpeechPhrase {\r\n    RecognitionStatus: RecognitionStatus;\r\n    NBest: IPhrase[];\r\n    Duration?: number;\r\n    Offset?: number;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n    DisplayText?: string;\r\n    SpeakerId?: string;\r\n}\r\n\r\nexport interface IPhrase {\r\n    Confidence?: number;\r\n    Lexical: string;\r\n    ITN: string;\r\n    MaskedITN: string;\r\n    Display: string;\r\n    Words?: IWord[];\r\n}\r\n\r\nexport interface IWord {\r\n    Word: string;\r\n    Offset: number;\r\n    Duration: number;\r\n}\r\n\r\nexport class DetailedSpeechPhrase implements IDetailedSpeechPhrase {\r\n    private privDetailedSpeechPhrase: IDetailedSpeechPhrase;\r\n\r\n    private constructor(json: string) {\r\n        this.privDetailedSpeechPhrase = JSON.parse(json) as IDetailedSpeechPhrase;\r\n        this.privDetailedSpeechPhrase.RecognitionStatus = RecognitionStatus[this.privDetailedSpeechPhrase.RecognitionStatus as unknown as keyof typeof RecognitionStatus];\r\n    }\r\n\r\n    public static fromJSON(json: string): DetailedSpeechPhrase {\r\n        return new DetailedSpeechPhrase(json);\r\n    }\r\n\r\n    public getJsonWithCorrectedOffsets(baseOffset: number): string {\r\n        if (!!this.privDetailedSpeechPhrase.NBest) {\r\n            let firstWordOffset: number;\r\n            for (const phrase of this.privDetailedSpeechPhrase.NBest) {\r\n                if (!!phrase.Words && !!phrase.Words[0]) {\r\n                    firstWordOffset = phrase.Words[0].Offset;\r\n                    break;\r\n                }\r\n            }\r\n            if (!!firstWordOffset && firstWordOffset < baseOffset) {\r\n                const offset: number = baseOffset - firstWordOffset;\r\n                for (const details of this.privDetailedSpeechPhrase.NBest) {\r\n                    if (!!details.Words) {\r\n                        for (const word of details.Words) {\r\n                            word.Offset += offset;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return JSON.stringify(this.privDetailedSpeechPhrase);\r\n    }\r\n\r\n    public get RecognitionStatus(): RecognitionStatus {\r\n        return this.privDetailedSpeechPhrase.RecognitionStatus;\r\n    }\r\n    public get NBest(): IPhrase[] {\r\n        return this.privDetailedSpeechPhrase.NBest;\r\n    }\r\n    public get Duration(): number {\r\n        return this.privDetailedSpeechPhrase.Duration;\r\n    }\r\n    public get Offset(): number {\r\n        return this.privDetailedSpeechPhrase.Offset;\r\n    }\r\n    public get Language(): string {\r\n        return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Language;\r\n    }\r\n    public get LanguageDetectionConfidence(): string {\r\n        return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Confidence;\r\n    }\r\n    public get Text(): string {\r\n        return !!this.privDetailedSpeechPhrase.NBest && this.privDetailedSpeechPhrase.NBest[0] ? this.privDetailedSpeechPhrase.NBest[0].Display : this.privDetailedSpeechPhrase.DisplayText;\r\n    }\r\n    public get SpeakerId(): string {\r\n        return this.privDetailedSpeechPhrase.SpeakerId;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}