{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport * as fs from \"fs\";\nimport { LogLevel } from \"../sdk/LogLevel\";\nimport { Contracts } from \"../sdk/Contracts\";\nexport class ConsoleLoggingListener {\n  constructor(logLevelFilter = LogLevel.None) {\n    this.privLogPath = undefined;\n    this.privLogLevelFilter = logLevelFilter;\n  }\n\n  set logPath(path) {\n    Contracts.throwIfNullOrUndefined(fs.openSync, \"\\nFile System access not available\");\n    this.privLogPath = path;\n  }\n\n  onEvent(event) {\n    if (event.eventType >= this.privLogLevelFilter) {\n      const log = this.toString(event);\n\n      if (!!this.privLogPath) {\n        fs.writeFileSync(this.privLogPath, log + \"\\n\", {\n          flag: \"a+\"\n        });\n      }\n\n      switch (event.eventType) {\n        case LogLevel.Debug:\n          // eslint-disable-next-line no-console\n          console.debug(log);\n          break;\n\n        case LogLevel.Info:\n          // eslint-disable-next-line no-console\n          console.info(log);\n          break;\n\n        case LogLevel.Warning:\n          // eslint-disable-next-line no-console\n          console.warn(log);\n          break;\n\n        case LogLevel.Error:\n          // eslint-disable-next-line no-console\n          console.error(log);\n          break;\n\n        default:\n          // eslint-disable-next-line no-console\n          console.log(log);\n          break;\n      }\n    }\n  }\n\n  toString(event) {\n    const logFragments = [`${event.eventTime}`, `${event.name}`];\n    const e = event;\n\n    for (const prop in e) {\n      if (prop && event.hasOwnProperty(prop) && prop !== \"eventTime\" && prop !== \"eventType\" && prop !== \"eventId\" && prop !== \"name\" && prop !== \"constructor\") {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        const value = e[prop];\n        let valueToLog = \"<NULL>\";\n\n        if (value !== undefined && value !== null) {\n          if (typeof value === \"number\" || typeof value === \"string\") {\n            valueToLog = value.toString();\n          } else {\n            valueToLog = JSON.stringify(value);\n          }\n        }\n\n        logFragments.push(`${prop}: ${valueToLog}`);\n      }\n    }\n\n    return logFragments.join(\" | \");\n  }\n\n}","map":{"version":3,"sources":["src/common.browser/ConsoleLoggingListener.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AAEA,OAAO,KAAK,EAAZ,MAAoB,IAApB;AACA,SAAS,QAAT,QAAyB,iBAAzB;AAEA,SAAS,SAAT,QAA0B,kBAA1B;AAEA,OAAM,MAAO,sBAAP,CAA6B;AAI/B,EAAA,WAAA,CAAmB,cAAA,GAA2B,QAAQ,CAAC,IAAvD,EAA2D;AAFnD,SAAA,WAAA,GAA2B,SAA3B;AAGJ,SAAK,kBAAL,GAA0B,cAA1B;AACH;;AAED,MAAW,OAAX,CAAmB,IAAnB,EAAoC;AAChC,IAAA,SAAS,CAAC,sBAAV,CAAiC,EAAE,CAAC,QAApC,EAA8C,oCAA9C;AACA,SAAK,WAAL,GAAmB,IAAnB;AACH;;AAEM,EAAA,OAAO,CAAC,KAAD,EAAqB;AAC/B,QAAI,KAAK,CAAC,SAAN,IAAmB,KAAK,kBAA5B,EAAgD;AAC5C,YAAM,GAAG,GAAG,KAAK,QAAL,CAAc,KAAd,CAAZ;;AACA,UAAI,CAAC,CAAC,KAAK,WAAX,EAAwB;AACpB,QAAA,EAAE,CAAC,aAAH,CAAiB,KAAK,WAAtB,EAAmC,GAAG,GAAG,IAAzC,EAA+C;AAAE,UAAA,IAAI,EAAE;AAAR,SAA/C;AACH;;AAED,cAAQ,KAAK,CAAC,SAAd;AACI,aAAK,QAAQ,CAAC,KAAd;AACI;AACA,UAAA,OAAO,CAAC,KAAR,CAAc,GAAd;AACA;;AACJ,aAAK,QAAQ,CAAC,IAAd;AACI;AACA,UAAA,OAAO,CAAC,IAAR,CAAa,GAAb;AACA;;AACJ,aAAK,QAAQ,CAAC,OAAd;AACI;AACA,UAAA,OAAO,CAAC,IAAR,CAAa,GAAb;AACA;;AACJ,aAAK,QAAQ,CAAC,KAAd;AACI;AACA,UAAA,OAAO,CAAC,KAAR,CAAc,GAAd;AACA;;AACJ;AACI;AACA,UAAA,OAAO,CAAC,GAAR,CAAY,GAAZ;AACA;AApBR;AAsBH;AACJ;;AAEO,EAAA,QAAQ,CAAC,KAAD,EAAqB;AACjC,UAAM,YAAY,GAAG,CACjB,GAAG,KAAK,CAAC,SAAS,EADD,EAEjB,GAAG,KAAK,CAAC,IAAI,EAFI,CAArB;AAKA,UAAM,CAAC,GAAQ,KAAf;;AACA,SAAK,MAAM,IAAX,IAAmB,CAAnB,EAAsB;AAClB,UAAI,IAAI,IAAI,KAAK,CAAC,cAAN,CAAqB,IAArB,CAAR,IACA,IAAI,KAAK,WADT,IACwB,IAAI,KAAK,WADjC,IAEA,IAAI,KAAK,SAFT,IAEsB,IAAI,KAAK,MAF/B,IAGA,IAAI,KAAK,aAHb,EAG4B;AACxB;AACA,cAAM,KAAK,GAAG,CAAC,CAAC,IAAD,CAAf;AACA,YAAI,UAAU,GAAG,QAAjB;;AACA,YAAI,KAAK,KAAK,SAAV,IAAuB,KAAK,KAAK,IAArC,EAA2C;AACvC,cAAI,OAAQ,KAAR,KAAmB,QAAnB,IAA+B,OAAQ,KAAR,KAAmB,QAAtD,EAAgE;AAC5D,YAAA,UAAU,GAAG,KAAK,CAAC,QAAN,EAAb;AACH,WAFD,MAEO;AACH,YAAA,UAAU,GAAG,IAAI,CAAC,SAAL,CAAe,KAAf,CAAb;AACH;AACJ;;AAED,QAAA,YAAY,CAAC,IAAb,CAAkB,GAAG,IAAI,KAAK,UAAU,EAAxC;AACH;AAEJ;;AAED,WAAO,YAAY,CAAC,IAAb,CAAkB,KAAlB,CAAP;AACH;;AA1E8B","sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-assignment */\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport * as fs from \"fs\";\r\nimport { LogLevel } from \"../sdk/LogLevel\";\r\nimport { IEventListener, PlatformEvent } from \"../common/Exports\";\r\nimport { Contracts } from \"../sdk/Contracts\";\r\n\r\nexport class ConsoleLoggingListener implements IEventListener<PlatformEvent> {\r\n    private privLogLevelFilter: LogLevel;\r\n    private privLogPath: fs.PathLike = undefined;\r\n\r\n    public constructor(logLevelFilter: LogLevel = LogLevel.None) { // Console output disabled by default\r\n        this.privLogLevelFilter = logLevelFilter;\r\n    }\r\n\r\n    public set logPath(path: fs.PathLike) {\r\n        Contracts.throwIfNullOrUndefined(fs.openSync, \"\\nFile System access not available\");\r\n        this.privLogPath = path;\r\n    }\r\n\r\n    public onEvent(event: PlatformEvent): void {\r\n        if (event.eventType >= this.privLogLevelFilter) {\r\n            const log = this.toString(event);\r\n            if (!!this.privLogPath) {\r\n                fs.writeFileSync(this.privLogPath, log + \"\\n\", { flag: \"a+\" });\r\n            }\r\n\r\n            switch (event.eventType) {\r\n                case LogLevel.Debug:\r\n                    // eslint-disable-next-line no-console\r\n                    console.debug(log);\r\n                    break;\r\n                case LogLevel.Info:\r\n                    // eslint-disable-next-line no-console\r\n                    console.info(log);\r\n                    break;\r\n                case LogLevel.Warning:\r\n                    // eslint-disable-next-line no-console\r\n                    console.warn(log);\r\n                    break;\r\n                case LogLevel.Error:\r\n                    // eslint-disable-next-line no-console\r\n                    console.error(log);\r\n                    break;\r\n                default:\r\n                    // eslint-disable-next-line no-console\r\n                    console.log(log);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private toString(event: PlatformEvent): string {\r\n        const logFragments = [\r\n            `${event.eventTime}`,\r\n            `${event.name}`,\r\n        ];\r\n\r\n        const e: any = event as any;\r\n        for (const prop in e) {\r\n            if (prop && event.hasOwnProperty(prop) &&\r\n                prop !== \"eventTime\" && prop !== \"eventType\" &&\r\n                prop !== \"eventId\" && prop !== \"name\" &&\r\n                prop !== \"constructor\") {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n                const value = e[prop];\r\n                let valueToLog = \"<NULL>\";\r\n                if (value !== undefined && value !== null) {\r\n                    if (typeof (value) === \"number\" || typeof (value) === \"string\") {\r\n                        valueToLog = value.toString();\r\n                    } else {\r\n                        valueToLog = JSON.stringify(value);\r\n                    }\r\n                }\r\n\r\n                logFragments.push(`${prop}: ${valueToLog}`);\r\n            }\r\n\r\n        }\r\n\r\n        return logFragments.join(\" | \");\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}