{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ProxyInfo, WebsocketConnection } from \"../common.browser/Exports\";\nimport { ForceDictationPropertyName, OutputFormatPropertyName } from \"../common.speech/Exports\";\nimport { OutputFormat, PropertyId } from \"../sdk/Exports\";\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\nimport { RecognitionMode, WebsocketMessageFormatter } from \"./Exports\";\nimport { HeaderNames } from \"./HeaderNames\";\nimport { QueryParameterNames } from \"./QueryParameterNames\";\nexport class SpeechConnectionFactory extends ConnectionFactoryBase {\n  constructor() {\n    super(...arguments);\n    this.interactiveRelativeUri = \"/speech/recognition/interactive/cognitiveservices/v1\";\n    this.conversationRelativeUri = \"/speech/recognition/conversation/cognitiveservices/v1\";\n    this.dictationRelativeUri = \"/speech/recognition/dictation/cognitiveservices/v1\";\n    this.universalUri = \"/speech/universal/v\";\n  }\n\n  create(config, authInfo, connectionId) {\n    let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\n    const region = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\n    const hostSuffix = ConnectionFactoryBase.getHostSuffix(region);\n    const host = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".stt.speech\" + hostSuffix);\n    const queryParams = {};\n    const endpointId = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\n    const language = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\n\n    if (endpointId) {\n      if (!endpoint || endpoint.search(QueryParameterNames.CustomSpeechDeploymentId) === -1) {\n        queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\n      }\n    } else if (language) {\n      if (!endpoint || endpoint.search(QueryParameterNames.Language) === -1) {\n        queryParams[QueryParameterNames.Language] = language;\n      }\n    }\n\n    if (!endpoint || endpoint.search(QueryParameterNames.Format) === -1) {\n      queryParams[QueryParameterNames.Format] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\n    }\n\n    if (config.autoDetectSourceLanguages !== undefined) {\n      queryParams[QueryParameterNames.EnableLanguageId] = \"true\";\n    }\n\n    this.setCommonUrlParams(config, queryParams, endpoint);\n\n    if (!endpoint) {\n      switch (config.recognitionMode) {\n        case RecognitionMode.Conversation:\n          if (config.parameters.getProperty(ForceDictationPropertyName, \"false\") === \"true\") {\n            endpoint = host + this.dictationRelativeUri;\n          } else {\n            if (config.recognitionEndpointVersion !== undefined && parseInt(config.recognitionEndpointVersion, 10) > 1) {\n              endpoint = `${host}${this.universalUri}${config.recognitionEndpointVersion}`;\n            } else {\n              endpoint = host + this.conversationRelativeUri;\n            }\n          }\n\n          break;\n\n        case RecognitionMode.Dictation:\n          endpoint = host + this.dictationRelativeUri;\n          break;\n\n        default:\n          if (config.recognitionEndpointVersion !== undefined && parseInt(config.recognitionEndpointVersion, 10) > 1) {\n            endpoint = `${host}${this.universalUri}${config.recognitionEndpointVersion}`;\n          } else {\n            endpoint = host + this.interactiveRelativeUri; // default is interactive\n          }\n\n          break;\n      }\n    }\n\n    const headers = {};\n\n    if (authInfo.token !== undefined && authInfo.token !== \"\") {\n      headers[authInfo.headerName] = authInfo.token;\n    }\n\n    headers[HeaderNames.ConnectionId] = connectionId;\n    config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\n    const enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n    return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\n  }\n\n}","map":{"version":3,"sources":["src/common.speech/SpeechConnectionFactory.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    ForceDictationPropertyName,\r\n    OutputFormatPropertyName,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports\";\r\nimport {\r\n    OutputFormat,\r\n    PropertyId\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase\";\r\nimport {\r\n    AuthInfo,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames\";\r\n\r\nexport class SpeechConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private readonly interactiveRelativeUri: string = \"/speech/recognition/interactive/cognitiveservices/v1\";\r\n    private readonly conversationRelativeUri: string = \"/speech/recognition/conversation/cognitiveservices/v1\";\r\n    private readonly dictationRelativeUri: string = \"/speech/recognition/dictation/cognitiveservices/v1\";\r\n    private readonly universalUri: string = \"/speech/universal/v\";\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".stt.speech\" + hostSuffix);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n\r\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\r\n\r\n        if (endpointId) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.CustomSpeechDeploymentId) === -1) {\r\n                queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\r\n            }\r\n        } else if (language) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.Language) === -1) {\r\n                queryParams[QueryParameterNames.Language] = language;\r\n            }\r\n        }\r\n\r\n        if (!endpoint || endpoint.search(QueryParameterNames.Format) === -1) {\r\n            queryParams[QueryParameterNames.Format] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n        }\r\n\r\n        if (config.autoDetectSourceLanguages !== undefined) {\r\n            queryParams[QueryParameterNames.EnableLanguageId] = \"true\";\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        if (!endpoint) {\r\n            switch (config.recognitionMode) {\r\n                case RecognitionMode.Conversation:\r\n                    if (config.parameters.getProperty(ForceDictationPropertyName, \"false\") === \"true\") {\r\n                        endpoint = host + this.dictationRelativeUri;\r\n                    } else {\r\n                        if (config.recognitionEndpointVersion !== undefined && parseInt(config.recognitionEndpointVersion, 10) > 1) {\r\n                            endpoint = `${host}${this.universalUri}${config.recognitionEndpointVersion}`;\r\n                        } else {\r\n                            endpoint = host + this.conversationRelativeUri;\r\n                        }\r\n                    }\r\n                    break;\r\n                case RecognitionMode.Dictation:\r\n                    endpoint = host + this.dictationRelativeUri;\r\n                    break;\r\n                default:\r\n                    if (config.recognitionEndpointVersion !== undefined && parseInt(config.recognitionEndpointVersion, 10) > 1) {\r\n                        endpoint = `${host}${this.universalUri}${config.recognitionEndpointVersion}`;\r\n                    } else {\r\n                        endpoint = host + this.interactiveRelativeUri; // default is interactive\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}