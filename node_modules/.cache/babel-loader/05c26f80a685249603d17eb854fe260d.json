{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nconst parseCommandResponse = json => JSON.parse(json);\n\nexport class CommandResponsePayload {\n  constructor(json) {\n    this.privCommandResponse = parseCommandResponse(json);\n  }\n\n  get type() {\n    return this.privCommandResponse.type;\n  }\n\n  get command() {\n    return this.privCommandResponse.command;\n  }\n\n  get id() {\n    return this.privCommandResponse.id;\n  }\n\n  get nickname() {\n    return this.privCommandResponse.nickname;\n  }\n\n  get participantId() {\n    return this.privCommandResponse.participantId;\n  }\n\n  get roomid() {\n    return this.privCommandResponse.roomid;\n  }\n\n  get value() {\n    return this.privCommandResponse.value;\n  }\n\n  get token() {\n    return this.privCommandResponse.token;\n  }\n\n  static fromJSON(json) {\n    return new CommandResponsePayload(json);\n  }\n\n}","map":{"version":3,"sources":["src/common.speech/Transcription/ServiceMessages/CommandResponsePayload.ts"],"names":[],"mappings":"AAAA;AACA;AAgBA,MAAM,oBAAoB,GAAI,IAAD,IAA2C,IAAI,CAAC,KAAL,CAAW,IAAX,CAAxE;;AAEA,OAAM,MAAO,sBAAP,CAA6B;AAG/B,EAAA,WAAA,CAAmB,IAAnB,EAA+B;AAC3B,SAAK,mBAAL,GAA2B,oBAAoB,CAAC,IAAD,CAA/C;AACH;;AAED,MAAW,IAAX,GAAe;AACX,WAAO,KAAK,mBAAL,CAAyB,IAAhC;AACH;;AACD,MAAW,OAAX,GAAkB;AACd,WAAO,KAAK,mBAAL,CAAyB,OAAhC;AACH;;AACD,MAAW,EAAX,GAAa;AACT,WAAO,KAAK,mBAAL,CAAyB,EAAhC;AACH;;AACD,MAAW,QAAX,GAAmB;AACf,WAAO,KAAK,mBAAL,CAAyB,QAAhC;AACH;;AACD,MAAW,aAAX,GAAwB;AACpB,WAAO,KAAK,mBAAL,CAAyB,aAAhC;AACH;;AACD,MAAW,MAAX,GAAiB;AACb,WAAO,KAAK,mBAAL,CAAyB,MAAhC;AACH;;AACD,MAAW,KAAX,GAAgB;AACZ,WAAO,KAAK,mBAAL,CAAyB,KAAhC;AACH;;AACD,MAAW,KAAX,GAAgB;AACZ,WAAO,KAAK,mBAAL,CAAyB,KAAhC;AACH;;AAEM,SAAO,QAAP,CAAgB,IAAhB,EAA4B;AAC/B,WAAO,IAAI,sBAAJ,CAA2B,IAA3B,CAAP;AACH;;AAlC8B","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the payload for incoming websocket commands\r\n */\r\nexport interface ICommandResponsePayload {\r\n    type: string;\r\n    command?: string;\r\n    id?: string; // incoming ws\r\n    nickname?: string; // incoming ws\r\n    participantId?: string;\r\n    roomid?: string;\r\n    value: boolean | number | string;\r\n    token?: string;\r\n}\r\n\r\nconst parseCommandResponse = (json: string): ICommandResponsePayload => JSON.parse(json) as ICommandResponsePayload;\r\n\r\nexport class CommandResponsePayload implements ICommandResponsePayload {\r\n    private privCommandResponse: ICommandResponsePayload;\r\n\r\n    public constructor(json: string) {\r\n        this.privCommandResponse = parseCommandResponse(json);\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privCommandResponse.type;\r\n    }\r\n    public get command(): string {\r\n        return this.privCommandResponse.command;\r\n    }\r\n    public get id(): string {\r\n        return this.privCommandResponse.id;\r\n    }\r\n    public get nickname(): string {\r\n        return this.privCommandResponse.nickname;\r\n    }\r\n    public get participantId(): string {\r\n        return this.privCommandResponse.participantId;\r\n    }\r\n    public get roomid(): string {\r\n        return this.privCommandResponse.roomid;\r\n    }\r\n    public get value(): boolean | number | string {\r\n        return this.privCommandResponse.value;\r\n    }\r\n    public get token(): string {\r\n        return this.privCommandResponse.token;\r\n    }\r\n\r\n    public static fromJSON(json: string): CommandResponsePayload {\r\n        return new CommandResponsePayload(json);\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}