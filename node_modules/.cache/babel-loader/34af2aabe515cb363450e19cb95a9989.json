{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { ReplayableAudioNode } from \"../common.browser/Exports\";\nimport { SendingAgentContextMessageEvent } from \"../common/DialogEvents\";\nimport { BackgroundEvent, createGuid, createNoDashGuid, Deferred, Events, EventSource, MessageType, ServiceEvent } from \"../common/Exports\";\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat\";\nimport { ActivityReceivedEventArgs, CancellationErrorCode, CancellationReason, DialogServiceConfig, PropertyCollection, PropertyId, RecognitionEventArgs, ResultReason, SessionEventArgs, SpeechRecognitionCanceledEventArgs, SpeechRecognitionEventArgs, SpeechRecognitionResult, TurnStatusReceivedEventArgs } from \"../sdk/Exports\";\nimport { DialogServiceTurnStateManager } from \"./DialogServiceTurnStateManager\";\nimport { CancellationErrorCodePropertyName, EnumTranslation, RecognitionStatus, ServiceRecognizerBase, SimpleSpeechPhrase, SpeechDetected, SpeechHypothesis, SpeechKeyword } from \"./Exports\";\nimport { ActivityPayloadResponse } from \"./ServiceMessages/ActivityResponsePayload\";\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\nexport class DialogServiceAdapter extends ServiceRecognizerBase {\n  constructor(authentication, connectionFactory, audioSource, recognizerConfig, dialogServiceConnector) {\n    super(authentication, connectionFactory, audioSource, recognizerConfig, dialogServiceConnector);\n    this.privEvents = new EventSource();\n    this.privDialogServiceConnector = dialogServiceConnector;\n\n    this.receiveMessageOverride = () => this.receiveDialogMessageOverride();\n\n    this.privTurnStateManager = new DialogServiceTurnStateManager();\n\n    this.recognizeOverride = (recoMode, successCallback, errorCallback) => this.listenOnce(recoMode, successCallback, errorCallback);\n\n    this.postConnectImplOverride = connection => this.dialogConnectImpl(connection);\n\n    this.configConnectionOverride = connection => this.configConnection(connection);\n\n    this.disconnectOverride = () => this.privDisconnect();\n\n    this.privDialogAudioSource = audioSource;\n    this.agentConfigSent = false;\n    this.privLastResult = null;\n    this.connectionEvents.attach(connectionEvent => {\n      if (connectionEvent.name === \"ConnectionClosedEvent\") {\n        this.terminateMessageLoop = true;\n      }\n    });\n  }\n\n  sendMessage(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const interactionGuid = createGuid();\n      const requestId = createNoDashGuid();\n      const agentMessage = {\n        context: {\n          interactionId: interactionGuid\n        },\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        messagePayload: JSON.parse(message),\n        version: 0.5\n      };\n      const agentMessageJson = JSON.stringify(agentMessage);\n      const connection = yield this.fetchConnection();\n      yield connection.send(new SpeechConnectionMessage(MessageType.Text, \"agent\", requestId, \"application/json\", agentMessageJson));\n    });\n  }\n\n  privDisconnect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.NoError, \"Disconnecting\");\n      this.terminateMessageLoop = true;\n      this.agentConfigSent = false;\n      return;\n    });\n  }\n\n  processTypeSpecificMessages(connectionMessage) {\n    const resultProps = new PropertyCollection();\n\n    if (connectionMessage.messageType === MessageType.Text) {\n      resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\n    }\n\n    let result;\n    let processed;\n\n    switch (connectionMessage.path.toLowerCase()) {\n      case \"speech.phrase\":\n        const speechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\n        this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + speechPhrase.Offset + speechPhrase.Duration);\n\n        if (speechPhrase.RecognitionStatus !== RecognitionStatus.TooManyRequests && speechPhrase.RecognitionStatus !== RecognitionStatus.Error) {\n          const args = this.fireEventForResult(speechPhrase, resultProps);\n          this.privLastResult = args.result;\n\n          if (!!this.privDialogServiceConnector.recognized) {\n            try {\n              this.privDialogServiceConnector.recognized(this.privDialogServiceConnector, args);\n              /* eslint-disable no-empty */\n            } catch (error) {// Not going to let errors in the event handler\n              // trip things up.\n            }\n          }\n        }\n\n        processed = true;\n        break;\n\n      case \"speech.hypothesis\":\n        const hypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\n        const offset = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\n        result = new SpeechRecognitionResult(this.privRequestSession.requestId, ResultReason.RecognizingSpeech, hypothesis.Text, hypothesis.Duration, offset, hypothesis.Language, hypothesis.LanguageDetectionConfidence, undefined, undefined, connectionMessage.textBody, resultProps);\n        this.privRequestSession.onHypothesis(offset);\n        const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\n\n        if (!!this.privDialogServiceConnector.recognizing) {\n          try {\n            this.privDialogServiceConnector.recognizing(this.privDialogServiceConnector, ev);\n            /* eslint-disable no-empty */\n          } catch (error) {// Not going to let errors in the event handler\n            // trip things up.\n          }\n        }\n\n        processed = true;\n        break;\n\n      case \"speech.keyword\":\n        const keyword = SpeechKeyword.fromJSON(connectionMessage.textBody);\n        result = new SpeechRecognitionResult(this.privRequestSession.requestId, keyword.Status === \"Accepted\" ? ResultReason.RecognizedKeyword : ResultReason.NoMatch, keyword.Text, keyword.Duration, keyword.Offset, undefined, undefined, undefined, undefined, connectionMessage.textBody, resultProps);\n\n        if (keyword.Status !== \"Accepted\") {\n          this.privLastResult = result;\n        }\n\n        const event = new SpeechRecognitionEventArgs(result, result.duration, result.resultId);\n\n        if (!!this.privDialogServiceConnector.recognized) {\n          try {\n            this.privDialogServiceConnector.recognized(this.privDialogServiceConnector, event);\n            /* eslint-disable no-empty */\n          } catch (error) {// Not going to let errors in the event handler\n            // trip things up.\n          }\n        }\n\n        processed = true;\n        break;\n\n      case \"audio\":\n        {\n          const audioRequestId = connectionMessage.requestId.toUpperCase();\n          const turn = this.privTurnStateManager.GetTurn(audioRequestId);\n\n          try {\n            // Empty binary message signals end of stream.\n            if (!connectionMessage.binaryBody) {\n              turn.endAudioStream();\n            } else {\n              turn.audioStream.write(connectionMessage.binaryBody);\n            }\n          } catch (error) {// Not going to let errors in the event handler\n            // trip things up.\n          }\n        }\n        processed = true;\n        break;\n\n      case \"response\":\n        {\n          this.handleResponseMessage(connectionMessage);\n        }\n        processed = true;\n        break;\n\n      default:\n        break;\n    }\n\n    const defferal = new Deferred();\n    defferal.resolve(processed);\n    return defferal.promise;\n  } // Cancels recognition.\n\n\n  cancelRecognition(sessionId, requestId, cancellationReason, errorCode, error) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.terminateMessageLoop = true;\n\n      if (!!this.privRequestSession.isRecognizing) {\n        yield this.privRequestSession.onStopRecognizing();\n      }\n\n      if (!!this.privDialogServiceConnector.canceled) {\n        const properties = new PropertyCollection();\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\n        const cancelEvent = new SpeechRecognitionCanceledEventArgs(cancellationReason, error, errorCode, undefined, sessionId);\n\n        try {\n          this.privDialogServiceConnector.canceled(this.privDialogServiceConnector, cancelEvent);\n          /* eslint-disable no-empty */\n        } catch (_a) {}\n\n        if (!!this.privSuccessCallback) {\n          const result = new SpeechRecognitionResult(undefined, // ResultId\n          ResultReason.Canceled, undefined, // Text\n          undefined, // Duration\n          undefined, // Offset\n          undefined, // Language\n          undefined, // Language Detection Confidence\n          undefined, // Speaker Id\n          error, undefined, // Json\n          properties);\n\n          try {\n            this.privSuccessCallback(result);\n            this.privSuccessCallback = undefined;\n            /* eslint-disable no-empty */\n          } catch (_b) {}\n        }\n      }\n    });\n  }\n\n  listenOnce(recoMode, successCallback, errorCallback) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.privRecognizerConfig.recognitionMode = recoMode;\n      this.privSuccessCallback = successCallback;\n      this.privErrorCallback = errorCallback;\n      this.privRequestSession.startNewRecognition();\n      this.privRequestSession.listenForServiceTelemetry(this.privDialogAudioSource.events);\n      this.privRecognizerConfig.parameters.setProperty(PropertyId.Speech_SessionId, this.privRequestSession.sessionId); // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\n\n      const conPromise = this.connectImpl();\n      const preAudioPromise = this.sendPreAudioMessages();\n      const node = yield this.privDialogAudioSource.attach(this.privRequestSession.audioNodeId);\n      const format = yield this.privDialogAudioSource.format;\n      const deviceInfo = yield this.privDialogAudioSource.deviceInfo;\n      const audioNode = new ReplayableAudioNode(node, format.avgBytesPerSec);\n      yield this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\n      this.privRecognizerConfig.SpeechServiceConfig.Context.audio = {\n        source: deviceInfo\n      };\n\n      try {\n        yield conPromise;\n        yield preAudioPromise;\n      } catch (error) {\n        yield this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.ConnectionFailure, error);\n        return Promise.resolve();\n      }\n\n      const sessionStartEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\n\n      if (!!this.privRecognizer.sessionStarted) {\n        this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\n      }\n\n      const audioSendPromise = this.sendAudio(audioNode); // /* eslint-disable no-empty */\n\n      audioSendPromise.then(() => {}, error => __awaiter(this, void 0, void 0, function* () {\n        yield this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\n      }));\n    });\n  } // Establishes a websocket connection to the end point.\n\n\n  dialogConnectImpl(connection) {\n    this.privConnectionLoop = this.startMessageLoop();\n    return connection;\n  }\n\n  receiveDialogMessageOverride() {\n    // we won't rely on the cascading promises of the connection since we want to continually be available to receive messages\n    const communicationCustodian = new Deferred();\n\n    const loop = () => __awaiter(this, void 0, void 0, function* () {\n      try {\n        const isDisposed = this.isDisposed();\n        const terminateMessageLoop = !this.isDisposed() && this.terminateMessageLoop;\n\n        if (isDisposed || terminateMessageLoop) {\n          // We're done.\n          communicationCustodian.resolve(undefined);\n          return;\n        }\n\n        const connection = yield this.fetchConnection();\n        const message = yield connection.read();\n\n        if (!message) {\n          return loop();\n        }\n\n        const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\n\n        switch (connectionMessage.path.toLowerCase()) {\n          case \"turn.start\":\n            {\n              const turnRequestId = connectionMessage.requestId.toUpperCase();\n              const audioSessionReqId = this.privRequestSession.requestId.toUpperCase(); // turn started by the service\n\n              if (turnRequestId !== audioSessionReqId) {\n                this.privTurnStateManager.StartTurn(turnRequestId);\n              } else {\n                this.privRequestSession.onServiceTurnStartResponse();\n              }\n            }\n            break;\n\n          case \"speech.startdetected\":\n            const speechStartDetected = SpeechDetected.fromJSON(connectionMessage.textBody);\n            const speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, this.privRequestSession.sessionId);\n\n            if (!!this.privRecognizer.speechStartDetected) {\n              this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\n            }\n\n            break;\n\n          case \"speech.enddetected\":\n            let json;\n\n            if (connectionMessage.textBody.length > 0) {\n              json = connectionMessage.textBody;\n            } else {\n              // If the request was empty, the JSON returned is empty.\n              json = \"{ Offset: 0 }\";\n            }\n\n            const speechStopDetected = SpeechDetected.fromJSON(json);\n            this.privRequestSession.onServiceRecognized(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset);\n            const speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\n\n            if (!!this.privRecognizer.speechEndDetected) {\n              this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\n            }\n\n            break;\n\n          case \"turn.end\":\n            {\n              const turnEndRequestId = connectionMessage.requestId.toUpperCase();\n              const audioSessionReqId = this.privRequestSession.requestId.toUpperCase(); // turn started by the service\n\n              if (turnEndRequestId !== audioSessionReqId) {\n                this.privTurnStateManager.CompleteTurn(turnEndRequestId);\n              } else {\n                // Audio session turn\n                const sessionStopEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\n                yield this.privRequestSession.onServiceTurnEndResponse(false);\n\n                if (!this.privRecognizerConfig.isContinuousRecognition || this.privRequestSession.isSpeechEnded || !this.privRequestSession.isRecognizing) {\n                  if (!!this.privRecognizer.sessionStopped) {\n                    this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\n                  }\n                } // report result to promise.\n\n\n                if (!!this.privSuccessCallback && this.privLastResult) {\n                  try {\n                    this.privSuccessCallback(this.privLastResult);\n                    this.privLastResult = null;\n                  } catch (e) {\n                    if (!!this.privErrorCallback) {\n                      this.privErrorCallback(e);\n                    }\n                  } // Only invoke the call back once.\n                  // and if it's successful don't invoke the\n                  // error after that.\n\n\n                  this.privSuccessCallback = undefined;\n                  this.privErrorCallback = undefined;\n                }\n              }\n            }\n            break;\n\n          default:\n            try {\n              const processed = yield this.processTypeSpecificMessages(connectionMessage);\n\n              if (!processed) {\n                if (!!this.serviceEvents) {\n                  this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\n                }\n              }\n            } catch (e) {//\n            }\n\n        }\n\n        const ret = loop();\n        return ret;\n      } catch (error) {\n        this.terminateMessageLoop = true;\n        communicationCustodian.resolve();\n      }\n    });\n\n    loop().catch(reason => {\n      Events.instance.onEvent(new BackgroundEvent(reason));\n    });\n    return communicationCustodian.promise;\n  }\n\n  startMessageLoop() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.terminateMessageLoop = false;\n\n      try {\n        yield this.receiveDialogMessageOverride();\n      } catch (error) {\n        yield this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\n      }\n\n      return Promise.resolve();\n    });\n  } // Takes an established websocket connection to the endpoint and sends speech configuration information.\n\n\n  configConnection(connection) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.terminateMessageLoop) {\n        this.terminateMessageLoop = false;\n        return Promise.reject(\"Connection to service terminated.\");\n      }\n\n      yield this.sendSpeechServiceConfig(connection, this.privRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize());\n      yield this.sendAgentConfig(connection);\n      return connection;\n    });\n  }\n\n  sendPreAudioMessages() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const connection = yield this.fetchConnection();\n      this.addKeywordContextData();\n      yield this.sendSpeechContext(connection, true);\n      yield this.sendAgentContext(connection);\n      yield this.sendWaveHeader(connection);\n    });\n  }\n\n  sendAgentConfig(connection) {\n    if (this.agentConfig && !this.agentConfigSent) {\n      if (this.privRecognizerConfig.parameters.getProperty(PropertyId.Conversation_DialogType) === DialogServiceConfig.DialogTypes.CustomCommands) {\n        const config = this.agentConfig.get();\n        config.botInfo.commandsCulture = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"en-us\");\n        this.agentConfig.set(config);\n      }\n\n      this.onEvent(new SendingAgentContextMessageEvent(this.agentConfig));\n      const agentConfigJson = this.agentConfig.toJsonString(); // guard against sending this multiple times on one connection\n\n      this.agentConfigSent = true;\n      return connection.send(new SpeechConnectionMessage(MessageType.Text, \"agent.config\", this.privRequestSession.requestId, \"application/json\", agentConfigJson));\n    }\n\n    return;\n  }\n\n  sendAgentContext(connection) {\n    const guid = createGuid();\n    const speechActivityTemplate = this.privDialogServiceConnector.properties.getProperty(PropertyId.Conversation_Speech_Activity_Template);\n    const agentContext = {\n      channelData: \"\",\n      context: {\n        interactionId: guid\n      },\n      messagePayload: typeof speechActivityTemplate === undefined ? undefined : speechActivityTemplate,\n      version: 0.5\n    };\n    const agentContextJson = JSON.stringify(agentContext);\n    return connection.send(new SpeechConnectionMessage(MessageType.Text, \"speech.agent.context\", this.privRequestSession.requestId, \"application/json\", agentContextJson));\n  }\n\n  fireEventForResult(serviceResult, properties) {\n    const resultReason = EnumTranslation.implTranslateRecognitionResult(serviceResult.RecognitionStatus);\n    const offset = serviceResult.Offset + this.privRequestSession.currentTurnAudioOffset;\n    const result = new SpeechRecognitionResult(this.privRequestSession.requestId, resultReason, serviceResult.DisplayText, serviceResult.Duration, offset, serviceResult.Language, serviceResult.LanguageDetectionConfidence, undefined, undefined, JSON.stringify(serviceResult), properties);\n    const ev = new SpeechRecognitionEventArgs(result, offset, this.privRequestSession.sessionId);\n    return ev;\n  }\n\n  handleResponseMessage(responseMessage) {\n    // \"response\" messages can contain either \"message\" (activity) or \"MessageStatus\" data. Fire the appropriate\n    // event according to the message type that's specified.\n    const responsePayload = JSON.parse(responseMessage.textBody);\n\n    switch (responsePayload.messageType.toLowerCase()) {\n      case \"message\":\n        const responseRequestId = responseMessage.requestId.toUpperCase();\n        const activityPayload = ActivityPayloadResponse.fromJSON(responseMessage.textBody);\n        const turn = this.privTurnStateManager.GetTurn(responseRequestId); // update the conversation Id\n\n        if (activityPayload.conversationId) {\n          const updateAgentConfig = this.agentConfig.get();\n          updateAgentConfig.botInfo.conversationId = activityPayload.conversationId;\n          this.agentConfig.set(updateAgentConfig);\n        }\n\n        const pullAudioOutputStream = turn.processActivityPayload(activityPayload, AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(this.privDialogServiceConnector.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)));\n        const activity = new ActivityReceivedEventArgs(activityPayload.messagePayload, pullAudioOutputStream);\n\n        if (!!this.privDialogServiceConnector.activityReceived) {\n          try {\n            this.privDialogServiceConnector.activityReceived(this.privDialogServiceConnector, activity);\n            /* eslint-disable-next-line no-empty */\n          } catch (error) {// Not going to let errors in the event handler\n            // trip things up.\n          }\n        }\n\n        break;\n\n      case \"messagestatus\":\n        if (!!this.privDialogServiceConnector.turnStatusReceived) {\n          try {\n            this.privDialogServiceConnector.turnStatusReceived(this.privDialogServiceConnector, new TurnStatusReceivedEventArgs(responseMessage.textBody));\n            /* eslint-disable-next-line no-empty */\n          } catch (error) {// Not going to let errors in the event handler\n            // trip things up.\n          }\n        }\n\n        break;\n\n      default:\n        Events.instance.onEvent(new BackgroundEvent(`Unexpected response of type ${responsePayload.messageType}. Ignoring.`));\n        break;\n    }\n  }\n\n  onEvent(event) {\n    this.privEvents.onEvent(event);\n    Events.instance.onEvent(event);\n  }\n\n  addKeywordContextData() {\n    const keywordPropertyValue = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-KeywordsToDetect\");\n\n    if (keywordPropertyValue === undefined) {\n      return;\n    }\n\n    const keywordOffsetPropertyValue = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-KeywordsToDetect-Offsets\");\n    const keywordDurationPropertyValue = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-KeywordsToDetect-Durations\");\n    const keywords = keywordPropertyValue.split(\";\");\n    const keywordOffsets = keywordOffsetPropertyValue === undefined ? [] : keywordOffsetPropertyValue.split(\";\");\n    const keywordDurations = keywordDurationPropertyValue === undefined ? [] : keywordDurationPropertyValue.split(\";\");\n    const keywordDefinitionArray = [];\n\n    for (let i = 0; i < keywords.length; i++) {\n      const definition = {};\n      definition.text = keywords[i];\n\n      if (i < keywordOffsets.length) {\n        definition.offset = Number(keywordOffsets[i]);\n      }\n\n      if (i < keywordDurations.length) {\n        definition.duration = Number(keywordDurations[i]);\n      }\n\n      keywordDefinitionArray.push(definition);\n    }\n\n    this.speechContext.setSection(\"invocationSource\", \"VoiceActivationWithKeyword\");\n    this.speechContext.setSection(\"keywordDetection\", [{\n      clientDetectedKeywords: keywordDefinitionArray,\n      onReject: {\n        action: \"EndOfTurn\"\n      },\n      type: \"startTrigger\"\n    }]);\n  }\n\n}","map":{"version":3,"sources":["src/common.speech/DialogServiceAdapter.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ReplayableAudioNode\r\n} from \"../common.browser/Exports\";\r\nimport { SendingAgentContextMessageEvent } from \"../common/DialogEvents\";\r\nimport {\r\n    BackgroundEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    createGuid,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    DialogEvent,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    MessageType,\r\n    ServiceEvent,\r\n} from \"../common/Exports\";\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat\";\r\nimport { PullAudioOutputStreamImpl } from \"../sdk/Audio/AudioOutputStream\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat\";\r\nimport {\r\n    ActivityReceivedEventArgs,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    DialogServiceConfig,\r\n    DialogServiceConnector,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    ResultReason,\r\n    SessionEventArgs,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n    TurnStatusReceivedEventArgs,\r\n} from \"../sdk/Exports\";\r\nimport { DialogServiceTurnStateManager } from \"./DialogServiceTurnStateManager\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    EnumTranslation,\r\n    ISpeechConfigAudioDevice,\r\n    RecognitionStatus,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechDetected,\r\n    SpeechHypothesis,\r\n    SpeechKeyword,\r\n} from \"./Exports\";\r\nimport { IAuthentication } from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognitionMode, RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { ActivityPayloadResponse } from \"./ServiceMessages/ActivityResponsePayload\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\nexport class DialogServiceAdapter extends ServiceRecognizerBase {\r\n    private privDialogServiceConnector: DialogServiceConnector;\r\n\r\n    private privDialogAudioSource: IAudioSource;\r\n\r\n    private privConnectionLoop: Promise<void>;\r\n    private terminateMessageLoop: boolean;\r\n    private agentConfigSent: boolean;\r\n    private privLastResult: SpeechRecognitionResult;\r\n    private privEvents: EventSource<DialogEvent>;\r\n\r\n    // Turns are of two kinds:\r\n    // 1: SR turns, end when the SR result is returned and then turn end.\r\n    // 2: Service turns where an activity is sent by the service along with the audio.\r\n    private privTurnStateManager: DialogServiceTurnStateManager;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        dialogServiceConnector: DialogServiceConnector) {\r\n\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, dialogServiceConnector);\r\n\r\n        this.privEvents = new EventSource<DialogEvent>();\r\n        this.privDialogServiceConnector = dialogServiceConnector;\r\n        this.receiveMessageOverride = (): Promise<void> => this.receiveDialogMessageOverride();\r\n        this.privTurnStateManager = new DialogServiceTurnStateManager();\r\n        this.recognizeOverride =\r\n            (recoMode: RecognitionMode, successCallback: (e: SpeechRecognitionResult) => void, errorCallback: (e: string) => void): Promise<void> =>\r\n            this.listenOnce(recoMode, successCallback, errorCallback);\r\n        this.postConnectImplOverride = (connection: Promise<IConnection>): Promise<IConnection> => this.dialogConnectImpl(connection);\r\n        this.configConnectionOverride = (connection: IConnection): Promise<IConnection> => this.configConnection(connection);\r\n        this.disconnectOverride = (): Promise<void> => this.privDisconnect();\r\n        this.privDialogAudioSource = audioSource;\r\n\r\n        this.agentConfigSent = false;\r\n        this.privLastResult = null;\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                this.terminateMessageLoop = true;\r\n            }\r\n        });\r\n    }\r\n\r\n    public async sendMessage(message: string): Promise<void> {\r\n        const interactionGuid: string = createGuid();\r\n        const requestId: string = createNoDashGuid();\r\n\r\n        const agentMessage: any = {\r\n            context: {\r\n                interactionId: interactionGuid\r\n            },\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n            messagePayload: JSON.parse(message),\r\n            version: 0.5\r\n        };\r\n\r\n        const agentMessageJson = JSON.stringify(agentMessage);\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"agent\",\r\n            requestId,\r\n            \"application/json\",\r\n            agentMessageJson));\r\n\r\n    }\r\n\r\n    protected async privDisconnect(): Promise<void> {\r\n        await this.cancelRecognition(this.privRequestSession.sessionId,\r\n            this.privRequestSession.requestId,\r\n            CancellationReason.Error,\r\n            CancellationErrorCode.NoError,\r\n            \"Disconnecting\");\r\n\r\n        this.terminateMessageLoop = true;\r\n        this.agentConfigSent = false;\r\n        return;\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        let result: SpeechRecognitionResult;\r\n        let processed: boolean;\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.phrase\":\r\n                const speechPhrase: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n\r\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + speechPhrase.Offset + speechPhrase.Duration);\r\n\r\n                if (speechPhrase.RecognitionStatus !== RecognitionStatus.TooManyRequests && speechPhrase.RecognitionStatus !== RecognitionStatus.Error) {\r\n                    const args: SpeechRecognitionEventArgs = this.fireEventForResult(speechPhrase, resultProps);\r\n                    this.privLastResult = args.result;\r\n\r\n                    if (!!this.privDialogServiceConnector.recognized) {\r\n                        try {\r\n                            this.privDialogServiceConnector.recognized(this.privDialogServiceConnector, args);\r\n                            /* eslint-disable no-empty */\r\n                        } catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.hypothesis\":\r\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n                const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingSpeech,\r\n                    hypothesis.Text,\r\n                    hypothesis.Duration,\r\n                    offset,\r\n                    hypothesis.Language,\r\n                    hypothesis.LanguageDetectionConfidence,\r\n                    undefined,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(offset);\r\n\r\n                const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privDialogServiceConnector.recognizing) {\r\n                    try {\r\n                        this.privDialogServiceConnector.recognizing(this.privDialogServiceConnector, ev);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.keyword\":\r\n                const keyword: SpeechKeyword = SpeechKeyword.fromJSON(connectionMessage.textBody);\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    this.privRequestSession.requestId,\r\n                    keyword.Status === \"Accepted\" ? ResultReason.RecognizedKeyword : ResultReason.NoMatch,\r\n                    keyword.Text,\r\n                    keyword.Duration,\r\n                    keyword.Offset,\r\n                    undefined,\r\n                    undefined,\r\n                    undefined,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                if (keyword.Status !== \"Accepted\") {\r\n                    this.privLastResult = result;\r\n                }\r\n\r\n                const event = new SpeechRecognitionEventArgs(result, result.duration, result.resultId);\r\n\r\n                if (!!this.privDialogServiceConnector.recognized) {\r\n                    try {\r\n                        this.privDialogServiceConnector.recognized(this.privDialogServiceConnector, event);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"audio\":\r\n                {\r\n                    const audioRequestId = connectionMessage.requestId.toUpperCase();\r\n                    const turn = this.privTurnStateManager.GetTurn(audioRequestId);\r\n                    try {\r\n                        // Empty binary message signals end of stream.\r\n                        if (!connectionMessage.binaryBody) {\r\n                            turn.endAudioStream();\r\n                        } else {\r\n                            turn.audioStream.write(connectionMessage.binaryBody);\r\n                        }\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n\r\n            case \"response\":\r\n                {\r\n                    this.handleResponseMessage(connectionMessage);\r\n\r\n                }\r\n                processed = true;\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n        const defferal = new Deferred<boolean>();\r\n        defferal.resolve(processed);\r\n        return defferal.promise;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected async cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): Promise<void> {\r\n\r\n        this.terminateMessageLoop = true;\r\n\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            await this.privRequestSession.onStopRecognizing();\r\n        }\r\n\r\n        if (!!this.privDialogServiceConnector.canceled) {\r\n            const properties: PropertyCollection = new PropertyCollection();\r\n            properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n            const cancelEvent: SpeechRecognitionCanceledEventArgs = new SpeechRecognitionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                sessionId);\r\n\r\n            try {\r\n                this.privDialogServiceConnector.canceled(this.privDialogServiceConnector, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n\r\n            if (!!this.privSuccessCallback) {\r\n                const result: SpeechRecognitionResult = new SpeechRecognitionResult(\r\n                    undefined, // ResultId\r\n                    ResultReason.Canceled,\r\n                    undefined, // Text\r\n                    undefined, // Duration\r\n                    undefined, // Offset\r\n                    undefined, // Language\r\n                    undefined, // Language Detection Confidence\r\n                    undefined, // Speaker Id\r\n                    error,\r\n                    undefined, // Json\r\n                    properties);\r\n                try {\r\n                    this.privSuccessCallback(result);\r\n                    this.privSuccessCallback = undefined;\r\n                    /* eslint-disable no-empty */\r\n                } catch { }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected async listenOnce(\r\n        recoMode: RecognitionMode,\r\n        successCallback: (e: SpeechRecognitionResult) => void,\r\n        errorCallback: (e: string) => void\r\n    ): Promise<void> {\r\n        this.privRecognizerConfig.recognitionMode = recoMode;\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallback;\r\n\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privDialogAudioSource.events);\r\n\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.Speech_SessionId, this.privRequestSession.sessionId);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n\r\n        const preAudioPromise: Promise<void> = this.sendPreAudioMessages();\r\n\r\n        const node: IAudioStreamNode = await this.privDialogAudioSource.attach(this.privRequestSession.audioNodeId);\r\n        const format: AudioStreamFormatImpl = await this.privDialogAudioSource.format;\r\n        const deviceInfo: ISpeechConfigAudioDevice = await this.privDialogAudioSource.deviceInfo;\r\n\r\n        const audioNode = new ReplayableAudioNode(node, format.avgBytesPerSec);\r\n        await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n\r\n        this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n        try {\r\n            await conPromise;\r\n            await preAudioPromise;\r\n        } catch (error) {\r\n            await this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.ConnectionFailure, error as string);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n        if (!!this.privRecognizer.sessionStarted) {\r\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n        }\r\n\r\n        const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n        // /* eslint-disable no-empty */\r\n        audioSendPromise.then((): void => { /* add? return true;*/ }, async (error: string): Promise<void> => {\r\n            await this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n    }\r\n\r\n    // Establishes a websocket connection to the end point.\r\n    private dialogConnectImpl(connection: Promise<IConnection>): Promise<IConnection> {\r\n        this.privConnectionLoop = this.startMessageLoop();\r\n        return connection;\r\n    }\r\n\r\n    private receiveDialogMessageOverride(): Promise<void> {\r\n\r\n        // we won't rely on the cascading promises of the connection since we want to continually be available to receive messages\r\n        const communicationCustodian: Deferred<void> = new Deferred<void>();\r\n\r\n        const loop = async (): Promise<void> => {\r\n            try {\r\n                const isDisposed: boolean = this.isDisposed();\r\n                const terminateMessageLoop = (!this.isDisposed() && this.terminateMessageLoop);\r\n                if (isDisposed || terminateMessageLoop) {\r\n                    // We're done.\r\n                    communicationCustodian.resolve(undefined);\r\n                    return;\r\n                }\r\n\r\n                const connection: IConnection = await this.fetchConnection();\r\n                const message: ConnectionMessage = await connection.read();\r\n\r\n                if (!message) {\r\n                    return loop();\r\n                }\r\n\r\n                const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n                switch (connectionMessage.path.toLowerCase()) {\r\n                    case \"turn.start\":\r\n                        {\r\n                            const turnRequestId = connectionMessage.requestId.toUpperCase();\r\n                            const audioSessionReqId = this.privRequestSession.requestId.toUpperCase();\r\n\r\n                            // turn started by the service\r\n                            if (turnRequestId !== audioSessionReqId) {\r\n                                this.privTurnStateManager.StartTurn(turnRequestId);\r\n                            } else {\r\n                                this.privRequestSession.onServiceTurnStartResponse();\r\n                            }\r\n                        }\r\n                        break;\r\n\r\n                    case \"speech.startdetected\":\r\n                        const speechStartDetected: SpeechDetected = SpeechDetected.fromJSON(connectionMessage.textBody);\r\n\r\n                        const speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privRecognizer.speechStartDetected) {\r\n                            this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\r\n                        }\r\n\r\n                        break;\r\n\r\n                    case \"speech.enddetected\":\r\n\r\n                        let json: string;\r\n\r\n                        if (connectionMessage.textBody.length > 0) {\r\n                            json = connectionMessage.textBody;\r\n                        } else {\r\n                            // If the request was empty, the JSON returned is empty.\r\n                            json = \"{ Offset: 0 }\";\r\n                        }\r\n\r\n                        const speechStopDetected: SpeechDetected = SpeechDetected.fromJSON(json);\r\n\r\n                        this.privRequestSession.onServiceRecognized(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset);\r\n\r\n                        const speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privRecognizer.speechEndDetected) {\r\n                            this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\r\n                        }\r\n                        break;\r\n\r\n                    case \"turn.end\":\r\n                        {\r\n                            const turnEndRequestId = connectionMessage.requestId.toUpperCase();\r\n\r\n                            const audioSessionReqId = this.privRequestSession.requestId.toUpperCase();\r\n\r\n                            // turn started by the service\r\n                            if (turnEndRequestId !== audioSessionReqId) {\r\n                                this.privTurnStateManager.CompleteTurn(turnEndRequestId);\r\n                            } else {\r\n                                // Audio session turn\r\n\r\n                                const sessionStopEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n                                await this.privRequestSession.onServiceTurnEndResponse(false);\r\n\r\n                                if (!this.privRecognizerConfig.isContinuousRecognition || this.privRequestSession.isSpeechEnded || !this.privRequestSession.isRecognizing) {\r\n                                    if (!!this.privRecognizer.sessionStopped) {\r\n                                        this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\r\n                                    }\r\n                                }\r\n\r\n                                // report result to promise.\r\n                                if (!!this.privSuccessCallback && this.privLastResult) {\r\n                                    try {\r\n                                        this.privSuccessCallback(this.privLastResult);\r\n                                        this.privLastResult = null;\r\n                                    } catch (e) {\r\n                                        if (!!this.privErrorCallback) {\r\n                                            this.privErrorCallback(e as string);\r\n                                        }\r\n                                    }\r\n                                    // Only invoke the call back once.\r\n                                    // and if it's successful don't invoke the\r\n                                    // error after that.\r\n                                    this.privSuccessCallback = undefined;\r\n                                    this.privErrorCallback = undefined;\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n                        try {\r\n                            const processed = await this.processTypeSpecificMessages(connectionMessage);\r\n                            if (!processed) {\r\n                                if (!!this.serviceEvents) {\r\n                                    this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                                }\r\n                            }\r\n                        } catch (e) {\r\n                            //\r\n                        }\r\n                }\r\n                const ret: Promise<void> = loop();\r\n\r\n                return ret;\r\n            } catch (error) {\r\n                this.terminateMessageLoop = true;\r\n                communicationCustodian.resolve();\r\n            }\r\n        };\r\n\r\n        loop().catch((reason: string): void => {\r\n            Events.instance.onEvent(new BackgroundEvent(reason));\r\n        });\r\n\r\n        return communicationCustodian.promise;\r\n    }\r\n\r\n    private async startMessageLoop(): Promise<void> {\r\n\r\n        this.terminateMessageLoop = false;\r\n\r\n        try {\r\n            await this.receiveDialogMessageOverride();\r\n        } catch (error) {\r\n            await this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error as string);\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private async configConnection(connection: IConnection): Promise<IConnection> {\r\n        if (this.terminateMessageLoop) {\r\n            this.terminateMessageLoop = false;\r\n            return Promise.reject(\"Connection to service terminated.\");\r\n        }\r\n\r\n        await this.sendSpeechServiceConfig(connection, this.privRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize());\r\n        await this.sendAgentConfig(connection);\r\n        return connection;\r\n    }\r\n\r\n    private async sendPreAudioMessages(): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        this.addKeywordContextData();\r\n        await this.sendSpeechContext(connection, true);\r\n        await this.sendAgentContext(connection);\r\n        await this.sendWaveHeader(connection);\r\n    }\r\n\r\n    private sendAgentConfig(connection: IConnection): Promise<void> {\r\n        if (this.agentConfig && !this.agentConfigSent) {\r\n\r\n            if (this.privRecognizerConfig\r\n                .parameters\r\n                .getProperty(PropertyId.Conversation_DialogType) === DialogServiceConfig.DialogTypes.CustomCommands) {\r\n                const config = this.agentConfig.get();\r\n                config.botInfo.commandsCulture = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"en-us\");\r\n                this.agentConfig.set(config);\r\n            }\r\n            this.onEvent(new SendingAgentContextMessageEvent(this.agentConfig));\r\n\r\n            const agentConfigJson = this.agentConfig.toJsonString();\r\n\r\n            // guard against sending this multiple times on one connection\r\n            this.agentConfigSent = true;\r\n\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"agent.config\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                agentConfigJson));\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    private sendAgentContext(connection: IConnection): Promise<void> {\r\n        const guid: string = createGuid();\r\n\r\n        const speechActivityTemplate = this.privDialogServiceConnector.properties.getProperty(PropertyId.Conversation_Speech_Activity_Template);\r\n\r\n        const agentContext: any = {\r\n            channelData: \"\",\r\n            context: {\r\n                interactionId: guid\r\n            },\r\n            messagePayload: typeof speechActivityTemplate === undefined ? undefined : speechActivityTemplate,\r\n            version: 0.5\r\n        };\r\n\r\n        const agentContextJson = JSON.stringify(agentContext);\r\n\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"speech.agent.context\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json\",\r\n            agentContextJson));\r\n    }\r\n\r\n    private fireEventForResult(serviceResult: SimpleSpeechPhrase, properties: PropertyCollection): SpeechRecognitionEventArgs {\r\n        const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(serviceResult.RecognitionStatus);\r\n\r\n        const offset: number = serviceResult.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n        const result = new SpeechRecognitionResult(\r\n            this.privRequestSession.requestId,\r\n            resultReason,\r\n            serviceResult.DisplayText,\r\n            serviceResult.Duration,\r\n            offset,\r\n            serviceResult.Language,\r\n            serviceResult.LanguageDetectionConfidence,\r\n            undefined,\r\n            undefined,\r\n            JSON.stringify(serviceResult),\r\n            properties);\r\n\r\n        const ev = new SpeechRecognitionEventArgs(result, offset, this.privRequestSession.sessionId);\r\n        return ev;\r\n    }\r\n\r\n    private handleResponseMessage(responseMessage: SpeechConnectionMessage): void {\r\n        // \"response\" messages can contain either \"message\" (activity) or \"MessageStatus\" data. Fire the appropriate\r\n        // event according to the message type that's specified.\r\n        const responsePayload: { messageType: string } = JSON.parse(responseMessage.textBody) as { messageType: string };\r\n        switch (responsePayload.messageType.toLowerCase()) {\r\n            case \"message\":\r\n                const responseRequestId = responseMessage.requestId.toUpperCase();\r\n                const activityPayload: ActivityPayloadResponse = ActivityPayloadResponse.fromJSON(responseMessage.textBody);\r\n                const turn = this.privTurnStateManager.GetTurn(responseRequestId);\r\n\r\n                // update the conversation Id\r\n                if (activityPayload.conversationId) {\r\n                    const updateAgentConfig = this.agentConfig.get();\r\n                    updateAgentConfig.botInfo.conversationId = activityPayload.conversationId;\r\n                    this.agentConfig.set(updateAgentConfig);\r\n                }\r\n\r\n                const pullAudioOutputStream: PullAudioOutputStreamImpl = turn.processActivityPayload(\r\n                    activityPayload,\r\n                    AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(this.privDialogServiceConnector.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)));\r\n                const activity = new ActivityReceivedEventArgs(activityPayload.messagePayload, pullAudioOutputStream);\r\n                if (!!this.privDialogServiceConnector.activityReceived) {\r\n                    try {\r\n                        this.privDialogServiceConnector.activityReceived(this.privDialogServiceConnector, activity);\r\n                        /* eslint-disable-next-line no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                break;\r\n\r\n            case \"messagestatus\":\r\n                if (!!this.privDialogServiceConnector.turnStatusReceived) {\r\n                    try {\r\n                        this.privDialogServiceConnector.turnStatusReceived(\r\n                            this.privDialogServiceConnector,\r\n                            new TurnStatusReceivedEventArgs(responseMessage.textBody));\r\n                        /* eslint-disable-next-line no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                break;\r\n\r\n            default:\r\n                Events.instance.onEvent(\r\n                    new BackgroundEvent(`Unexpected response of type ${responsePayload.messageType}. Ignoring.`));\r\n                break;\r\n        }\r\n    }\r\n\r\n    private onEvent(event: DialogEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private addKeywordContextData(): void {\r\n        const keywordPropertyValue: string = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-KeywordsToDetect\");\r\n        if (keywordPropertyValue === undefined) {\r\n            return;\r\n        }\r\n\r\n        const keywordOffsetPropertyValue: string = this.privRecognizerConfig.parameters\r\n            .getProperty(\"SPEECH-KeywordsToDetect-Offsets\");\r\n        const keywordDurationPropertyValue: string = this.privRecognizerConfig.parameters\r\n            .getProperty(\"SPEECH-KeywordsToDetect-Durations\");\r\n\r\n        const keywords = keywordPropertyValue.split(\";\");\r\n        const keywordOffsets = keywordOffsetPropertyValue === undefined ? [] : keywordOffsetPropertyValue.split(\";\");\r\n        const keywordDurations = keywordDurationPropertyValue === undefined ? [] : keywordDurationPropertyValue.split(\";\");\r\n\r\n        const keywordDefinitionArray = [];\r\n        for (let i = 0; i < keywords.length; i++) {\r\n            const definition: { [section: string]: any } = {};\r\n            definition.text = keywords[i];\r\n            if (i < keywordOffsets.length) {\r\n                definition.offset = Number(keywordOffsets[i]);\r\n            }\r\n            if (i < keywordDurations.length) {\r\n                definition.duration = Number(keywordDurations[i]);\r\n            }\r\n            keywordDefinitionArray.push(definition);\r\n        }\r\n\r\n        this.speechContext.setSection(\"invocationSource\", \"VoiceActivationWithKeyword\");\r\n        this.speechContext.setSection(\"keywordDetection\", [{\r\n            clientDetectedKeywords: keywordDefinitionArray,\r\n            onReject: { action: \"EndOfTurn\" },\r\n            type: \"startTrigger\"\r\n        }]);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}