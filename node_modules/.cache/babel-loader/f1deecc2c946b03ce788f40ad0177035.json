{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { RecognitionMode, RecognizerConfig, TranslationConnectionFactory, TranslationServiceRecognizer } from \"../common.speech/Exports\";\nimport { marshalPromiseToCallbacks } from \"../common/Exports\";\nimport { Connection } from \"./Connection\";\nimport { Contracts } from \"./Contracts\";\nimport { PropertyId, Recognizer } from \"./Exports\";\n/**\n * Translation recognizer\n * @class TranslationRecognizer\n */\n\nexport class TranslationRecognizer extends Recognizer {\n  /**\n   * Initializes an instance of the TranslationRecognizer.\n   * @constructor\n   * @param {SpeechTranslationConfig} speechConfig - Set of properties to configure this recognizer.\n   * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\n   */\n  constructor(speechConfig, audioConfig) {\n    const configImpl = speechConfig;\n    Contracts.throwIfNull(configImpl, \"speechConfig\");\n    super(audioConfig, configImpl.properties, new TranslationConnectionFactory());\n    this.privDisposedTranslationRecognizer = false;\n\n    if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\n      Contracts.throwIfNullOrWhitespace(this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice), PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\n    }\n\n    Contracts.throwIfNullOrWhitespace(this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages), PropertyId[PropertyId.SpeechServiceConnection_TranslationToLanguages]);\n    Contracts.throwIfNullOrWhitespace(this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage), PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\n  }\n  /**\n   * Gets the language name that was set when the recognizer was created.\n   * @member TranslationRecognizer.prototype.speechRecognitionLanguage\n   * @function\n   * @public\n   * @returns {string} Gets the language name that was set when the recognizer was created.\n   */\n\n\n  get speechRecognitionLanguage() {\n    Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n    return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\n  }\n  /**\n   * Gets target languages for translation that were set when the recognizer was created.\n   * The language is specified in BCP-47 format. The translation will provide translated text for each of language.\n   * @member TranslationRecognizer.prototype.targetLanguages\n   * @function\n   * @public\n   * @returns {string[]} Gets target languages for translation that were set when the recognizer was created.\n   */\n\n\n  get targetLanguages() {\n    Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n    return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\n  }\n  /**\n   * Gets the name of output voice.\n   * @member TranslationRecognizer.prototype.voiceName\n   * @function\n   * @public\n   * @returns {string} the name of output voice.\n   */\n\n\n  get voiceName() {\n    Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n    return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\n  }\n  /**\n   * The collection of properties and their values defined for this TranslationRecognizer.\n   * @member TranslationRecognizer.prototype.properties\n   * @function\n   * @public\n   * @returns {PropertyCollection} The collection of properties and their values defined for this TranslationRecognizer.\n   */\n\n\n  get properties() {\n    return this.privProperties;\n  }\n  /**\n   * Gets the authorization token used to communicate with the service.\n   * @member TranslationRecognizer.prototype.authorizationToken\n   * @function\n   * @public\n   * @returns {string} Authorization token.\n   */\n\n\n  get authorizationToken() {\n    return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n  }\n  /**\n   * Gets/Sets the authorization token used to communicate with the service.\n   * @member TranslationRecognizer.prototype.authorizationToken\n   * @function\n   * @public\n   * @param {string} value - Authorization token.\n   */\n\n\n  set authorizationToken(value) {\n    this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\n  }\n  /**\n   * Starts recognition and translation, and stops after the first utterance is recognized.\n   * The task returns the translation text as result.\n   * Note: recognizeOnceAsync returns when the first utterance has been recognized, so it is suitable only\n   * for single shot recognition like command or query. For long-running recognition,\n   * use startContinuousRecognitionAsync() instead.\n   * @member TranslationRecognizer.prototype.recognizeOnceAsync\n   * @function\n   * @public\n   * @param cb - Callback that received the result when the translation has completed.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  recognizeOnceAsync(cb, err) {\n    Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n    marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Conversation), cb, err);\n  }\n  /**\n   * Starts recognition and translation, until stopContinuousRecognitionAsync() is called.\n   * User must subscribe to events to receive translation results.\n   * @member TranslationRecognizer.prototype.startContinuousRecognitionAsync\n   * @function\n   * @public\n   * @param cb - Callback that received the translation has started.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  startContinuousRecognitionAsync(cb, err) {\n    marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\n  }\n  /**\n   * Stops continuous recognition and translation.\n   * @member TranslationRecognizer.prototype.stopContinuousRecognitionAsync\n   * @function\n   * @public\n   * @param cb - Callback that received the translation has stopped.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  stopContinuousRecognitionAsync(cb, err) {\n    marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\n  }\n  /**\n   * dynamically remove a language from list of target language\n   * (can be used while recognition is ongoing)\n   * @member TranslationRecognizer.prototype.removeTargetLanguage\n   * @function\n   * @param lang - language to be removed\n   * @public\n   */\n\n\n  removeTargetLanguage(lang) {\n    Contracts.throwIfNullOrUndefined(lang, \"language to be removed\");\n\n    if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\n      const languages = this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\n      const index = languages.indexOf(lang);\n\n      if (index > -1) {\n        languages.splice(index, 1);\n        this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\n        this.updateLanguages(languages);\n      }\n    }\n  }\n  /**\n   * dynamically add a language to list of target language\n   * (can be used while recognition is ongoing)\n   * @member TranslationRecognizer.prototype.addTargetLanguage\n   * @function\n   * @param lang - language to be added\n   * @public\n   */\n\n\n  addTargetLanguage(lang) {\n    Contracts.throwIfNullOrUndefined(lang, \"language to be added\");\n    let languages = [];\n\n    if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\n      languages = this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\n\n      if (!languages.includes(lang)) {\n        languages.push(lang);\n        this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\n      }\n    } else {\n      this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, lang);\n      languages = [lang];\n    }\n\n    this.updateLanguages(languages);\n  }\n  /**\n   * closes all external resources held by an instance of this class.\n   * @member TranslationRecognizer.prototype.close\n   * @function\n   * @public\n   */\n\n\n  close(cb, errorCb) {\n    Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n    marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\n  }\n  /**\n   * handles ConnectionEstablishedEvent for conversation translation scenarios.\n   * @member TranslationRecognizer.prototype.onConnection\n   * @function\n   * @public\n   */\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n\n\n  onConnection() {}\n  /**\n   * handles disconnection events for conversation translation scenarios.\n   * @member TranslationRecognizer.prototype.onDisconnection\n   * @function\n   * @public\n   */\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n\n\n  onDisconnection() {\n    return __awaiter(this, void 0, void 0, function* () {});\n  }\n\n  dispose(disposing) {\n    const _super = Object.create(null, {\n      dispose: {\n        get: () => super.dispose\n      }\n    });\n\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privDisposedTranslationRecognizer) {\n        return;\n      }\n\n      this.privDisposedTranslationRecognizer = true;\n\n      if (disposing) {\n        yield this.implRecognizerStop();\n        yield _super.dispose.call(this, disposing);\n      }\n    });\n  }\n\n  createRecognizerConfig(speechConfig) {\n    return new RecognizerConfig(speechConfig, this.properties);\n  }\n\n  createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {\n    const configImpl = audioConfig;\n    return new TranslationServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\n  }\n\n  updateLanguages(languages) {\n    const conn = Connection.fromRecognizer(this);\n\n    if (!!conn) {\n      conn.setMessageProperty(\"speech.context\", \"translationcontext\", {\n        to: languages\n      });\n      conn.sendMessageAsync(\"event\", JSON.stringify({\n        id: \"translation\",\n        name: \"updateLanguage\",\n        to: languages\n      }));\n    }\n  }\n\n}","map":{"version":3,"sources":["src/sdk/TranslationRecognizer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n    TranslationConnectionFactory,\r\n    TranslationServiceRecognizer\r\n} from \"../common.speech/Exports\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Connection } from \"./Connection\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    TranslationRecognitionCanceledEventArgs,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognitionResult,\r\n    TranslationSynthesisEventArgs\r\n} from \"./Exports\";\r\nimport { SpeechTranslationConfig, SpeechTranslationConfigImpl } from \"./SpeechTranslationConfig\";\r\n\r\n/**\r\n * Translation recognizer\r\n * @class TranslationRecognizer\r\n */\r\nexport class TranslationRecognizer extends Recognizer {\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member TranslationRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: TranslationRecognizer, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member TranslationRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: TranslationRecognizer, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member TranslationRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: TranslationRecognizer, event: TranslationRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * The event synthesizing signals that a translation synthesis result is received.\r\n     * @member TranslationRecognizer.prototype.synthesizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesizing: (sender: TranslationRecognizer, event: TranslationSynthesisEventArgs) => void;\r\n\r\n    private privDisposedTranslationRecognizer: boolean;\r\n\r\n    /**\r\n     * Initializes an instance of the TranslationRecognizer.\r\n     * @constructor\r\n     * @param {SpeechTranslationConfig} speechConfig - Set of properties to configure this recognizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig) {\r\n        const configImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(configImpl, \"speechConfig\");\r\n\r\n        super(audioConfig, configImpl.properties, new TranslationConnectionFactory());\r\n\r\n        this.privDisposedTranslationRecognizer = false;\r\n\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\r\n            Contracts.throwIfNullOrWhitespace(\r\n                this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice),\r\n                PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\r\n        }\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages),\r\n            PropertyId[PropertyId.SpeechServiceConnection_TranslationToLanguages]);\r\n\r\n        Contracts.throwIfNullOrWhitespace(this.properties.getProperty(\r\n            PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n    }\r\n\r\n    /**\r\n     * Gets the language name that was set when the recognizer was created.\r\n     * @member TranslationRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} Gets the language name that was set when the recognizer was created.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets target languages for translation that were set when the recognizer was created.\r\n     * The language is specified in BCP-47 format. The translation will provide translated text for each of language.\r\n     * @member TranslationRecognizer.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @returns {string[]} Gets target languages for translation that were set when the recognizer was created.\r\n     */\r\n    public get targetLanguages(): string[] {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n    }\r\n\r\n    /**\r\n     * Gets the name of output voice.\r\n     * @member TranslationRecognizer.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} the name of output voice.\r\n     */\r\n    public get voiceName(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this TranslationRecognizer.\r\n     * @member TranslationRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this TranslationRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member TranslationRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member TranslationRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - Authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and translation, and stops after the first utterance is recognized.\r\n     * The task returns the translation text as result.\r\n     * Note: recognizeOnceAsync returns when the first utterance has been recognized, so it is suitable only\r\n     * for single shot recognition like command or query. For long-running recognition,\r\n     * use startContinuousRecognitionAsync() instead.\r\n     * @member TranslationRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the result when the translation has completed.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: TranslationRecognitionResult) => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n        marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and translation, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive translation results.\r\n     * @member TranslationRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the translation has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops continuous recognition and translation.\r\n     * @member TranslationRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the translation has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * dynamically remove a language from list of target language\r\n     * (can be used while recognition is ongoing)\r\n     * @member TranslationRecognizer.prototype.removeTargetLanguage\r\n     * @function\r\n     * @param lang - language to be removed\r\n     * @public\r\n     */\r\n    public removeTargetLanguage(lang: string): void {\r\n        Contracts.throwIfNullOrUndefined(lang, \"language to be removed\");\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\r\n            const languages: string[] = this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n            const index: number = languages.indexOf(lang);\r\n            if (index > -1) {\r\n                languages.splice(index, 1);\r\n                this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\r\n                this.updateLanguages(languages);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * dynamically add a language to list of target language\r\n     * (can be used while recognition is ongoing)\r\n     * @member TranslationRecognizer.prototype.addTargetLanguage\r\n     * @function\r\n     * @param lang - language to be added\r\n     * @public\r\n     */\r\n    public addTargetLanguage(lang: string): void {\r\n        Contracts.throwIfNullOrUndefined(lang, \"language to be added\");\r\n        let languages: string[] = [];\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\r\n            languages = this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n            if (!languages.includes(lang)) {\r\n                languages.push(lang);\r\n                this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\r\n            }\r\n        } else {\r\n            this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, lang);\r\n            languages = [lang];\r\n        }\r\n        this.updateLanguages(languages);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member TranslationRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * handles ConnectionEstablishedEvent for conversation translation scenarios.\r\n     * @member TranslationRecognizer.prototype.onConnection\r\n     * @function\r\n     * @public\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    public onConnection(): void { }\r\n\r\n    /**\r\n     * handles disconnection events for conversation translation scenarios.\r\n     * @member TranslationRecognizer.prototype.onDisconnection\r\n     * @function\r\n     * @public\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    public async onDisconnection(): Promise<void> { }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedTranslationRecognizer) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposedTranslationRecognizer = true;\r\n\r\n        if (disposing) {\r\n            await this.implRecognizerStop();\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.properties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new TranslationServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n\r\n    private updateLanguages(languages: string[]): void {\r\n        const conn: Connection = Connection.fromRecognizer(this);\r\n        if (!!conn) {\r\n            conn.setMessageProperty(\"speech.context\", \"translationcontext\", {to: languages});\r\n            conn.sendMessageAsync(\"event\", JSON.stringify({\r\n                id: \"translation\",\r\n                name: \"updateLanguage\",\r\n                to: languages\r\n                }));\r\n        }\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}