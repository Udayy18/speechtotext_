{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ConnectionMessage, Deferred, MessageType, RawWebsocketMessage } from \"../common/Exports\";\nconst CRLF = \"\\r\\n\";\nexport class WebsocketMessageFormatter {\n  toConnectionMessage(message) {\n    const deferral = new Deferred();\n\n    try {\n      if (message.messageType === MessageType.Text) {\n        const textMessage = message.textContent;\n        let headers = {};\n        let body = null;\n\n        if (textMessage) {\n          const headerBodySplit = textMessage.split(\"\\r\\n\\r\\n\");\n\n          if (headerBodySplit && headerBodySplit.length > 0) {\n            headers = this.parseHeaders(headerBodySplit[0]);\n\n            if (headerBodySplit.length > 1) {\n              body = headerBodySplit[1];\n            }\n          }\n        }\n\n        deferral.resolve(new ConnectionMessage(message.messageType, body, headers, message.id));\n      } else if (message.messageType === MessageType.Binary) {\n        const binaryMessage = message.binaryContent;\n        let headers = {};\n        let body = null;\n\n        if (!binaryMessage || binaryMessage.byteLength < 2) {\n          throw new Error(\"Invalid binary message format. Header length missing.\");\n        }\n\n        const dataView = new DataView(binaryMessage);\n        const headerLength = dataView.getInt16(0);\n\n        if (binaryMessage.byteLength < headerLength + 2) {\n          throw new Error(\"Invalid binary message format. Header content missing.\");\n        }\n\n        let headersString = \"\";\n\n        for (let i = 0; i < headerLength; i++) {\n          headersString += String.fromCharCode(dataView.getInt8(i + 2));\n        }\n\n        headers = this.parseHeaders(headersString);\n\n        if (binaryMessage.byteLength > headerLength + 2) {\n          body = binaryMessage.slice(2 + headerLength);\n        }\n\n        deferral.resolve(new ConnectionMessage(message.messageType, body, headers, message.id));\n      }\n    } catch (e) {\n      deferral.reject(`Error formatting the message. Error: ${e}`);\n    }\n\n    return deferral.promise;\n  }\n\n  fromConnectionMessage(message) {\n    const deferral = new Deferred();\n\n    try {\n      if (message.messageType === MessageType.Text) {\n        const payload = `${this.makeHeaders(message)}${CRLF}${message.textBody ? message.textBody : \"\"}`;\n        deferral.resolve(new RawWebsocketMessage(MessageType.Text, payload, message.id));\n      } else if (message.messageType === MessageType.Binary) {\n        const headersString = this.makeHeaders(message);\n        const content = message.binaryBody;\n        const headerBuffer = this.stringToArrayBuffer(headersString);\n        const headerInt8Array = new Int8Array(headerBuffer);\n        const headerLength = headerInt8Array.byteLength;\n        const payloadInt8Array = new Int8Array(2 + headerLength + (content ? content.byteLength : 0));\n        payloadInt8Array[0] = headerLength >> 8 & 0xff;\n        payloadInt8Array[1] = headerLength & 0xff;\n        payloadInt8Array.set(headerInt8Array, 2);\n\n        if (content) {\n          const bodyInt8Array = new Int8Array(content);\n          payloadInt8Array.set(bodyInt8Array, 2 + headerLength);\n        }\n\n        const payload = payloadInt8Array.buffer;\n        deferral.resolve(new RawWebsocketMessage(MessageType.Binary, payload, message.id));\n      }\n    } catch (e) {\n      deferral.reject(`Error formatting the message. ${e}`);\n    }\n\n    return deferral.promise;\n  }\n\n  makeHeaders(message) {\n    let headersString = \"\";\n\n    if (message.headers) {\n      for (const header in message.headers) {\n        if (header) {\n          headersString += `${header}: ${message.headers[header]}${CRLF}`;\n        }\n      }\n    }\n\n    return headersString;\n  }\n\n  parseHeaders(headersString) {\n    const headers = {};\n\n    if (headersString) {\n      const headerMatches = headersString.match(/[^\\r\\n]+/g);\n\n      if (headers) {\n        for (const header of headerMatches) {\n          if (header) {\n            const separatorIndex = header.indexOf(\":\");\n            const headerName = separatorIndex > 0 ? header.substr(0, separatorIndex).trim().toLowerCase() : header;\n            const headerValue = separatorIndex > 0 && header.length > separatorIndex + 1 ? header.substr(separatorIndex + 1).trim() : \"\";\n            headers[headerName] = headerValue;\n          }\n        }\n      }\n    }\n\n    return headers;\n  }\n\n  stringToArrayBuffer(str) {\n    const buffer = new ArrayBuffer(str.length);\n    const view = new DataView(buffer);\n\n    for (let i = 0; i < str.length; i++) {\n      view.setUint8(i, str.charCodeAt(i));\n    }\n\n    return buffer;\n  }\n\n}","map":{"version":3,"sources":["src/common.speech/WebsocketMessageFormatter.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionMessage,\r\n    Deferred,\r\n    IStringDictionary,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    RawWebsocketMessage,\r\n} from \"../common/Exports\";\r\n\r\nconst CRLF: string = \"\\r\\n\";\r\n\r\nexport class WebsocketMessageFormatter implements IWebsocketMessageFormatter {\r\n\r\n    public toConnectionMessage(message: RawWebsocketMessage): Promise<ConnectionMessage> {\r\n        const deferral = new Deferred<ConnectionMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const textMessage: string = message.textContent;\r\n                let headers: IStringDictionary<string> = {};\r\n                let body: string = null;\r\n\r\n                if (textMessage) {\r\n                    const headerBodySplit = textMessage.split(\"\\r\\n\\r\\n\");\r\n                    if (headerBodySplit && headerBodySplit.length > 0) {\r\n                        headers = this.parseHeaders(headerBodySplit[0]);\r\n                        if (headerBodySplit.length > 1) {\r\n                            body = headerBodySplit[1];\r\n                        }\r\n                    }\r\n                }\r\n\r\n                deferral.resolve(new ConnectionMessage(message.messageType, body, headers, message.id));\r\n            } else if (message.messageType === MessageType.Binary) {\r\n                const binaryMessage: ArrayBuffer = message.binaryContent;\r\n                let headers: IStringDictionary<string> = {};\r\n                let body: ArrayBuffer = null;\r\n\r\n                if (!binaryMessage || binaryMessage.byteLength < 2) {\r\n                    throw new Error(\"Invalid binary message format. Header length missing.\");\r\n                }\r\n\r\n                const dataView = new DataView(binaryMessage);\r\n                const headerLength = dataView.getInt16(0);\r\n\r\n                if (binaryMessage.byteLength < headerLength + 2) {\r\n                    throw new Error(\"Invalid binary message format. Header content missing.\");\r\n                }\r\n\r\n                let headersString = \"\";\r\n                for (let i = 0; i < headerLength; i++) {\r\n                    headersString += String.fromCharCode((dataView).getInt8(i + 2));\r\n                }\r\n\r\n                headers = this.parseHeaders(headersString);\r\n\r\n                if (binaryMessage.byteLength > headerLength + 2) {\r\n                    body = binaryMessage.slice(2 + headerLength);\r\n                }\r\n\r\n                deferral.resolve(new ConnectionMessage(message.messageType, body, headers, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. Error: ${e as string}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n\r\n    public fromConnectionMessage(message: ConnectionMessage): Promise<RawWebsocketMessage> {\r\n        const deferral = new Deferred<RawWebsocketMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const payload = `${this.makeHeaders(message)}${CRLF}${message.textBody ? message.textBody : \"\"}`;\r\n\r\n                deferral.resolve(new RawWebsocketMessage(MessageType.Text, payload, message.id));\r\n\r\n            } else if (message.messageType === MessageType.Binary) {\r\n                const headersString = this.makeHeaders(message);\r\n                const content = message.binaryBody;\r\n\r\n                const headerBuffer = this.stringToArrayBuffer(headersString);\r\n                const headerInt8Array = new Int8Array(headerBuffer);\r\n                const headerLength = headerInt8Array.byteLength;\r\n\r\n                const payloadInt8Array = new Int8Array(2 + headerLength + (content ? content.byteLength : 0));\r\n                payloadInt8Array[0] = ((headerLength >> 8) & 0xff);\r\n                payloadInt8Array[1] = headerLength & 0xff;\r\n                payloadInt8Array.set(headerInt8Array, 2);\r\n\r\n                if (content) {\r\n                    const bodyInt8Array = new Int8Array(content);\r\n                    payloadInt8Array.set(bodyInt8Array, 2 + headerLength);\r\n                }\r\n\r\n                const payload: ArrayBuffer = payloadInt8Array.buffer;\r\n\r\n                deferral.resolve(new RawWebsocketMessage(MessageType.Binary, payload, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. ${e as string}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n\r\n    private makeHeaders(message: ConnectionMessage): string {\r\n        let headersString: string = \"\";\r\n\r\n        if (message.headers) {\r\n            for (const header in message.headers) {\r\n                if (header) {\r\n                    headersString += `${header}: ${message.headers[header]}${CRLF}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        return headersString;\r\n    }\r\n\r\n    private parseHeaders(headersString: string): IStringDictionary<string> {\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (headersString) {\r\n            const headerMatches = headersString.match(/[^\\r\\n]+/g);\r\n            if (headers) {\r\n                for (const header of headerMatches) {\r\n                    if (header) {\r\n                        const separatorIndex = header.indexOf(\":\");\r\n                        const headerName = separatorIndex > 0 ? header.substr(0, separatorIndex).trim().toLowerCase() : header;\r\n                        const headerValue =\r\n                            separatorIndex > 0 && header.length > (separatorIndex + 1) ?\r\n                                header.substr(separatorIndex + 1).trim() :\r\n                                \"\";\r\n\r\n                        headers[headerName] = headerValue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return headers;\r\n    }\r\n\r\n    private stringToArrayBuffer(str: string): ArrayBuffer {\r\n        const buffer = new ArrayBuffer(str.length);\r\n        const view = new DataView(buffer);\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(i, str.charCodeAt(i));\r\n        }\r\n        return buffer;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}