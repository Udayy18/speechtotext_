{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { RestConfigBase, RestMessageAdapter, RestRequestType } from \"../common.browser/Exports\";\nimport { PropertyId, VoiceProfileType } from \"../sdk/Exports\";\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\n/**\n * Implements methods for speaker recognition classes, sending requests to endpoint\n * and parsing response into expected format\n * @class SpeakerIdMessageAdapter\n */\n\nexport class SpeakerIdMessageAdapter {\n  constructor(config) {\n    let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\n\n    if (!endpoint) {\n      const region = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"westus\");\n      const hostSuffix = ConnectionFactoryBase.getHostSuffix(region);\n      endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, `https://${region}.api.cognitive${hostSuffix}`);\n    }\n\n    this.privUri = `${endpoint}/speaker-recognition/{mode}/{dependency}/profiles`;\n    const options = RestConfigBase.requestOptions;\n    options.headers[RestConfigBase.configParams.subscriptionKey] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\n    this.privApiVersion = config.parameters.getProperty(PropertyId.SpeakerRecognition_Api_Version, \"2021-09-05\");\n    this.privRestAdapter = new RestMessageAdapter(options);\n  }\n  /**\n   * Sends create profile request to endpoint.\n   * @function\n   * @param {VoiceProfileType} profileType - type of voice profile to create.\n   * @param {string} lang - language/locale of voice profile\n   * @public\n   * @returns {Promise<IRestResponse>} promised rest response containing id of created profile.\n   */\n\n\n  createProfile(profileType, lang) {\n    const uri = this.getOperationUri(profileType);\n    return this.privRestAdapter.request(RestRequestType.Post, uri, this.getQueryParams({}), {\n      locale: lang\n    });\n  }\n  /**\n   * Sends create enrollment request to endpoint.\n   * @function\n   * @param {VoiceProfile} profileType - voice profile for which to create new enrollment.\n   * @param {IAudioSource} audioSource - audioSource from which to pull data to send\n   * @public\n   * @returns {Promise<IRestResponse>} rest response to enrollment request.\n   */\n\n\n  createEnrollment(profile, audioSource) {\n    const uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId + \"/enrollments\"; // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\n    return audioSource.blob.then(result => this.privRestAdapter.request(RestRequestType.File, uri, this.getQueryParams({\n      ignoreMinLength: \"true\"\n    }), null, result));\n  }\n  /**\n   * Sends verification request to endpoint.\n   * @function\n   * @param {SpeakerVerificationModel} model - voice model to verify against.\n   * @param {IAudioSource} audioSource - audioSource from which to pull data to send\n   * @public\n   * @returns {Promise<IRestResponse>} rest response to enrollment request.\n   */\n\n\n  verifySpeaker(model, audioSource) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const uri = this.getOperationUri(model.voiceProfile.profileType) + \"/\" + model.voiceProfile.profileId + \":verify\";\n\n      try {\n        const result = yield audioSource.blob;\n        return this.privRestAdapter.request(RestRequestType.File, uri, this.getQueryParams({\n          ignoreMinLength: \"true\"\n        }), null, result);\n      } catch (e) {\n        return Promise.resolve({\n          data: e\n        });\n      }\n    });\n  }\n  /**\n   * Sends identification request to endpoint.\n   * @function\n   * @param {SpeakerIdentificationModel} model - voice profiles against which to identify.\n   * @param {IAudioSource} audioSource - audioSource from which to pull data to send\n   * @public\n   * @returns {Promise<IRestResponse>} rest response to enrollment request.\n   */\n\n\n  identifySpeaker(model, audioSource) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const uri = this.getOperationUri(VoiceProfileType.TextIndependentIdentification) + \":identifySingleSpeaker\";\n\n      try {\n        const result = yield audioSource.blob;\n        return this.privRestAdapter.request(RestRequestType.File, uri, this.getQueryParams({\n          profileIds: model.voiceProfileIds,\n          ignoreMinLength: \"true\"\n        }), null, result);\n      } catch (e) {\n        return Promise.resolve({\n          data: e\n        });\n      }\n    });\n  }\n  /**\n   * Sends profile status request to endpoint.\n   * @function\n   * @param {VoiceProfile} profile - voice profile to check.\n   * @public\n   * @returns {Promise<IRestResponse>} rest response to status request\n   */\n\n\n  getProfileStatus(profile) {\n    const uri = `${this.getOperationUri(profile.profileType)}/${profile.profileId}`;\n    return this.privRestAdapter.request(RestRequestType.Get, uri, this.getQueryParams());\n  }\n  /**\n   * Sends get all profiles request to endpoint.\n   * @function\n   * @param {VoiceProfileType} profileType - type of profiles to return list of\n   * @public\n   * @returns {Promise<IRestResponse>} promised rest response containing all profiles\n   */\n\n\n  getProfiles(profileType) {\n    const uri = this.getOperationUri(profileType);\n    return this.privRestAdapter.request(RestRequestType.Get, uri, this.getQueryParams());\n  }\n  /**\n   * Sends get activation/auth phrases request to endpoint.\n   * @function\n   * @param {VoiceProfileType} profileType - type of profiles to return phrases for\n   * @param {string} lang - language/locale of voice profile\n   * @public\n   * @returns {Promise<IRestResponse>} promised rest response containing list of valid phrases\n   */\n\n\n  getPhrases(profileType, lang) {\n    const uri = `${this.getOperationUri(profileType)}`.replace(\"profiles\", \"phrases\") + \"/\" + lang;\n    return this.privRestAdapter.request(RestRequestType.Get, uri, this.getQueryParams());\n  }\n  /**\n   * Sends delete profile request to endpoint.\n   * @function\n   * @param {VoiceProfile} profile - voice profile to delete.\n   * @public\n   * @returns {Promise<IRestResponse>} rest response to deletion request\n   */\n\n\n  deleteProfile(profile) {\n    const uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId;\n    return this.privRestAdapter.request(RestRequestType.Delete, uri, this.getQueryParams());\n  }\n  /**\n   * Sends reset profile request to endpoint.\n   * @function\n   * @param {VoiceProfile} profile - voice profile to reset enrollments for.\n   * @public\n   * @returns {Promise<IRestResponse>} rest response to reset request\n   */\n\n\n  resetProfile(profile) {\n    const uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId + \":reset\";\n    return this.privRestAdapter.request(RestRequestType.Post, uri, this.getQueryParams());\n  }\n\n  getOperationUri(profileType) {\n    const mode = profileType === VoiceProfileType.TextIndependentIdentification ? \"identification\" : \"verification\";\n    const dependency = profileType === VoiceProfileType.TextDependentVerification ? \"text-dependent\" : \"text-independent\";\n    return this.privUri.replace(\"{mode}\", mode).replace(\"{dependency}\", dependency);\n  }\n\n  getQueryParams(params = {}) {\n    params[RestConfigBase.configParams.apiVersion] = this.privApiVersion;\n    return params;\n  }\n\n}","map":{"version":3,"sources":["src/common.speech/SpeakerIdMessageAdapter.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n    IRequestOptions,\r\n    IRestResponse,\r\n    RestConfigBase,\r\n    RestMessageAdapter,\r\n    RestRequestType,\r\n} from \"../common.browser/Exports\";\r\nimport { IAudioSource } from \"../common/Exports\";\r\nimport {\r\n    PropertyId,\r\n    SpeakerIdentificationModel,\r\n    SpeakerVerificationModel,\r\n    VoiceProfile,\r\n    VoiceProfileType,\r\n} from \"../sdk/Exports\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\r\nimport { SpeakerRecognitionConfig } from \"./Exports\";\r\n\r\n/**\r\n * Implements methods for speaker recognition classes, sending requests to endpoint\r\n * and parsing response into expected format\r\n * @class SpeakerIdMessageAdapter\r\n */\r\nexport class SpeakerIdMessageAdapter {\r\n    private privRestAdapter: RestMessageAdapter;\r\n    private privUri: string;\r\n    private privApiVersion: string;\r\n\r\n    public constructor(config: SpeakerRecognitionConfig) {\r\n\r\n        let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"westus\");\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, `https://${region}.api.cognitive${hostSuffix}`);\r\n        }\r\n        this.privUri = `${endpoint}/speaker-recognition/{mode}/{dependency}/profiles`;\r\n\r\n        const options: IRequestOptions = RestConfigBase.requestOptions;\r\n        options.headers[RestConfigBase.configParams.subscriptionKey] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\r\n        this.privApiVersion = config.parameters.getProperty(PropertyId.SpeakerRecognition_Api_Version, \"2021-09-05\");\r\n\r\n        this.privRestAdapter = new RestMessageAdapter(options);\r\n    }\r\n\r\n    /**\r\n     * Sends create profile request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfileType} profileType - type of voice profile to create.\r\n     * @param {string} lang - language/locale of voice profile\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} promised rest response containing id of created profile.\r\n     */\r\n    public createProfile(profileType: VoiceProfileType, lang: string):\r\n        Promise<IRestResponse> {\r\n\r\n        const uri = this.getOperationUri(profileType);\r\n        return this.privRestAdapter.request(RestRequestType.Post, uri, this.getQueryParams({}), { locale: lang });\r\n    }\r\n\r\n    /**\r\n     * Sends create enrollment request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfile} profileType - voice profile for which to create new enrollment.\r\n     * @param {IAudioSource} audioSource - audioSource from which to pull data to send\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to enrollment request.\r\n     */\r\n    public createEnrollment(profile: VoiceProfile, audioSource: IAudioSource):\r\n        Promise<IRestResponse> {\r\n\r\n        const uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId + \"/enrollments\";\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n        return audioSource.blob.then<IRestResponse>((result: Blob | Buffer): Promise<IRestResponse> => this.privRestAdapter.request(RestRequestType.File, uri, this.getQueryParams({ ignoreMinLength: \"true\" }), null, result));\r\n    }\r\n\r\n    /**\r\n     * Sends verification request to endpoint.\r\n     * @function\r\n     * @param {SpeakerVerificationModel} model - voice model to verify against.\r\n     * @param {IAudioSource} audioSource - audioSource from which to pull data to send\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to enrollment request.\r\n     */\r\n    public async verifySpeaker(model: SpeakerVerificationModel, audioSource: IAudioSource):\r\n        Promise<IRestResponse> {\r\n\r\n        const uri = this.getOperationUri(model.voiceProfile.profileType) + \"/\" + model.voiceProfile.profileId + \":verify\";\r\n        try {\r\n            const result: Blob | Buffer = await audioSource.blob;\r\n            return this.privRestAdapter.request(RestRequestType.File, uri, this.getQueryParams({ ignoreMinLength: \"true\" }), null, result);\r\n        } catch (e) {\r\n            return Promise.resolve({ data: e as string } as IRestResponse);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends identification request to endpoint.\r\n     * @function\r\n     * @param {SpeakerIdentificationModel} model - voice profiles against which to identify.\r\n     * @param {IAudioSource} audioSource - audioSource from which to pull data to send\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to enrollment request.\r\n     */\r\n    public async identifySpeaker(model: SpeakerIdentificationModel, audioSource: IAudioSource):\r\n        Promise<IRestResponse> {\r\n\r\n        const uri = this.getOperationUri(VoiceProfileType.TextIndependentIdentification) + \":identifySingleSpeaker\";\r\n        try {\r\n            const result: Blob | Buffer = await audioSource.blob;\r\n            return this.privRestAdapter.request(RestRequestType.File, uri, this.getQueryParams({ profileIds: model.voiceProfileIds, ignoreMinLength: \"true\" }), null, result);\r\n        } catch (e) {\r\n            return Promise.resolve({ data: e as string } as IRestResponse);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends profile status request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfile} profile - voice profile to check.\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to status request\r\n     */\r\n    public getProfileStatus(profile: VoiceProfile): Promise<IRestResponse> {\r\n\r\n        const uri = `${this.getOperationUri(profile.profileType)}/${profile.profileId}`;\r\n        return this.privRestAdapter.request(RestRequestType.Get, uri, this.getQueryParams());\r\n    }\r\n\r\n    /**\r\n     * Sends get all profiles request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfileType} profileType - type of profiles to return list of\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} promised rest response containing all profiles\r\n     */\r\n    public getProfiles(profileType: VoiceProfileType): Promise<IRestResponse> {\r\n        const uri = this.getOperationUri(profileType);\r\n        return this.privRestAdapter.request(RestRequestType.Get, uri, this.getQueryParams());\r\n    }\r\n\r\n    /**\r\n     * Sends get activation/auth phrases request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfileType} profileType - type of profiles to return phrases for\r\n     * @param {string} lang - language/locale of voice profile\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} promised rest response containing list of valid phrases\r\n     */\r\n    public getPhrases(profileType: VoiceProfileType, lang: string): Promise<IRestResponse> {\r\n        const uri = `${this.getOperationUri(profileType)}`.replace(\"profiles\", \"phrases\") + \"/\" + lang;\r\n        return this.privRestAdapter.request(RestRequestType.Get, uri, this.getQueryParams());\r\n    }\r\n\r\n    /**\r\n     * Sends delete profile request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfile} profile - voice profile to delete.\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to deletion request\r\n     */\r\n    public deleteProfile(profile: VoiceProfile): Promise<IRestResponse> {\r\n\r\n        const uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId;\r\n        return this.privRestAdapter.request(RestRequestType.Delete, uri, this.getQueryParams());\r\n    }\r\n\r\n    /**\r\n     * Sends reset profile request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfile} profile - voice profile to reset enrollments for.\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to reset request\r\n     */\r\n    public resetProfile(profile: VoiceProfile): Promise<IRestResponse> {\r\n\r\n        const uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId + \":reset\";\r\n        return this.privRestAdapter.request(RestRequestType.Post, uri, this.getQueryParams());\r\n    }\r\n\r\n    private getOperationUri(profileType: VoiceProfileType): string {\r\n\r\n        const mode = profileType === VoiceProfileType.TextIndependentIdentification ? \"identification\" : \"verification\";\r\n        const dependency = profileType === VoiceProfileType.TextDependentVerification ? \"text-dependent\" : \"text-independent\";\r\n        return this.privUri.replace(\"{mode}\", mode).replace(\"{dependency}\", dependency);\r\n    }\r\n\r\n    private getQueryParams(params: { [key: string]: any } = {}): { [key: string]: any } {\r\n\r\n        params[RestConfigBase.configParams.apiVersion] = this.privApiVersion;\r\n        return params;\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}