{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\91959\\\\Desktop\\\\js_speechtotext\\\\AzureSpeechReactSample\\\\src\\\\Components\\\\speech.js\";\nimport React, { Component } from 'react';\nimport { Container } from 'reactstrap';\nimport { getTokenOrRefresh } from '../token_util';\nimport { ResultReason } from 'microsoft-cognitiveservices-speech-sdk';\n\nconst speechsdk = require('microsoft-cognitiveservices-speech-sdk');\n\nexport default class Speech extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      displayText: 'INITIALIZED: ready to test speech...'\n    };\n  }\n\n  handleLogout() {\n    localStorage.setItem(\"loggedin\", 0); // window.location.href = \"/\";\n  }\n\n  async componentDidMount() {\n    // check for valid speech key/region\n    const tokenRes = await getTokenOrRefresh();\n\n    if (tokenRes.authToken === null) {\n      this.setState({\n        displayText: 'FATAL_ERROR: ' + tokenRes.error\n      });\n    }\n  }\n\n  async sttFromMic() {\n    const tokenObj = await getTokenOrRefresh();\n    const speechConfig = speechsdk.SpeechConfig.fromAuthorizationToken(tokenObj.authToken, tokenObj.region);\n    speechConfig.speechRecognitionLanguage = 'en-IN';\n    const audioConfig = speechsdk.AudioConfig.fromDefaultMicrophoneInput();\n    const recognizer = new speechsdk.SpeechRecognizer(speechConfig, audioConfig);\n    this.setState({\n      displayText: 'speak into your microphone...'\n    });\n    recognizer.recognizeOnceAsync(result => {\n      let displayText;\n\n      if (result.reason === ResultReason.RecognizedSpeech) {\n        displayText = `RECOGNIZED: Text=${result.text}`;\n      } else {\n        displayText = 'ERROR: Speech was cancelled or could not be recognized. Ensure your microphone is working properly.';\n      }\n\n      this.setState({\n        displayText: displayText\n      });\n    });\n  }\n\n  async fileChange(event) {\n    const audioFile = event.target.files[0];\n    console.log(audioFile);\n    const fileInfo = audioFile.name + ` size=${audioFile.size} bytes `;\n    this.setState({\n      displayText: fileInfo\n    });\n    const tokenObj = await getTokenOrRefresh();\n    const speechConfig = speechsdk.SpeechConfig.fromAuthorizationToken(tokenObj.authToken, tokenObj.region);\n    speechConfig.speechRecognitionLanguage = 'en-US';\n    const audioConfig = speechsdk.AudioConfig.fromWavFileInput(audioFile);\n    const recognizer = new speechsdk.SpeechRecognizer(speechConfig, audioConfig);\n    recognizer.recognizeOnceAsync(result => {\n      let displayText;\n\n      if (result.reason === ResultReason.RecognizedSpeech) {\n        displayText = `${result.text}`;\n      } else {\n        displayText = 'ERROR: Speech was cancelled or could not be recognized. Ensure your microphone is working properly.';\n      }\n\n      this.setState({\n        displayText: fileInfo + displayText\n      });\n    });\n  }\n\n  render() {\n    if (localStorage.getItem(\"loggedin\") == 0) return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"please login before accessing the portal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this);\n    return /*#__PURE__*/_jsxDEV(Container, {\n      className: \"app-container\",\n      children: /*#__PURE__*/_jsxDEV(\"html\", {\n        lang: \"en\",\n        dir: \"ltr\",\n        children: [/*#__PURE__*/_jsxDEV(\"head\", {\n          children: /*#__PURE__*/_jsxDEV(\"title\", {\n            children: \"Speech to text transcription\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"body\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"wrapper\",\n            children: [/*#__PURE__*/_jsxDEV(\"header\", {\n              children: \"Speech to text\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n              action: \"#\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                class: \"row\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"Transcripted Text\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 114,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col-6 output-display rounded\",\n                  children: /*#__PURE__*/_jsxDEV(\"code\", {\n                    children: this.state.displayText\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 117,\n                    columnNumber: 33\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 116,\n                  columnNumber: 29\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                id: \"startRecognizeOnceAsyncButton\",\n                onClick: () => this.sttFromMic(),\n                children: \"Start\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                id: \"logoutbutton\",\n                onClick: () => this.handleLogout(),\n                children: \"logout\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"script\", {\n            src: \"nextpage.js\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/91959/Desktop/js_speechtotext/AzureSpeechReactSample/src/Components/speech.js"],"names":["React","Component","Container","getTokenOrRefresh","ResultReason","speechsdk","require","Speech","constructor","props","state","displayText","handleLogout","localStorage","setItem","componentDidMount","tokenRes","authToken","setState","error","sttFromMic","tokenObj","speechConfig","SpeechConfig","fromAuthorizationToken","region","speechRecognitionLanguage","audioConfig","AudioConfig","fromDefaultMicrophoneInput","recognizer","SpeechRecognizer","recognizeOnceAsync","result","reason","RecognizedSpeech","text","fileChange","event","audioFile","target","files","console","log","fileInfo","name","size","fromWavFileInput","render","getItem"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport { getTokenOrRefresh } from '../token_util';\r\n\r\nimport { ResultReason } from 'microsoft-cognitiveservices-speech-sdk';\r\n\r\n\r\n\r\nconst speechsdk = require('microsoft-cognitiveservices-speech-sdk')\r\n\r\n\r\nexport default class Speech extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            displayText: 'INITIALIZED: ready to test speech...'\r\n        }\r\n    }\r\n\r\n    handleLogout(){\r\n        localStorage.setItem(\"loggedin\", 0);\r\n        // window.location.href = \"/\";\r\n    }\r\n    \r\n    async componentDidMount() {\r\n        // check for valid speech key/region\r\n        const tokenRes = await getTokenOrRefresh();\r\n        if (tokenRes.authToken === null) {\r\n            this.setState({\r\n                displayText: 'FATAL_ERROR: ' + tokenRes.error\r\n            });\r\n        }\r\n    }\r\n\r\n    async sttFromMic() {\r\n        const tokenObj = await getTokenOrRefresh();\r\n        const speechConfig = speechsdk.SpeechConfig.fromAuthorizationToken(tokenObj.authToken, tokenObj.region);\r\n        speechConfig.speechRecognitionLanguage = 'en-IN';\r\n\r\n        const audioConfig = speechsdk.AudioConfig.fromDefaultMicrophoneInput();\r\n        const recognizer = new speechsdk.SpeechRecognizer(speechConfig, audioConfig);\r\n\r\n        this.setState({\r\n            displayText: 'speak into your microphone...'\r\n        });\r\n\r\n        recognizer.recognizeOnceAsync(result => {\r\n            let displayText;\r\n            if (result.reason === ResultReason.RecognizedSpeech) {\r\n                displayText = `RECOGNIZED: Text=${result.text}`\r\n            } else {\r\n                displayText = 'ERROR: Speech was cancelled or could not be recognized. Ensure your microphone is working properly.';\r\n            }\r\n\r\n            this.setState({\r\n                displayText: displayText\r\n            });\r\n        });\r\n    }\r\n\r\n    async fileChange(event) {\r\n        const audioFile = event.target.files[0];\r\n        console.log(audioFile);\r\n        const fileInfo = audioFile.name + ` size=${audioFile.size} bytes `;\r\n\r\n        this.setState({\r\n            displayText: fileInfo\r\n        });\r\n\r\n        const tokenObj = await getTokenOrRefresh();\r\n        const speechConfig = speechsdk.SpeechConfig.fromAuthorizationToken(tokenObj.authToken, tokenObj.region);\r\n        speechConfig.speechRecognitionLanguage = 'en-US';\r\n\r\n        const audioConfig = speechsdk.AudioConfig.fromWavFileInput(audioFile);\r\n        const recognizer = new speechsdk.SpeechRecognizer(speechConfig, audioConfig);\r\n\r\n        recognizer.recognizeOnceAsync(result => {\r\n            let displayText;\r\n            if (result.reason === ResultReason.RecognizedSpeech) {\r\n                displayText = `${result.text}`\r\n            } else {\r\n                displayText = 'ERROR: Speech was cancelled or could not be recognized. Ensure your microphone is working properly.';\r\n            }\r\n\r\n            this.setState({\r\n                displayText: fileInfo + displayText\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        \r\n        if(localStorage.getItem(\"loggedin\")==0)\r\n        \r\n        return(\r\n            <div>\r\n                please login before accessing the portal\r\n                </div>\r\n        )\r\n        return(\r\n\r\n        <Container className=\"app-container\">\r\n                <html lang=\"en\" dir=\"ltr\">\r\n                <head>\r\n                    <title>Speech to text transcription</title>\r\n                    {/* <link rel=\"stylesheet\" href=\"nextpage.css\"></link> */}\r\n                </head>\r\n                <body>\r\n                    <div class=\"wrapper\">\r\n                    <header>Speech to text</header>\r\n                    <form action=\"#\">\r\n                        <div class=\"row\">\r\n                        <label>Transcripted Text</label>\r\n                        \r\n                            <div className=\"col-6 output-display rounded\">\r\n                                <code>{this.state.displayText}</code>\r\n                            \r\n                            </div>\r\n                        </div>\r\n                        <button id=\"startRecognizeOnceAsyncButton\" onClick={() => this.sttFromMic() }>Start</button>\r\n                        <button id=\"logoutbutton\" onClick={() => this.handleLogout() }>logout</button>\r\n                    </form>\r\n                    </div>\r\n                    <script src=\"nextpage.js\"></script>\r\n                </body>\r\n                </html>\r\n                \r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}