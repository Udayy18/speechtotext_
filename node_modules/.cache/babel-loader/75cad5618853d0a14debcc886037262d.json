{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { SynthesisAdapterBase } from \"../../common.speech/Exports\";\nimport { BackgroundEvent, createNoDashGuid, Events } from \"../../common/Exports\";\nimport { PullAudioOutputStreamImpl } from \"./AudioOutputStream\";\nimport { AudioFormatTag } from \"./AudioStreamFormat\";\nconst MediaDurationPlaceholderSeconds = 60 * 30;\nconst AudioFormatToMimeType = {\n  [AudioFormatTag.PCM]: \"audio/wav\",\n  [AudioFormatTag.MuLaw]: \"audio/x-wav\",\n  [AudioFormatTag.MP3]: \"audio/mpeg\",\n  [AudioFormatTag.OGG_OPUS]: \"audio/ogg\",\n  [AudioFormatTag.WEBM_OPUS]: \"audio/webm; codecs=opus\",\n  [AudioFormatTag.ALaw]: \"audio/x-wav\",\n  [AudioFormatTag.FLAC]: \"audio/flac\"\n};\n/**\n * Represents the speaker playback audio destination, which only works in browser.\n * Note: the SDK will try to use <a href=\"https://www.w3.org/TR/media-source/\">Media Source Extensions</a> to play audio.\n * Mp3 format has better supports on Microsoft Edge, Chrome and Safari (desktop), so, it's better to specify mp3 format for playback.\n * @class SpeakerAudioDestination\n * Updated in version 1.17.0\n */\n\nexport class SpeakerAudioDestination {\n  constructor(audioDestinationId) {\n    this.privPlaybackStarted = false;\n    this.privAppendingToBuffer = false;\n    this.privMediaSourceOpened = false;\n    this.privBytesReceived = 0;\n    this.privId = audioDestinationId ? audioDestinationId : createNoDashGuid();\n    this.privIsPaused = false;\n    this.privIsClosed = false;\n  }\n\n  id() {\n    return this.privId;\n  }\n\n  write(buffer, cb, err) {\n    if (this.privAudioBuffer !== undefined) {\n      this.privAudioBuffer.push(buffer);\n      this.updateSourceBuffer().then(() => {\n        if (!!cb) {\n          cb();\n        }\n      }, error => {\n        if (!!err) {\n          err(error);\n        }\n      });\n    } else if (this.privAudioOutputStream !== undefined) {\n      this.privAudioOutputStream.write(buffer);\n      this.privBytesReceived += buffer.byteLength;\n    }\n  }\n\n  close(cb, err) {\n    this.privIsClosed = true;\n\n    if (this.privSourceBuffer !== undefined) {\n      this.handleSourceBufferUpdateEnd().then(() => {\n        if (!!cb) {\n          cb();\n        }\n      }, error => {\n        if (!!err) {\n          err(error);\n        }\n      });\n    } else if (this.privAudioOutputStream !== undefined && typeof window !== \"undefined\") {\n      if ((this.privFormat.formatTag === AudioFormatTag.PCM || this.privFormat.formatTag === AudioFormatTag.MuLaw || this.privFormat.formatTag === AudioFormatTag.ALaw) && this.privFormat.hasHeader === false) {\n        // eslint-disable-next-line no-console\n        console.warn(\"Play back is not supported for raw PCM, mulaw or alaw format without header.\");\n\n        if (!!this.onAudioEnd) {\n          this.onAudioEnd(this);\n        }\n      } else {\n        let receivedAudio = new ArrayBuffer(this.privBytesReceived);\n        this.privAudioOutputStream.read(receivedAudio).then(() => {\n          receivedAudio = SynthesisAdapterBase.addHeader(receivedAudio, this.privFormat);\n          const audioBlob = new Blob([receivedAudio], {\n            type: AudioFormatToMimeType[this.privFormat.formatTag]\n          });\n          this.privAudio.src = window.URL.createObjectURL(audioBlob);\n          this.notifyPlayback().then(() => {\n            if (!!cb) {\n              cb();\n            }\n          }, error => {\n            if (!!err) {\n              err(error);\n            }\n          });\n        }, error => {\n          if (!!err) {\n            err(error);\n          }\n        });\n      }\n    } else {\n      // unsupported format, call onAudioEnd directly.\n      if (!!this.onAudioEnd) {\n        this.onAudioEnd(this);\n      }\n    }\n  }\n\n  set format(format) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (typeof AudioContext !== \"undefined\" || typeof window !== \"undefined\" && typeof window.webkitAudioContext !== \"undefined\") {\n      this.privFormat = format;\n      const mimeType = AudioFormatToMimeType[this.privFormat.formatTag];\n\n      if (mimeType === undefined) {\n        // eslint-disable-next-line no-console\n        console.warn(`Unknown mimeType for format ${AudioFormatTag[this.privFormat.formatTag]}; playback is not supported.`);\n      } else if (typeof MediaSource !== \"undefined\" && MediaSource.isTypeSupported(mimeType)) {\n        this.privAudio = new Audio();\n        this.privAudioBuffer = [];\n        this.privMediaSource = new MediaSource();\n        this.privAudio.src = URL.createObjectURL(this.privMediaSource);\n        this.privAudio.load();\n\n        this.privMediaSource.onsourceopen = () => {\n          this.privMediaSourceOpened = true;\n          this.privMediaSource.duration = MediaDurationPlaceholderSeconds;\n          this.privSourceBuffer = this.privMediaSource.addSourceBuffer(mimeType);\n\n          this.privSourceBuffer.onupdate = () => {\n            this.updateSourceBuffer().catch(reason => {\n              Events.instance.onEvent(new BackgroundEvent(reason));\n            });\n          };\n\n          this.privSourceBuffer.onupdateend = () => {\n            this.handleSourceBufferUpdateEnd().catch(reason => {\n              Events.instance.onEvent(new BackgroundEvent(reason));\n            });\n          };\n\n          this.privSourceBuffer.onupdatestart = () => {\n            this.privAppendingToBuffer = false;\n          };\n        };\n\n        this.updateSourceBuffer().catch(reason => {\n          Events.instance.onEvent(new BackgroundEvent(reason));\n        });\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn(`Format ${AudioFormatTag[this.privFormat.formatTag]} could not be played by MSE, streaming playback is not enabled.`);\n        this.privAudioOutputStream = new PullAudioOutputStreamImpl();\n        this.privAudioOutputStream.format = this.privFormat;\n        this.privAudio = new Audio();\n      }\n    }\n  }\n\n  get volume() {\n    var _a, _b;\n\n    return (_b = (_a = this.privAudio) === null || _a === void 0 ? void 0 : _a.volume) !== null && _b !== void 0 ? _b : -1;\n  }\n\n  set volume(volume) {\n    if (!!this.privAudio) {\n      this.privAudio.volume = volume;\n    }\n  }\n\n  mute() {\n    if (!!this.privAudio) {\n      this.privAudio.muted = true;\n    }\n  }\n\n  unmute() {\n    if (!!this.privAudio) {\n      this.privAudio.muted = false;\n    }\n  }\n\n  get isClosed() {\n    return this.privIsClosed;\n  }\n\n  get currentTime() {\n    if (this.privAudio !== undefined) {\n      return this.privAudio.currentTime;\n    }\n\n    return -1;\n  }\n\n  pause() {\n    if (!this.privIsPaused && this.privAudio !== undefined) {\n      this.privAudio.pause();\n      this.privIsPaused = true;\n    }\n  }\n\n  resume(cb, err) {\n    if (this.privIsPaused && this.privAudio !== undefined) {\n      this.privAudio.play().then(() => {\n        if (!!cb) {\n          cb();\n        }\n      }, error => {\n        if (!!err) {\n          err(error);\n        }\n      });\n      this.privIsPaused = false;\n    }\n  }\n\n  get internalAudio() {\n    return this.privAudio;\n  }\n\n  updateSourceBuffer() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privAudioBuffer !== undefined && this.privAudioBuffer.length > 0 && this.sourceBufferAvailable()) {\n        this.privAppendingToBuffer = true;\n        const binary = this.privAudioBuffer.shift();\n\n        try {\n          this.privSourceBuffer.appendBuffer(binary);\n        } catch (error) {\n          this.privAudioBuffer.unshift(binary); // eslint-disable-next-line no-console\n\n          console.log(\"buffer filled, pausing addition of binaries until space is made\");\n          return;\n        }\n\n        yield this.notifyPlayback();\n      } else if (this.canEndStream()) {\n        yield this.handleSourceBufferUpdateEnd();\n      }\n    });\n  }\n\n  handleSourceBufferUpdateEnd() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.canEndStream() && this.sourceBufferAvailable()) {\n        this.privMediaSource.endOfStream();\n        yield this.notifyPlayback();\n      }\n    });\n  }\n\n  notifyPlayback() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.privPlaybackStarted && this.privAudio !== undefined) {\n        this.privPlaybackStarted = true;\n\n        if (!!this.onAudioStart) {\n          this.onAudioStart(this);\n        }\n\n        this.privAudio.onended = () => {\n          if (!!this.onAudioEnd) {\n            this.onAudioEnd(this);\n          }\n        };\n\n        if (!this.privIsPaused) {\n          yield this.privAudio.play();\n        }\n      }\n    });\n  }\n\n  canEndStream() {\n    return this.isClosed && this.privSourceBuffer !== undefined && this.privAudioBuffer.length === 0 && this.privMediaSourceOpened && !this.privAppendingToBuffer && this.privMediaSource.readyState === \"open\";\n  }\n\n  sourceBufferAvailable() {\n    return this.privSourceBuffer !== undefined && !this.privSourceBuffer.updating;\n  }\n\n}","map":{"version":3,"sources":["src/sdk/Audio/SpeakerAudioDestination.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SynthesisAdapterBase } from \"../../common.speech/Exports\";\r\nimport {\r\n    BackgroundEvent,\r\n    createNoDashGuid,\r\n    Events,\r\n    IAudioDestination,\r\n    INumberDictionary\r\n} from \"../../common/Exports\";\r\nimport { AudioStreamFormat, IPlayer } from \"../Exports\";\r\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat\";\r\nimport { PullAudioOutputStreamImpl } from \"./AudioOutputStream\";\r\nimport { AudioFormatTag } from \"./AudioStreamFormat\";\r\n\r\nconst MediaDurationPlaceholderSeconds = 60 * 30;\r\n\r\nconst AudioFormatToMimeType: INumberDictionary<string> = {\r\n    [AudioFormatTag.PCM]: \"audio/wav\",\r\n    [AudioFormatTag.MuLaw]: \"audio/x-wav\",\r\n    [AudioFormatTag.MP3]: \"audio/mpeg\",\r\n    [AudioFormatTag.OGG_OPUS]: \"audio/ogg\",\r\n    [AudioFormatTag.WEBM_OPUS]: \"audio/webm; codecs=opus\",\r\n    [AudioFormatTag.ALaw]: \"audio/x-wav\",\r\n    [AudioFormatTag.FLAC]: \"audio/flac\",\r\n};\r\n\r\n/**\r\n * Represents the speaker playback audio destination, which only works in browser.\r\n * Note: the SDK will try to use <a href=\"https://www.w3.org/TR/media-source/\">Media Source Extensions</a> to play audio.\r\n * Mp3 format has better supports on Microsoft Edge, Chrome and Safari (desktop), so, it's better to specify mp3 format for playback.\r\n * @class SpeakerAudioDestination\r\n * Updated in version 1.17.0\r\n */\r\nexport class SpeakerAudioDestination implements IAudioDestination, IPlayer {\r\n    private readonly privId: string;\r\n    private privFormat: AudioOutputFormatImpl;\r\n    private privAudio: HTMLAudioElement;\r\n    private privMediaSource: MediaSource;\r\n    private privSourceBuffer: SourceBuffer;\r\n    private privPlaybackStarted: boolean = false;\r\n    private privAudioBuffer: ArrayBuffer[];\r\n    private privAppendingToBuffer: boolean = false;\r\n    private privMediaSourceOpened: boolean = false;\r\n    private privIsClosed: boolean;\r\n    private privIsPaused: boolean;\r\n    private privAudioOutputStream: PullAudioOutputStreamImpl;\r\n    private privBytesReceived: number = 0;\r\n\r\n    public constructor(audioDestinationId?: string) {\r\n        this.privId = audioDestinationId ? audioDestinationId : createNoDashGuid();\r\n        this.privIsPaused = false;\r\n        this.privIsClosed = false;\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public write(buffer: ArrayBuffer, cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.privAudioBuffer !== undefined) {\r\n            this.privAudioBuffer.push(buffer);\r\n            this.updateSourceBuffer().then((): void => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        } else if (this.privAudioOutputStream !== undefined) {\r\n            this.privAudioOutputStream.write(buffer);\r\n            this.privBytesReceived += buffer.byteLength;\r\n        }\r\n    }\r\n\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        this.privIsClosed = true;\r\n        if (this.privSourceBuffer !== undefined) {\r\n            this.handleSourceBufferUpdateEnd().then((): void => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        } else if (this.privAudioOutputStream !== undefined && typeof window !== \"undefined\") {\r\n            if ((this.privFormat.formatTag === AudioFormatTag.PCM || this.privFormat.formatTag === AudioFormatTag.MuLaw\r\n                || this.privFormat.formatTag === AudioFormatTag.ALaw) && this.privFormat.hasHeader === false) {\r\n                // eslint-disable-next-line no-console\r\n                console.warn(\"Play back is not supported for raw PCM, mulaw or alaw format without header.\");\r\n                if (!!this.onAudioEnd) {\r\n                    this.onAudioEnd(this);\r\n                }\r\n            } else {\r\n                let receivedAudio = new ArrayBuffer(this.privBytesReceived);\r\n                this.privAudioOutputStream.read(receivedAudio).then((): void => {\r\n                    receivedAudio = SynthesisAdapterBase.addHeader(receivedAudio, this.privFormat);\r\n                    const audioBlob = new Blob([receivedAudio], { type: AudioFormatToMimeType[this.privFormat.formatTag] });\r\n                    this.privAudio.src = window.URL.createObjectURL(audioBlob);\r\n                    this.notifyPlayback().then((): void => {\r\n                        if (!!cb) {\r\n                            cb();\r\n                        }\r\n                    }, (error: string): void => {\r\n                        if (!!err) {\r\n                            err(error);\r\n                        }\r\n                    });\r\n                }, (error: string): void => {\r\n                    if (!!err) {\r\n                        err(error);\r\n                    }\r\n                });\r\n            }\r\n        } else {\r\n            // unsupported format, call onAudioEnd directly.\r\n            if (!!this.onAudioEnd) {\r\n                this.onAudioEnd(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    public set format(format: AudioStreamFormat) {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n        if (typeof (AudioContext) !== \"undefined\" || (typeof (window) !== \"undefined\" && typeof ((window as any).webkitAudioContext) !== \"undefined\")) {\r\n            this.privFormat = format as AudioOutputFormatImpl;\r\n            const mimeType: string = AudioFormatToMimeType[this.privFormat.formatTag];\r\n            if (mimeType === undefined) {\r\n                // eslint-disable-next-line no-console\r\n                console.warn(\r\n                    `Unknown mimeType for format ${AudioFormatTag[this.privFormat.formatTag]}; playback is not supported.`);\r\n\r\n            } else if (typeof (MediaSource) !== \"undefined\" && MediaSource.isTypeSupported(mimeType)) {\r\n                this.privAudio = new Audio();\r\n                this.privAudioBuffer = [];\r\n                this.privMediaSource = new MediaSource();\r\n                this.privAudio.src = URL.createObjectURL(this.privMediaSource);\r\n                this.privAudio.load();\r\n                this.privMediaSource.onsourceopen = (): void => {\r\n                    this.privMediaSourceOpened = true;\r\n                    this.privMediaSource.duration = MediaDurationPlaceholderSeconds;\r\n                    this.privSourceBuffer = this.privMediaSource.addSourceBuffer(mimeType);\r\n                    this.privSourceBuffer.onupdate = (): void => {\r\n                        this.updateSourceBuffer().catch((reason: string): void => {\r\n                            Events.instance.onEvent(new BackgroundEvent(reason));\r\n                        });\r\n                    };\r\n                    this.privSourceBuffer.onupdateend = (): void => {\r\n                        this.handleSourceBufferUpdateEnd().catch((reason: string): void => {\r\n                            Events.instance.onEvent(new BackgroundEvent(reason));\r\n                        });\r\n                    };\r\n                    this.privSourceBuffer.onupdatestart = (): void => {\r\n                        this.privAppendingToBuffer = false;\r\n                    };\r\n                };\r\n                this.updateSourceBuffer().catch((reason: string): void => {\r\n                    Events.instance.onEvent(new BackgroundEvent(reason));\r\n                });\r\n\r\n            } else {\r\n                // eslint-disable-next-line no-console\r\n                console.warn(\r\n                    `Format ${AudioFormatTag[this.privFormat.formatTag]} could not be played by MSE, streaming playback is not enabled.`);\r\n                this.privAudioOutputStream = new PullAudioOutputStreamImpl();\r\n                this.privAudioOutputStream.format = this.privFormat;\r\n                this.privAudio = new Audio();\r\n            }\r\n        }\r\n    }\r\n\r\n    public get volume(): number {\r\n        return this.privAudio?.volume ?? -1;\r\n    }\r\n\r\n    public set volume(volume: number) {\r\n        if (!!this.privAudio) {\r\n            this.privAudio.volume = volume;\r\n        }\r\n    }\r\n\r\n    public mute(): void {\r\n        if (!!this.privAudio) {\r\n            this.privAudio.muted = true;\r\n        }\r\n    }\r\n\r\n    public unmute(): void {\r\n        if (!!this.privAudio) {\r\n            this.privAudio.muted = false;\r\n        }\r\n    }\r\n\r\n    public get isClosed(): boolean {\r\n        return this.privIsClosed;\r\n    }\r\n\r\n    public get currentTime(): number {\r\n        if (this.privAudio !== undefined) {\r\n            return this.privAudio.currentTime;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    public pause(): void {\r\n        if (!this.privIsPaused && this.privAudio !== undefined) {\r\n            this.privAudio.pause();\r\n            this.privIsPaused = true;\r\n        }\r\n    }\r\n\r\n    public resume(cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.privIsPaused && this.privAudio !== undefined) {\r\n            this.privAudio.play().then((): void => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n            this.privIsPaused = false;\r\n        }\r\n    }\r\n\r\n    public onAudioStart: (sender: IPlayer) => void;\r\n\r\n    public onAudioEnd: (sender: IPlayer) => void;\r\n\r\n    public get internalAudio(): HTMLAudioElement {\r\n        return this.privAudio;\r\n    }\r\n\r\n    private async updateSourceBuffer(): Promise<void> {\r\n        if (this.privAudioBuffer !== undefined && (this.privAudioBuffer.length > 0) && this.sourceBufferAvailable()) {\r\n            this.privAppendingToBuffer = true;\r\n            const binary = this.privAudioBuffer.shift();\r\n            try {\r\n                this.privSourceBuffer.appendBuffer(binary);\r\n            } catch (error) {\r\n                this.privAudioBuffer.unshift(binary);\r\n                // eslint-disable-next-line no-console\r\n                console.log(\r\n                    \"buffer filled, pausing addition of binaries until space is made\");\r\n                return;\r\n            }\r\n            await this.notifyPlayback();\r\n        } else if (this.canEndStream()) {\r\n            await this.handleSourceBufferUpdateEnd();\r\n        }\r\n    }\r\n\r\n    private async handleSourceBufferUpdateEnd(): Promise<void> {\r\n        if (this.canEndStream() && this.sourceBufferAvailable()) {\r\n            this.privMediaSource.endOfStream();\r\n            await this.notifyPlayback();\r\n        }\r\n    }\r\n\r\n    private async notifyPlayback(): Promise<void> {\r\n        if (!this.privPlaybackStarted && this.privAudio !== undefined) {\r\n            this.privPlaybackStarted = true;\r\n            if (!!this.onAudioStart) {\r\n                this.onAudioStart(this);\r\n            }\r\n            this.privAudio.onended = (): void => {\r\n                if (!!this.onAudioEnd) {\r\n                    this.onAudioEnd(this);\r\n                }\r\n            };\r\n            if (!this.privIsPaused) {\r\n                await this.privAudio.play();\r\n            }\r\n        }\r\n    }\r\n\r\n    private canEndStream(): boolean {\r\n        return (this.isClosed && this.privSourceBuffer !== undefined && (this.privAudioBuffer.length === 0)\r\n            && this.privMediaSourceOpened && !this.privAppendingToBuffer && this.privMediaSource.readyState === \"open\");\r\n    }\r\n\r\n    private sourceBufferAvailable(): boolean {\r\n        return (this.privSourceBuffer !== undefined && !this.privSourceBuffer.updating);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}