{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/* eslint-disable max-classes-per-file */\nimport { ProxyInfo, WebsocketConnection } from \"../common.browser/Exports\";\nimport { OutputFormatPropertyName } from \"../common.speech/Exports\";\nimport { DialogServiceConfig, OutputFormat, PropertyId } from \"../sdk/Exports\";\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\nimport { WebsocketMessageFormatter } from \"./Exports\";\nimport { HeaderNames } from \"./HeaderNames\";\nimport { QueryParameterNames } from \"./QueryParameterNames\";\nexport class DialogConnectionFactory extends ConnectionFactoryBase {\n  create(config, authInfo, connectionId) {\n    const applicationId = config.parameters.getProperty(PropertyId.Conversation_ApplicationId, \"\");\n    const dialogType = config.parameters.getProperty(PropertyId.Conversation_DialogType);\n    const region = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\n    const language = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"en-US\");\n    const requestTurnStatus = config.parameters.getProperty(PropertyId.Conversation_Request_Bot_Status_Messages, \"true\");\n    const queryParams = {};\n    queryParams[HeaderNames.ConnectionId] = connectionId;\n    queryParams[QueryParameterNames.Format] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\n    queryParams[QueryParameterNames.Language] = language;\n    queryParams[QueryParameterNames.RequestBotStatusMessages] = requestTurnStatus;\n\n    if (applicationId) {\n      queryParams[QueryParameterNames.BotId] = applicationId;\n\n      if (dialogType === DialogServiceConfig.DialogTypes.CustomCommands) {\n        queryParams[HeaderNames.CustomCommandsAppId] = applicationId;\n      }\n    }\n\n    const resourceInfix = dialogType === DialogServiceConfig.DialogTypes.CustomCommands ? \"commands/\" : \"\";\n    const version = dialogType === DialogServiceConfig.DialogTypes.CustomCommands ? \"v1\" : dialogType === DialogServiceConfig.DialogTypes.BotFramework ? \"v3\" : \"v0\";\n    const headers = {};\n\n    if (authInfo.token != null && authInfo.token !== \"\") {\n      headers[authInfo.headerName] = authInfo.token;\n    } // The URL used for connection is chosen in a priority order of specification:\n    //  1. If a custom endpoint is provided, that URL is used verbatim.\n    //  2. If a custom host is provided (e.g. \"wss://my.custom.endpoint.com:1123\"), a URL is constructed from it.\n    //  3. If no custom connection details are provided, a URL is constructed from default values.\n\n\n    let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, \"\");\n\n    if (!endpoint) {\n      const hostSuffix = ConnectionFactoryBase.getHostSuffix(region);\n      const host = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, `wss://${region}.${DialogConnectionFactory.BaseUrl}${hostSuffix}`);\n      const standardizedHost = host.endsWith(\"/\") ? host : host + \"/\";\n      endpoint = `${standardizedHost}${resourceInfix}${DialogConnectionFactory.ApiKey}/${version}`;\n    }\n\n    this.setCommonUrlParams(config, queryParams, endpoint);\n    const enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n    return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\n  }\n\n}\nDialogConnectionFactory.ApiKey = \"api\";\nDialogConnectionFactory.BaseUrl = \"convai.speech\";","map":{"version":3,"sources":["src/common.speech/DialogConnectorFactory.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport { OutputFormatPropertyName } from \"../common.speech/Exports\";\r\nimport { IConnection, IStringDictionary } from \"../common/Exports\";\r\nimport { DialogServiceConfig, OutputFormat, PropertyId } from \"../sdk/Exports\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\r\nimport { AuthInfo, RecognizerConfig, WebsocketMessageFormatter } from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames\";\r\n\r\nexport class DialogConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private static readonly ApiKey: string = \"api\";\r\n    private static readonly BaseUrl: string = \"convai.speech\";\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        const applicationId: string = config.parameters.getProperty(PropertyId.Conversation_ApplicationId, \"\");\r\n        const dialogType: string = config.parameters.getProperty(PropertyId.Conversation_DialogType);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"en-US\");\r\n        const requestTurnStatus: string = config.parameters.getProperty(PropertyId.Conversation_Request_Bot_Status_Messages, \"true\");\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        queryParams[HeaderNames.ConnectionId] = connectionId;\r\n        queryParams[QueryParameterNames.Format] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n        queryParams[QueryParameterNames.Language] = language;\r\n        queryParams[QueryParameterNames.RequestBotStatusMessages] = requestTurnStatus;\r\n        if (applicationId) {\r\n            queryParams[QueryParameterNames.BotId] = applicationId;\r\n            if (dialogType === DialogServiceConfig.DialogTypes.CustomCommands) {\r\n                queryParams[HeaderNames.CustomCommandsAppId] = applicationId;\r\n            }\r\n        }\r\n\r\n        const resourceInfix: string =\r\n            dialogType === DialogServiceConfig.DialogTypes.CustomCommands ? \"commands/\"\r\n            : \"\";\r\n        const version: string =\r\n            dialogType === DialogServiceConfig.DialogTypes.CustomCommands ? \"v1\"\r\n            : dialogType === DialogServiceConfig.DialogTypes.BotFramework ? \"v3\"\r\n            : \"v0\";\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (authInfo.token != null && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n\r\n        // The URL used for connection is chosen in a priority order of specification:\r\n        //  1. If a custom endpoint is provided, that URL is used verbatim.\r\n        //  2. If a custom host is provided (e.g. \"wss://my.custom.endpoint.com:1123\"), a URL is constructed from it.\r\n        //  3. If no custom connection details are provided, a URL is constructed from default values.\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, \"\");\r\n        if (!endpoint) {\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            const host: string = config.parameters.getProperty(\r\n                PropertyId.SpeechServiceConnection_Host,\r\n                `wss://${region}.${DialogConnectionFactory.BaseUrl}${hostSuffix}`);\r\n            const standardizedHost: string = host.endsWith(\"/\") ? host : host + \"/\";\r\n            endpoint = `${standardizedHost}${resourceInfix}${DialogConnectionFactory.ApiKey}/${version}`;\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}