{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/* eslint-disable max-classes-per-file */\nimport { CancellationErrorCodePropertyName } from \"../common.speech/Exports\";\nimport { Contracts } from \"./Contracts\";\nimport { CancellationDetailsBase, CancellationErrorCode, CancellationReason, PropertyCollection, PropertyId, ResultReason } from \"./Exports\";\nexport var SpeakerRecognitionResultType;\n\n(function (SpeakerRecognitionResultType) {\n  SpeakerRecognitionResultType[SpeakerRecognitionResultType[\"Verify\"] = 0] = \"Verify\";\n  SpeakerRecognitionResultType[SpeakerRecognitionResultType[\"Identify\"] = 1] = \"Identify\";\n})(SpeakerRecognitionResultType || (SpeakerRecognitionResultType = {}));\n/**\n * Output format\n * @class SpeakerRecognitionResult\n */\n\n\nexport class SpeakerRecognitionResult {\n  constructor(resultType, data, profileId, resultReason = ResultReason.RecognizedSpeaker) {\n    this.privProperties = new PropertyCollection();\n    this.privReason = resultReason;\n\n    if (this.privReason !== ResultReason.Canceled) {\n      if (resultType === SpeakerRecognitionResultType.Identify) {\n        const json = JSON.parse(data);\n        Contracts.throwIfNullOrUndefined(json, \"JSON\");\n        this.privProfileId = json.identifiedProfile.profileId;\n        this.privScore = json.identifiedProfile.score;\n      } else {\n        const json = JSON.parse(data);\n        Contracts.throwIfNullOrUndefined(json, \"JSON\");\n        this.privScore = json.score;\n\n        if (json.recognitionResult.toLowerCase() !== \"accept\") {\n          this.privReason = ResultReason.NoMatch;\n        }\n\n        if (profileId !== undefined && profileId !== \"\") {\n          this.privProfileId = profileId;\n        }\n      }\n    } else {\n      const json = JSON.parse(data);\n      Contracts.throwIfNullOrUndefined(json, \"JSON\");\n      this.privErrorDetails = json.statusText;\n      this.privProperties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.ServiceError]);\n    }\n\n    this.privProperties.setProperty(PropertyId.SpeechServiceResponse_JsonResult, data);\n  }\n\n  get properties() {\n    return this.privProperties;\n  }\n\n  get reason() {\n    return this.privReason;\n  }\n\n  get profileId() {\n    return this.privProfileId;\n  }\n\n  get errorDetails() {\n    return this.privErrorDetails;\n  }\n\n  get score() {\n    return this.privScore;\n  }\n\n}\n/**\n * @class SpeakerRecognitionCancellationDetails\n */\n\nexport class SpeakerRecognitionCancellationDetails extends CancellationDetailsBase {\n  constructor(reason, errorDetails, errorCode) {\n    super(reason, errorDetails, errorCode);\n  }\n  /**\n   * Creates an instance of SpeakerRecognitionCancellationDetails object for the canceled SpeakerRecognitionResult\n   * @member SpeakerRecognitionCancellationDetails.fromResult\n   * @function\n   * @public\n   * @param {SpeakerRecognitionResult} result - The result that was canceled.\n   * @returns {SpeakerRecognitionCancellationDetails} The cancellation details object being created.\n   */\n\n\n  static fromResult(result) {\n    const reason = CancellationReason.Error;\n    let errorCode = CancellationErrorCode.NoError;\n\n    if (!!result.properties) {\n      errorCode = CancellationErrorCode[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError])];\n    }\n\n    return new SpeakerRecognitionCancellationDetails(reason, result.errorDetails, errorCode);\n  }\n\n}","map":{"version":3,"sources":["src/sdk/SpeakerRecognitionResult.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { CancellationErrorCodePropertyName } from \"../common.speech/Exports\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    CancellationDetailsBase,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n} from \"./Exports\";\r\n\r\nexport enum SpeakerRecognitionResultType {\r\n    Verify,\r\n    Identify\r\n}\r\n\r\ninterface IdentifyResult {\r\n    identifiedProfile: {\r\n        profileId: string;\r\n        score: number;\r\n    };\r\n}\r\n\r\ninterface VerifyResult {\r\n    recognitionResult: string;\r\n    score: number;\r\n}\r\n\r\n/**\r\n * Output format\r\n * @class SpeakerRecognitionResult\r\n */\r\nexport class SpeakerRecognitionResult {\r\n    private privReason: ResultReason;\r\n    private privProperties: PropertyCollection;\r\n    private privProfileId: string;\r\n    private privScore: number;\r\n    private privErrorDetails: string;\r\n\r\n    public constructor(resultType: SpeakerRecognitionResultType, data: string, profileId: string, resultReason: ResultReason = ResultReason.RecognizedSpeaker) {\r\n        this.privProperties = new PropertyCollection();\r\n        this.privReason = resultReason;\r\n        if (this.privReason !== ResultReason.Canceled) {\r\n            if (resultType === SpeakerRecognitionResultType.Identify) {\r\n                const json: IdentifyResult = JSON.parse(data) as IdentifyResult;\r\n                Contracts.throwIfNullOrUndefined(json, \"JSON\");\r\n                this.privProfileId = json.identifiedProfile.profileId;\r\n                this.privScore = json.identifiedProfile.score;\r\n            } else {\r\n                const json: VerifyResult = JSON.parse(data) as VerifyResult;\r\n                Contracts.throwIfNullOrUndefined(json, \"JSON\");\r\n                this.privScore = json.score;\r\n                if (json.recognitionResult.toLowerCase() !== \"accept\") {\r\n                    this.privReason = ResultReason.NoMatch;\r\n                }\r\n                if (profileId !== undefined && profileId !== \"\") {\r\n                    this.privProfileId = profileId;\r\n                }\r\n            }\r\n        } else {\r\n            const json: { statusText: string } = JSON.parse(data) as { statusText: string };\r\n            Contracts.throwIfNullOrUndefined(json, \"JSON\");\r\n            this.privErrorDetails = json.statusText;\r\n            this.privProperties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.ServiceError]);\r\n        }\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceResponse_JsonResult, data);\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get profileId(): string {\r\n        return this.privProfileId;\r\n    }\r\n\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    public get score(): number {\r\n        return this.privScore;\r\n    }\r\n}\r\n\r\n/**\r\n * @class SpeakerRecognitionCancellationDetails\r\n */\r\nexport class SpeakerRecognitionCancellationDetails extends CancellationDetailsBase {\r\n\r\n    private constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        super(reason, errorDetails, errorCode);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of SpeakerRecognitionCancellationDetails object for the canceled SpeakerRecognitionResult\r\n     * @member SpeakerRecognitionCancellationDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {SpeakerRecognitionResult} result - The result that was canceled.\r\n     * @returns {SpeakerRecognitionCancellationDetails} The cancellation details object being created.\r\n     */\r\n    public static fromResult(result: SpeakerRecognitionResult): SpeakerRecognitionCancellationDetails {\r\n        const reason = CancellationReason.Error;\r\n        let errorCode: CancellationErrorCode = CancellationErrorCode.NoError;\r\n\r\n        if (!!result.properties) {\r\n            errorCode = CancellationErrorCode[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError]) as keyof typeof CancellationErrorCode];\r\n        }\r\n\r\n        return new SpeakerRecognitionCancellationDetails(reason, result.errorDetails, errorCode);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}