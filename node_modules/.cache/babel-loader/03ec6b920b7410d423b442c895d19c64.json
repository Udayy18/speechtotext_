{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { connectivity, type } from \"../common.speech/Exports\";\nimport { AudioSourceErrorEvent, AudioSourceInitializingEvent, AudioSourceOffEvent, AudioSourceReadyEvent, AudioStreamNodeAttachedEvent, AudioStreamNodeAttachingEvent, AudioStreamNodeDetachedEvent, AudioStreamNodeErrorEvent, ChunkedArrayBufferStream, createNoDashGuid, Deferred, Events, EventSource } from \"../common/Exports\";\nimport { AudioStreamFormat, AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat\";\nexport const AudioWorkletSourceURLPropertyName = \"MICROPHONE-WorkletSourceUrl\";\nexport class MicAudioSource {\n  constructor(privRecorder, deviceId, audioSourceId, mediaStream) {\n    this.privRecorder = privRecorder;\n    this.deviceId = deviceId;\n    this.privStreams = {};\n    this.privOutputChunkSize = MicAudioSource.AUDIOFORMAT.avgBytesPerSec / 10;\n    this.privId = audioSourceId ? audioSourceId : createNoDashGuid();\n    this.privEvents = new EventSource();\n    this.privMediaStream = mediaStream || null;\n    this.privIsClosing = false;\n  }\n\n  get format() {\n    return Promise.resolve(MicAudioSource.AUDIOFORMAT);\n  }\n\n  get blob() {\n    return Promise.reject(\"Not implemented for Mic input\");\n  }\n\n  turnOn() {\n    if (this.privInitializeDeferral) {\n      return this.privInitializeDeferral.promise;\n    }\n\n    this.privInitializeDeferral = new Deferred();\n\n    try {\n      this.createAudioContext();\n    } catch (error) {\n      if (error instanceof Error) {\n        const typedError = error;\n        this.privInitializeDeferral.reject(typedError.name + \": \" + typedError.message);\n      } else {\n        this.privInitializeDeferral.reject(error);\n      }\n\n      return this.privInitializeDeferral.promise;\n    }\n\n    const nav = window.navigator;\n    let getUserMedia = // eslint-disable-next-line\n    nav.getUserMedia || nav.webkitGetUserMedia || nav.mozGetUserMedia || nav.msGetUserMedia;\n\n    if (!!nav.mediaDevices) {\n      getUserMedia = (constraints, successCallback, errorCallback) => {\n        nav.mediaDevices.getUserMedia(constraints).then(successCallback).catch(errorCallback);\n      };\n    }\n\n    if (!getUserMedia) {\n      const errorMsg = \"Browser does not support getUserMedia.\";\n      this.privInitializeDeferral.reject(errorMsg);\n      this.onEvent(new AudioSourceErrorEvent(errorMsg, \"\")); // mic initialized error - no streamid at this point\n    } else {\n      const next = () => {\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\n\n        if (this.privMediaStream && this.privMediaStream.active) {\n          this.onEvent(new AudioSourceReadyEvent(this.privId));\n          this.privInitializeDeferral.resolve();\n        } else {\n          getUserMedia({\n            audio: this.deviceId ? {\n              deviceId: this.deviceId\n            } : true,\n            video: false\n          }, mediaStream => {\n            this.privMediaStream = mediaStream;\n            this.onEvent(new AudioSourceReadyEvent(this.privId));\n            this.privInitializeDeferral.resolve();\n          }, error => {\n            const errorMsg = `Error occurred during microphone initialization: ${error}`;\n            this.privInitializeDeferral.reject(errorMsg);\n            this.onEvent(new AudioSourceErrorEvent(this.privId, errorMsg));\n          });\n        }\n      };\n\n      if (this.privContext.state === \"suspended\") {\n        // NOTE: On iOS, the Web Audio API requires sounds to be triggered from an explicit user action.\n        // https://github.com/WebAudio/web-audio-api/issues/790\n        this.privContext.resume().then(next).catch(reason => {\n          this.privInitializeDeferral.reject(`Failed to initialize audio context: ${reason}`);\n        });\n      } else {\n        next();\n      }\n    }\n\n    return this.privInitializeDeferral.promise;\n  }\n\n  id() {\n    return this.privId;\n  }\n\n  attach(audioNodeId) {\n    this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\n    return this.listen(audioNodeId).then(stream => {\n      this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\n      return {\n        detach: () => __awaiter(this, void 0, void 0, function* () {\n          stream.readEnded();\n          delete this.privStreams[audioNodeId];\n          this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n          return this.turnOff();\n        }),\n        id: () => audioNodeId,\n        read: () => stream.read()\n      };\n    });\n  }\n\n  detach(audioNodeId) {\n    if (audioNodeId && this.privStreams[audioNodeId]) {\n      this.privStreams[audioNodeId].close();\n      delete this.privStreams[audioNodeId];\n      this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n    }\n  }\n\n  turnOff() {\n    return __awaiter(this, void 0, void 0, function* () {\n      for (const streamId in this.privStreams) {\n        if (streamId) {\n          const stream = this.privStreams[streamId];\n\n          if (stream) {\n            stream.close();\n          }\n        }\n      }\n\n      this.onEvent(new AudioSourceOffEvent(this.privId)); // no stream now\n\n      if (this.privInitializeDeferral) {\n        // Correctly handle when browser forces mic off before turnOn() completes\n        // eslint-disable-next-line @typescript-eslint/await-thenable\n        yield this.privInitializeDeferral;\n        this.privInitializeDeferral = null;\n      }\n\n      yield this.destroyAudioContext();\n      return;\n    });\n  }\n\n  get events() {\n    return this.privEvents;\n  }\n\n  get deviceInfo() {\n    return this.getMicrophoneLabel().then(label => ({\n      bitspersample: MicAudioSource.AUDIOFORMAT.bitsPerSample,\n      channelcount: MicAudioSource.AUDIOFORMAT.channels,\n      connectivity: connectivity.Unknown,\n      manufacturer: \"Speech SDK\",\n      model: label,\n      samplerate: MicAudioSource.AUDIOFORMAT.samplesPerSec,\n      type: type.Microphones\n    }));\n  }\n\n  setProperty(name, value) {\n    if (name === AudioWorkletSourceURLPropertyName) {\n      this.privRecorder.setWorkletUrl(value);\n    } else {\n      throw new Error(\"Property '\" + name + \"' is not supported on Microphone.\");\n    }\n  }\n\n  getMicrophoneLabel() {\n    const defaultMicrophoneName = \"microphone\"; // If we did this already, return the value.\n\n    if (this.privMicrophoneLabel !== undefined) {\n      return Promise.resolve(this.privMicrophoneLabel);\n    } // If the stream isn't currently running, we can't query devices because security.\n\n\n    if (this.privMediaStream === undefined || !this.privMediaStream.active) {\n      return Promise.resolve(defaultMicrophoneName);\n    } // Setup a default\n\n\n    this.privMicrophoneLabel = defaultMicrophoneName; // Get the id of the device running the audio track.\n\n    const microphoneDeviceId = this.privMediaStream.getTracks()[0].getSettings().deviceId; // If the browser doesn't support getting the device ID, set a default and return.\n\n    if (undefined === microphoneDeviceId) {\n      return Promise.resolve(this.privMicrophoneLabel);\n    }\n\n    const deferred = new Deferred(); // Enumerate the media devices.\n\n    navigator.mediaDevices.enumerateDevices().then(devices => {\n      for (const device of devices) {\n        if (device.deviceId === microphoneDeviceId) {\n          // Found the device\n          this.privMicrophoneLabel = device.label;\n          break;\n        }\n      }\n\n      deferred.resolve(this.privMicrophoneLabel);\n    }, () => deferred.resolve(this.privMicrophoneLabel));\n    return deferred.promise;\n  }\n\n  listen(audioNodeId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.turnOn();\n      const stream = new ChunkedArrayBufferStream(this.privOutputChunkSize, audioNodeId);\n      this.privStreams[audioNodeId] = stream;\n\n      try {\n        this.privRecorder.record(this.privContext, this.privMediaStream, stream);\n      } catch (error) {\n        this.onEvent(new AudioStreamNodeErrorEvent(this.privId, audioNodeId, error));\n        throw error;\n      }\n\n      const result = stream;\n      return result;\n    });\n  }\n\n  onEvent(event) {\n    this.privEvents.onEvent(event);\n    Events.instance.onEvent(event);\n  }\n\n  createAudioContext() {\n    if (!!this.privContext) {\n      return;\n    }\n\n    this.privContext = AudioStreamFormatImpl.getAudioContext(MicAudioSource.AUDIOFORMAT.samplesPerSec);\n  }\n\n  destroyAudioContext() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.privContext) {\n        return;\n      }\n\n      this.privRecorder.releaseMediaResources(this.privContext); // This pattern brought to you by a bug in the TypeScript compiler where it\n      // confuses the (\"close\" in this.privContext) with this.privContext always being null as the alternate.\n      // https://github.com/Microsoft/TypeScript/issues/11498\n\n      let hasClose = false;\n\n      if (\"close\" in this.privContext) {\n        hasClose = true;\n      }\n\n      if (hasClose) {\n        if (!this.privIsClosing) {\n          // The audio context close may take enough time that the close is called twice\n          this.privIsClosing = true;\n          yield this.privContext.close();\n          this.privContext = null;\n          this.privIsClosing = false;\n        }\n      } else if (null !== this.privContext && this.privContext.state === \"running\") {\n        // Suspend actually takes a callback, but analogous to the\n        // resume method, it'll be only fired if suspend is called\n        // in a direct response to a user action. The later is not always\n        // the case, as TurnOff is also called, when we receive an\n        // end-of-speech message from the service. So, doing a best effort\n        // fire-and-forget here.\n        yield this.privContext.suspend();\n      }\n    });\n  }\n\n}\nMicAudioSource.AUDIOFORMAT = AudioStreamFormat.getDefaultInputFormat();","map":{"version":3,"sources":["src/common.browser/MicAudioSource.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    connectivity,\r\n    ISpeechConfigAudioDevice,\r\n    type\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceOffEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    ChunkedArrayBufferStream,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStringDictionary,\r\n    Stream,\r\n} from \"../common/Exports\";\r\nimport { IStreamChunk } from \"../common/Stream\";\r\nimport {\r\n    AudioStreamFormat,\r\n    AudioStreamFormatImpl,\r\n} from \"../sdk/Audio/AudioStreamFormat\";\r\nimport { IRecorder } from \"./IRecorder\";\r\n\r\n// Extending the default definition with browser specific definitions for backward compatibility\r\ninterface INavigator extends Navigator {\r\n    webkitGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback | undefined, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n    mozGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback | undefined, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n    msGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n}\r\n\r\nexport const AudioWorkletSourceURLPropertyName = \"MICROPHONE-WorkletSourceUrl\";\r\n\r\nexport class MicAudioSource implements IAudioSource {\r\n\r\n    private static readonly AUDIOFORMAT: AudioStreamFormatImpl = AudioStreamFormat.getDefaultInputFormat() as AudioStreamFormatImpl;\r\n\r\n    private privStreams: IStringDictionary<Stream<ArrayBuffer>> = {};\r\n\r\n    private privId: string;\r\n\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n\r\n    private privInitializeDeferral: Deferred<void>;\r\n\r\n    private privMediaStream: MediaStream;\r\n\r\n    private privContext: AudioContext;\r\n\r\n    private privMicrophoneLabel: string;\r\n\r\n    private privOutputChunkSize: number;\r\n\r\n    private privIsClosing: boolean;\r\n\r\n    public constructor(\r\n        private readonly privRecorder: IRecorder,\r\n        private readonly deviceId?: string,\r\n        audioSourceId?: string,\r\n        mediaStream?: MediaStream\r\n        ) {\r\n\r\n        this.privOutputChunkSize = MicAudioSource.AUDIOFORMAT.avgBytesPerSec / 10;\r\n        this.privId = audioSourceId ? audioSourceId : createNoDashGuid();\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privMediaStream = mediaStream || null;\r\n        this.privIsClosing = false;\r\n    }\r\n\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return Promise.resolve(MicAudioSource.AUDIOFORMAT);\r\n    }\r\n\r\n    public get blob(): Promise<Blob> {\r\n        return Promise.reject(\"Not implemented for Mic input\");\r\n    }\r\n\r\n    public turnOn(): Promise<void> {\r\n        if (this.privInitializeDeferral) {\r\n            return this.privInitializeDeferral.promise;\r\n        }\r\n\r\n        this.privInitializeDeferral = new Deferred<void>();\r\n\r\n        try {\r\n            this.createAudioContext();\r\n        } catch (error) {\r\n            if (error instanceof Error) {\r\n                const typedError: Error = error;\r\n                this.privInitializeDeferral.reject(typedError.name + \": \" + typedError.message);\r\n            } else {\r\n                this.privInitializeDeferral.reject(error as string);\r\n            }\r\n            return this.privInitializeDeferral.promise;\r\n        }\r\n\r\n        const nav = window.navigator as INavigator;\r\n\r\n        let getUserMedia = (\r\n            // eslint-disable-next-line\r\n            nav.getUserMedia ||\r\n            nav.webkitGetUserMedia ||\r\n            nav.mozGetUserMedia ||\r\n            nav.msGetUserMedia\r\n        );\r\n\r\n        if (!!nav.mediaDevices) {\r\n            getUserMedia = (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback): void => {\r\n                nav.mediaDevices\r\n                    .getUserMedia(constraints)\r\n                    .then(successCallback)\r\n                    .catch(errorCallback);\r\n            };\r\n        }\r\n\r\n        if (!getUserMedia) {\r\n            const errorMsg = \"Browser does not support getUserMedia.\";\r\n            this.privInitializeDeferral.reject(errorMsg);\r\n            this.onEvent(new AudioSourceErrorEvent(errorMsg, \"\")); // mic initialized error - no streamid at this point\r\n        } else {\r\n            const next = (): void => {\r\n                this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n                if (this.privMediaStream && this.privMediaStream.active) {\r\n                    this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n                    this.privInitializeDeferral.resolve();\r\n                } else {\r\n                    getUserMedia(\r\n                        { audio: this.deviceId ? { deviceId: this.deviceId } : true, video: false },\r\n                        (mediaStream: MediaStream): void => {\r\n                            this.privMediaStream = mediaStream;\r\n                            this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n                            this.privInitializeDeferral.resolve();\r\n                        }, (error: any): void => {\r\n                            const errorMsg = `Error occurred during microphone initialization: ${error as string}`;\r\n                            this.privInitializeDeferral.reject(errorMsg);\r\n                            this.onEvent(new AudioSourceErrorEvent(this.privId, errorMsg));\r\n                        });\r\n                }\r\n            };\r\n\r\n            if (this.privContext.state === \"suspended\") {\r\n                // NOTE: On iOS, the Web Audio API requires sounds to be triggered from an explicit user action.\r\n                // https://github.com/WebAudio/web-audio-api/issues/790\r\n                this.privContext.resume()\r\n                    .then(next)\r\n                    .catch((reason: any): void => {\r\n                        this.privInitializeDeferral.reject(`Failed to initialize audio context: ${reason as string}`);\r\n                    });\r\n            } else {\r\n                next();\r\n            }\r\n        }\r\n\r\n        return this.privInitializeDeferral.promise;\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        return this.listen(audioNodeId).then<IAudioStreamNode>(\r\n            (stream: Stream<ArrayBuffer>): IAudioStreamNode => {\r\n                this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n                return {\r\n                    detach: async (): Promise<void> => {\r\n                        stream.readEnded();\r\n                        delete this.privStreams[audioNodeId];\r\n                        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                        return this.turnOff();\r\n                    },\r\n                    id: (): string => audioNodeId,\r\n                    read: (): Promise<IStreamChunk<ArrayBuffer>> => stream.read(),\r\n                };\r\n            });\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        if (audioNodeId && this.privStreams[audioNodeId]) {\r\n            this.privStreams[audioNodeId].close();\r\n            delete this.privStreams[audioNodeId];\r\n            this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n        }\r\n    }\r\n\r\n    public async turnOff(): Promise<void> {\r\n        for (const streamId in this.privStreams) {\r\n            if (streamId) {\r\n                const stream = this.privStreams[streamId];\r\n                if (stream) {\r\n                    stream.close();\r\n                }\r\n            }\r\n        }\r\n\r\n        this.onEvent(new AudioSourceOffEvent(this.privId)); // no stream now\r\n        if (this.privInitializeDeferral) {\r\n            // Correctly handle when browser forces mic off before turnOn() completes\r\n            // eslint-disable-next-line @typescript-eslint/await-thenable\r\n            await this.privInitializeDeferral;\r\n            this.privInitializeDeferral = null;\r\n        }\r\n\r\n        await this.destroyAudioContext();\r\n\r\n        return;\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return this.getMicrophoneLabel().then((label: string): ISpeechConfigAudioDevice => (\r\n            {\r\n                bitspersample: MicAudioSource.AUDIOFORMAT.bitsPerSample,\r\n                channelcount: MicAudioSource.AUDIOFORMAT.channels,\r\n                connectivity: connectivity.Unknown,\r\n                manufacturer: \"Speech SDK\",\r\n                model: label,\r\n                samplerate: MicAudioSource.AUDIOFORMAT.samplesPerSec,\r\n                type: type.Microphones,\r\n            }\r\n        ));\r\n    }\r\n\r\n    public setProperty(name: string, value: string): void {\r\n        if (name === AudioWorkletSourceURLPropertyName) {\r\n            this.privRecorder.setWorkletUrl(value);\r\n        } else {\r\n            throw new Error(\"Property '\" + name + \"' is not supported on Microphone.\");\r\n        }\r\n    }\r\n\r\n    private getMicrophoneLabel(): Promise<string> {\r\n        const defaultMicrophoneName: string = \"microphone\";\r\n\r\n        // If we did this already, return the value.\r\n        if (this.privMicrophoneLabel !== undefined) {\r\n            return Promise.resolve(this.privMicrophoneLabel);\r\n        }\r\n\r\n        // If the stream isn't currently running, we can't query devices because security.\r\n        if (this.privMediaStream === undefined || !this.privMediaStream.active) {\r\n            return Promise.resolve(defaultMicrophoneName);\r\n        }\r\n\r\n        // Setup a default\r\n        this.privMicrophoneLabel = defaultMicrophoneName;\r\n\r\n        // Get the id of the device running the audio track.\r\n        const microphoneDeviceId: string = this.privMediaStream.getTracks()[0].getSettings().deviceId;\r\n\r\n        // If the browser doesn't support getting the device ID, set a default and return.\r\n        if (undefined === microphoneDeviceId) {\r\n            return Promise.resolve(this.privMicrophoneLabel);\r\n        }\r\n\r\n        const deferred: Deferred<string> = new Deferred<string>();\r\n\r\n        // Enumerate the media devices.\r\n        navigator.mediaDevices.enumerateDevices().then((devices: MediaDeviceInfo[]): void => {\r\n            for (const device of devices) {\r\n                if (device.deviceId === microphoneDeviceId) {\r\n                    // Found the device\r\n                    this.privMicrophoneLabel = device.label;\r\n                    break;\r\n                }\r\n            }\r\n            deferred.resolve(this.privMicrophoneLabel);\r\n        }, (): Deferred<string> => deferred.resolve(this.privMicrophoneLabel));\r\n\r\n        return deferred.promise;\r\n    }\r\n\r\n    private async listen(audioNodeId: string): Promise<Stream<ArrayBuffer>> {\r\n        await this.turnOn();\r\n        const stream = new ChunkedArrayBufferStream(this.privOutputChunkSize, audioNodeId);\r\n        this.privStreams[audioNodeId] = stream;\r\n        try {\r\n            this.privRecorder.record(this.privContext, this.privMediaStream, stream);\r\n        } catch (error) {\r\n            this.onEvent(new AudioStreamNodeErrorEvent(this.privId, audioNodeId, error as string));\r\n            throw error;\r\n        }\r\n        const result: Stream<ArrayBuffer> = stream;\r\n        return result;\r\n    }\r\n\r\n    private onEvent(event: AudioSourceEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private createAudioContext(): void {\r\n        if (!!this.privContext) {\r\n            return;\r\n        }\r\n\r\n        this.privContext = AudioStreamFormatImpl.getAudioContext(MicAudioSource.AUDIOFORMAT.samplesPerSec);\r\n    }\r\n\r\n    private async destroyAudioContext(): Promise<void> {\r\n        if (!this.privContext) {\r\n            return;\r\n        }\r\n\r\n        this.privRecorder.releaseMediaResources(this.privContext);\r\n\r\n        // This pattern brought to you by a bug in the TypeScript compiler where it\r\n        // confuses the (\"close\" in this.privContext) with this.privContext always being null as the alternate.\r\n        // https://github.com/Microsoft/TypeScript/issues/11498\r\n        let hasClose: boolean = false;\r\n        if (\"close\" in this.privContext) {\r\n            hasClose = true;\r\n        }\r\n\r\n        if (hasClose) {\r\n            if (!this.privIsClosing) {\r\n                // The audio context close may take enough time that the close is called twice\r\n                this.privIsClosing = true;\r\n                await this.privContext.close();\r\n                this.privContext = null;\r\n                this.privIsClosing = false;\r\n            }\r\n        } else if (null !== this.privContext && this.privContext.state === \"running\") {\r\n            // Suspend actually takes a callback, but analogous to the\r\n            // resume method, it'll be only fired if suspend is called\r\n            // in a direct response to a user action. The later is not always\r\n            // the case, as TurnOff is also called, when we receive an\r\n            // end-of-speech message from the service. So, doing a best effort\r\n            // fire-and-forget here.\r\n            await this.privContext.suspend();\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}