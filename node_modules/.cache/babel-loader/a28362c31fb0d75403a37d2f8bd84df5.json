{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ProxyInfo, WebsocketConnection } from \"../common.browser/Exports\";\nimport { PropertyId } from \"../sdk/Exports\";\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\nimport { WebsocketMessageFormatter } from \"./Exports\";\nimport { HeaderNames } from \"./HeaderNames\";\nimport { QueryParameterNames } from \"./QueryParameterNames\";\nexport class SpeechSynthesisConnectionFactory {\n  constructor() {\n    this.synthesisUri = \"/cognitiveservices/websocket/v1\";\n  }\n\n  create(config, authInfo, connectionId) {\n    let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\n    const region = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\n    const hostSuffix = ConnectionFactoryBase.getHostSuffix(region);\n    const endpointId = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\n    const hostPrefix = endpointId === undefined ? \"tts\" : \"voice\";\n    const host = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".\" + hostPrefix + \".speech\" + hostSuffix);\n    const queryParams = {};\n\n    if (!endpoint) {\n      endpoint = host + this.synthesisUri;\n    }\n\n    const headers = {};\n\n    if (authInfo.token !== undefined && authInfo.token !== \"\") {\n      headers[authInfo.headerName] = authInfo.token;\n    }\n\n    headers[HeaderNames.ConnectionId] = connectionId;\n\n    if (endpointId !== undefined) {\n      headers[QueryParameterNames.CustomVoiceDeploymentId] = endpointId;\n    }\n\n    config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\n    const enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n    return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromParameters(config.parameters), enableCompression, connectionId);\n  }\n\n}","map":{"version":3,"sources":["src/common.speech/SpeechSynthesisConnectionFactory.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SACI,SADJ,EAEI,mBAFJ,QAGO,2BAHP;AAQA,SAAS,UAAT,QAA2B,gBAA3B;AACA,SAAS,qBAAT,QAAsC,yBAAtC;AACA,SAGI,yBAHJ,QAIO,WAJP;AAKA,SAAS,WAAT,QAA4B,eAA5B;AAEA,SACI,mBADJ,QAEO,uBAFP;AAIA,OAAM,MAAO,gCAAP,CAAuC;AAA7C,EAAA,WAAA,GAAA;AAEqB,SAAA,YAAA,GAAuB,iCAAvB;AAkCpB;;AAhCU,EAAA,MAAM,CACT,MADS,EAET,QAFS,EAGT,YAHS,EAGY;AAErB,QAAI,QAAQ,GAAW,MAAM,CAAC,UAAP,CAAkB,WAAlB,CAA8B,UAAU,CAAC,gCAAzC,EAA2E,SAA3E,CAAvB;AACA,UAAM,MAAM,GAAW,MAAM,CAAC,UAAP,CAAkB,WAAlB,CAA8B,UAAU,CAAC,8BAAzC,EAAyE,SAAzE,CAAvB;AACA,UAAM,UAAU,GAAW,qBAAqB,CAAC,aAAtB,CAAoC,MAApC,CAA3B;AACA,UAAM,UAAU,GAAG,MAAM,CAAC,UAAP,CAAkB,WAAlB,CAA8B,UAAU,CAAC,kCAAzC,EAA6E,SAA7E,CAAnB;AACA,UAAM,UAAU,GAAI,UAAU,KAAK,SAAhB,GAA6B,KAA7B,GAAqC,OAAxD;AACA,UAAM,IAAI,GAAW,MAAM,CAAC,UAAP,CAAkB,WAAlB,CAA8B,UAAU,CAAC,4BAAzC,EAAuE,WAAW,MAAX,GAAoB,GAApB,GAA0B,UAA1B,GAAuC,SAAvC,GAAmD,UAA1H,CAArB;AAEA,UAAM,WAAW,GAA8B,EAA/C;;AAEA,QAAI,CAAC,QAAL,EAAe;AACX,MAAA,QAAQ,GAAG,IAAI,GAAG,KAAK,YAAvB;AACH;;AAED,UAAM,OAAO,GAA8B,EAA3C;;AACA,QAAI,QAAQ,CAAC,KAAT,KAAmB,SAAnB,IAAgC,QAAQ,CAAC,KAAT,KAAmB,EAAvD,EAA2D;AACvD,MAAA,OAAO,CAAC,QAAQ,CAAC,UAAV,CAAP,GAA+B,QAAQ,CAAC,KAAxC;AACH;;AACD,IAAA,OAAO,CAAC,WAAW,CAAC,YAAb,CAAP,GAAoC,YAApC;;AACA,QAAI,UAAU,KAAK,SAAnB,EAA8B;AAC1B,MAAA,OAAO,CAAC,mBAAmB,CAAC,uBAArB,CAAP,GAAuD,UAAvD;AACH;;AAED,IAAA,MAAM,CAAC,UAAP,CAAkB,WAAlB,CAA8B,UAAU,CAAC,2BAAzC,EAAsE,QAAtE;AAEA,UAAM,iBAAiB,GAAY,MAAM,CAAC,UAAP,CAAkB,WAAlB,CAA8B,mCAA9B,EAAmE,OAAnE,MAAgF,MAAnH;AACA,WAAO,IAAI,mBAAJ,CAAwB,QAAxB,EAAkC,WAAlC,EAA+C,OAA/C,EAAwD,IAAI,yBAAJ,EAAxD,EAAyF,SAAS,CAAC,cAAV,CAAyB,MAAM,CAAC,UAAhC,CAAzF,EAAsI,iBAAtI,EAAyJ,YAAzJ,CAAP;AACH;;AAnCwC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports\";\r\nimport { PropertyId } from \"../sdk/Exports\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\r\nimport {\r\n    AuthInfo,\r\n    SynthesizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { ISynthesisConnectionFactory } from \"./ISynthesisConnectionFactory\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames\";\r\n\r\nexport class SpeechSynthesisConnectionFactory implements ISynthesisConnectionFactory {\r\n\r\n    private readonly synthesisUri: string = \"/cognitiveservices/websocket/v1\";\r\n\r\n    public create(\r\n        config: SynthesizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const endpointId = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const hostPrefix = (endpointId === undefined) ? \"tts\" : \"voice\";\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".\" + hostPrefix + \".speech\" + hostSuffix);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n\r\n        if (!endpoint) {\r\n            endpoint = host + this.synthesisUri;\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n        if (endpointId !== undefined) {\r\n            headers[QueryParameterNames.CustomVoiceDeploymentId] = endpointId;\r\n        }\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromParameters(config.parameters), enableCompression, connectionId);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}