{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { RestMessageAdapter, RestRequestType } from \"../../common.browser/Exports\";\nimport { Contracts } from \"../../sdk/Contracts\";\nimport { PropertyId } from \"../../sdk/Exports\";\nimport { ConversationConnectionConfig } from \"./ConversationConnectionConfig\";\nexport class ConversationManager {\n  constructor() {\n    //\n    this.privRequestParams = ConversationConnectionConfig.configParams;\n    this.privErrors = ConversationConnectionConfig.restErrors;\n    this.privHost = ConversationConnectionConfig.host;\n    this.privApiVersion = ConversationConnectionConfig.apiVersion;\n    this.privRestPath = ConversationConnectionConfig.restPath;\n    this.privRestAdapter = new RestMessageAdapter({});\n  }\n  /**\n   * Make a POST request to the Conversation Manager service endpoint to create or join a conversation.\n   * @param args\n   * @param conversationCode\n   * @param callback\n   * @param errorCallback\n   */\n\n\n  createOrJoin(args, conversationCode, cb, err) {\n    try {\n      Contracts.throwIfNullOrUndefined(args, \"args\");\n      const languageCode = args.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, ConversationConnectionConfig.defaultLanguageCode);\n      const nickname = args.getProperty(PropertyId.ConversationTranslator_Name, \"conversation_host\");\n      const endpointHost = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\n      const correlationId = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\n      const subscriptionKey = args.getProperty(PropertyId.SpeechServiceConnection_Key);\n      const subscriptionRegion = args.getProperty(PropertyId.SpeechServiceConnection_Region);\n      const authToken = args.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n      Contracts.throwIfNullOrWhitespace(languageCode, \"languageCode\");\n      Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\n      Contracts.throwIfNullOrWhitespace(endpointHost, \"endpointHost\");\n      const queryParams = {};\n      queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\n      queryParams[this.privRequestParams.languageCode] = languageCode;\n      queryParams[this.privRequestParams.nickname] = nickname;\n      const headers = {};\n\n      if (correlationId) {\n        headers[this.privRequestParams.correlationId] = correlationId;\n      }\n\n      headers[this.privRequestParams.clientAppId] = ConversationConnectionConfig.clientAppId;\n\n      if (conversationCode !== undefined) {\n        queryParams[this.privRequestParams.roomId] = conversationCode;\n      } else {\n        Contracts.throwIfNullOrUndefined(subscriptionRegion, this.privErrors.authInvalidSubscriptionRegion);\n        headers[this.privRequestParams.subscriptionRegion] = subscriptionRegion;\n\n        if (subscriptionKey) {\n          headers[this.privRequestParams.subscriptionKey] = subscriptionKey;\n        } else if (authToken) {\n          headers[this.privRequestParams.authorization] = `Bearer ${authToken}`;\n        } else {\n          Contracts.throwIfNullOrUndefined(subscriptionKey, this.privErrors.authInvalidSubscriptionKey);\n        }\n      }\n\n      const config = {};\n      config.headers = headers;\n      this.privRestAdapter.options = config;\n      const endpoint = `https://${endpointHost}${this.privRestPath}`; // TODO: support a proxy and certificate validation\n\n      this.privRestAdapter.request(RestRequestType.Post, endpoint, queryParams, null).then(response => {\n        const requestId = RestMessageAdapter.extractHeaderValue(this.privRequestParams.requestId, response.headers);\n\n        if (!response.ok) {\n          if (!!err) {\n            // get the error\n            let errorMessage = this.privErrors.invalidCreateJoinConversationResponse.replace(\"{status}\", response.status.toString());\n            let errMessageRaw;\n\n            try {\n              errMessageRaw = JSON.parse(response.data);\n              errorMessage += ` [${errMessageRaw.error.code}: ${errMessageRaw.error.message}]`;\n            } catch (e) {\n              errorMessage += ` [${response.data}]`;\n            }\n\n            if (requestId) {\n              errorMessage += ` ${requestId}`;\n            }\n\n            err(errorMessage);\n          }\n\n          return;\n        }\n\n        const conversation = JSON.parse(response.data);\n\n        if (conversation) {\n          conversation.requestId = requestId;\n        }\n\n        if (!!cb) {\n          try {\n            cb(conversation);\n          } catch (e) {\n            if (!!err) {\n              err(e);\n            }\n          }\n\n          cb = undefined;\n        } // eslint-disable-next-line @typescript-eslint/no-empty-function\n\n      }).catch(() => {});\n    } catch (error) {\n      if (!!err) {\n        if (error instanceof Error) {\n          const typedError = error;\n          err(typedError.name + \": \" + typedError.message);\n        } else {\n          err(error);\n        }\n      }\n    }\n  }\n  /**\n   * Make a DELETE request to the Conversation Manager service endpoint to leave the conversation.\n   * @param args\n   * @param sessionToken\n   * @param callback\n   */\n\n\n  leave(args, sessionToken) {\n    return new Promise((resolve, reject) => {\n      try {\n        Contracts.throwIfNullOrUndefined(args, this.privErrors.invalidArgs.replace(\"{arg}\", \"config\"));\n        Contracts.throwIfNullOrWhitespace(sessionToken, this.privErrors.invalidArgs.replace(\"{arg}\", \"token\"));\n        const endpointHost = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\n        const correlationId = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\n        const queryParams = {};\n        queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\n        queryParams[this.privRequestParams.sessionToken] = sessionToken;\n        const headers = {};\n\n        if (correlationId) {\n          headers[this.privRequestParams.correlationId] = correlationId;\n        }\n\n        const config = {};\n        config.headers = headers;\n        this.privRestAdapter.options = config;\n        const endpoint = `https://${endpointHost}${this.privRestPath}`; // TODO: support a proxy and certificate validation\n\n        this.privRestAdapter.request(RestRequestType.Delete, endpoint, queryParams, null).then(response => {\n          if (!response.ok) {// ignore errors on delete\n          }\n\n          resolve(); // eslint-disable-next-line @typescript-eslint/no-empty-function\n        }).catch(() => {});\n      } catch (error) {\n        if (error instanceof Error) {\n          const typedError = error;\n          reject(typedError.name + \": \" + typedError.message);\n        } else {\n          reject(error);\n        }\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["src/common.speech/Transcription/ConversationManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IRequestOptions,\r\n    IRestParams,\r\n    IRestResponse,\r\n    RestMessageAdapter,\r\n    RestRequestType\r\n} from \"../../common.browser/Exports\";\r\nimport { IErrorMessages, IStringDictionary } from \"../../common/Exports\";\r\nimport { Contracts } from \"../../sdk/Contracts\";\r\nimport { PropertyCollection, PropertyId } from \"../../sdk/Exports\";\r\nimport { ConversationConnectionConfig } from \"./ConversationConnectionConfig\";\r\nimport { IConversationResponseError, IInternalConversation } from \"./ConversationTranslatorInterfaces\";\r\n\r\nexport class ConversationManager {\r\n\r\n    private privRequestParams: IRestParams;\r\n    private privErrors: IErrorMessages;\r\n    private privHost: string;\r\n    private privApiVersion: string;\r\n    private privRestPath: string;\r\n    private privRestAdapter: RestMessageAdapter;\r\n\r\n    public constructor() {\r\n        //\r\n        this.privRequestParams = ConversationConnectionConfig.configParams;\r\n        this.privErrors = ConversationConnectionConfig.restErrors;\r\n        this.privHost = ConversationConnectionConfig.host;\r\n        this.privApiVersion = ConversationConnectionConfig.apiVersion;\r\n        this.privRestPath = ConversationConnectionConfig.restPath;\r\n        this.privRestAdapter = new RestMessageAdapter({});\r\n    }\r\n\r\n    /**\r\n     * Make a POST request to the Conversation Manager service endpoint to create or join a conversation.\r\n     * @param args\r\n     * @param conversationCode\r\n     * @param callback\r\n     * @param errorCallback\r\n     */\r\n    public createOrJoin(args: PropertyCollection, conversationCode: string, cb?: (c: any) => void, err?: (e: string) => void): void {\r\n\r\n        try {\r\n\r\n            Contracts.throwIfNullOrUndefined(args, \"args\");\r\n\r\n            const languageCode: string = args.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, ConversationConnectionConfig.defaultLanguageCode);\r\n            const nickname: string = args.getProperty(PropertyId.ConversationTranslator_Name, \"conversation_host\");\r\n            const endpointHost: string = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\r\n            const correlationId: string = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\r\n            const subscriptionKey: string = args.getProperty(PropertyId.SpeechServiceConnection_Key);\r\n            const subscriptionRegion: string = args.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n            const authToken: string = args.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n\r\n            Contracts.throwIfNullOrWhitespace(languageCode, \"languageCode\");\r\n            Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\r\n            Contracts.throwIfNullOrWhitespace(endpointHost, \"endpointHost\");\r\n\r\n            const queryParams: IStringDictionary<string> = {};\r\n            queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\r\n            queryParams[this.privRequestParams.languageCode] = languageCode;\r\n            queryParams[this.privRequestParams.nickname] = nickname;\r\n\r\n            const headers: IStringDictionary<string> = {};\r\n            if (correlationId) {\r\n                headers[this.privRequestParams.correlationId] = correlationId;\r\n            }\r\n            headers[this.privRequestParams.clientAppId] = ConversationConnectionConfig.clientAppId;\r\n\r\n            if (conversationCode !== undefined) {\r\n                queryParams[this.privRequestParams.roomId] = conversationCode;\r\n            } else {\r\n                Contracts.throwIfNullOrUndefined(subscriptionRegion, this.privErrors.authInvalidSubscriptionRegion);\r\n                headers[this.privRequestParams.subscriptionRegion] = subscriptionRegion;\r\n                if (subscriptionKey) {\r\n                    headers[this.privRequestParams.subscriptionKey] = subscriptionKey;\r\n                } else if (authToken) {\r\n                    headers[this.privRequestParams.authorization] = `Bearer ${authToken}`;\r\n                } else {\r\n                    Contracts.throwIfNullOrUndefined(subscriptionKey, this.privErrors.authInvalidSubscriptionKey);\r\n                }\r\n            }\r\n\r\n            const config: IRequestOptions = {};\r\n            config.headers = headers;\r\n            this.privRestAdapter.options = config;\r\n\r\n            const endpoint: string = `https://${endpointHost}${this.privRestPath}`;\r\n\r\n            // TODO: support a proxy and certificate validation\r\n            this.privRestAdapter.request(RestRequestType.Post, endpoint, queryParams, null).then((response: IRestResponse): void => {\r\n\r\n                const requestId: string = RestMessageAdapter.extractHeaderValue(this.privRequestParams.requestId, response.headers);\r\n\r\n                if (!response.ok) {\r\n                    if (!!err) {\r\n                        // get the error\r\n                        let errorMessage: string = this.privErrors.invalidCreateJoinConversationResponse.replace(\"{status}\", response.status.toString());\r\n                        let errMessageRaw: IConversationResponseError;\r\n                        try {\r\n                            errMessageRaw = JSON.parse(response.data) as IConversationResponseError;\r\n                            errorMessage += ` [${errMessageRaw.error.code}: ${errMessageRaw.error.message}]`;\r\n                        } catch (e) {\r\n                            errorMessage += ` [${response.data}]`;\r\n                        }\r\n                        if (requestId) {\r\n                            errorMessage += ` ${requestId}`;\r\n                        }\r\n\r\n                        err(errorMessage);\r\n                    }\r\n                    return;\r\n                }\r\n                const conversation: IInternalConversation = JSON.parse(response.data) as IInternalConversation;\r\n                if (conversation) {\r\n                    conversation.requestId = requestId;\r\n                }\r\n                if (!!cb) {\r\n                    try {\r\n                        cb(conversation);\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(e as string);\r\n                        }\r\n                    }\r\n                    cb = undefined;\r\n                }\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            }).catch( (): void => { });\r\n\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Make a DELETE request to the Conversation Manager service endpoint to leave the conversation.\r\n     * @param args\r\n     * @param sessionToken\r\n     * @param callback\r\n     */\r\n    public leave(args: PropertyCollection, sessionToken: string): Promise<void> {\r\n        return new Promise<void>((resolve: () => void, reject: (reason: string) => void): void => {\r\n            try {\r\n\r\n                Contracts.throwIfNullOrUndefined(args, this.privErrors.invalidArgs.replace(\"{arg}\", \"config\"));\r\n                Contracts.throwIfNullOrWhitespace(sessionToken, this.privErrors.invalidArgs.replace(\"{arg}\", \"token\"));\r\n\r\n                const endpointHost: string = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\r\n                const correlationId: string = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\r\n\r\n                const queryParams: IStringDictionary<string> = {};\r\n                queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\r\n                queryParams[this.privRequestParams.sessionToken] = sessionToken;\r\n\r\n                const headers: IStringDictionary<string> = {};\r\n                if (correlationId) {\r\n                    headers[this.privRequestParams.correlationId] = correlationId;\r\n                }\r\n\r\n                const config: IRequestOptions = {};\r\n                config.headers = headers;\r\n                this.privRestAdapter.options = config;\r\n\r\n                const endpoint: string = `https://${endpointHost}${this.privRestPath}`;\r\n\r\n                // TODO: support a proxy and certificate validation\r\n                this.privRestAdapter.request(RestRequestType.Delete, endpoint, queryParams, null).then((response: IRestResponse): void => {\r\n\r\n                    if (!response.ok) {\r\n                        // ignore errors on delete\r\n                    }\r\n\r\n                    resolve();\r\n                // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                }).catch( (): void => {});\r\n\r\n            } catch (error) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    reject(typedError.name + \": \" + typedError.message);\r\n\r\n                } else {\r\n                    reject(error as string);\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}