{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n/* eslint-disable max-classes-per-file */\n\n\nimport { connectivity, type } from \"../../common.speech/Exports\";\nimport { AudioSourceInitializingEvent, AudioSourceReadyEvent, AudioStreamNodeAttachedEvent, AudioStreamNodeAttachingEvent, AudioStreamNodeDetachedEvent, ChunkedArrayBufferStream, Events, EventSource } from \"../../common/Exports\";\nimport { createNoDashGuid } from \"../../common/Guid\";\nimport { AudioStreamFormat } from \"../Exports\";\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat\";\n/**\n * Represents audio input stream used for custom audio input configurations.\n * @class AudioInputStream\n */\n\nexport class AudioInputStream {\n  /**\n   * Creates and initializes an instance.\n   * @constructor\n   */\n  constructor() {\n    return;\n  }\n  /**\n   * Creates a memory backed PushAudioInputStream with the specified audio format.\n   * @member AudioInputStream.createPushStream\n   * @function\n   * @public\n   * @param {AudioStreamFormat} format - The audio data format in which audio will be\n   * written to the push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\n   * @returns {PushAudioInputStream} The audio input stream being created.\n   */\n\n\n  static createPushStream(format) {\n    return PushAudioInputStream.create(format);\n  }\n  /**\n   * Creates a PullAudioInputStream that delegates to the specified callback interface for read()\n   * and close() methods.\n   * @member AudioInputStream.createPullStream\n   * @function\n   * @public\n   * @param {PullAudioInputStreamCallback} callback - The custom audio input object, derived from\n   * PullAudioInputStreamCallback\n   * @param {AudioStreamFormat} format - The audio data format in which audio will be returned from\n   * the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\n   * @returns {PullAudioInputStream} The audio input stream being created.\n   */\n\n\n  static createPullStream(callback, format) {\n    return PullAudioInputStream.create(callback, format); // throw new Error(\"Oops\");\n  }\n\n}\n/**\n * Represents memory backed push audio input stream used for custom audio input configurations.\n * @class PushAudioInputStream\n */\n\nexport class PushAudioInputStream extends AudioInputStream {\n  /**\n   * Creates a memory backed PushAudioInputStream with the specified audio format.\n   * @member PushAudioInputStream.create\n   * @function\n   * @public\n   * @param {AudioStreamFormat} format - The audio data format in which audio will be written to the\n   * push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\n   * @returns {PushAudioInputStream} The push audio input stream being created.\n   */\n  static create(format) {\n    return new PushAudioInputStreamImpl(format);\n  }\n\n}\n/**\n * Represents memory backed push audio input stream used for custom audio input configurations.\n * @private\n * @class PushAudioInputStreamImpl\n */\n\nexport class PushAudioInputStreamImpl extends PushAudioInputStream {\n  /**\n   * Creates and initalizes an instance with the given values.\n   * @constructor\n   * @param {AudioStreamFormat} format - The audio stream format.\n   */\n  constructor(format) {\n    super();\n\n    if (format === undefined) {\n      this.privFormat = AudioStreamFormatImpl.getDefaultInputFormat();\n    } else {\n      this.privFormat = format;\n    }\n\n    this.privEvents = new EventSource();\n    this.privId = createNoDashGuid();\n    this.privStream = new ChunkedArrayBufferStream(this.privFormat.avgBytesPerSec / 10);\n  }\n  /**\n   * Format information for the audio\n   */\n\n\n  get format() {\n    return Promise.resolve(this.privFormat);\n  }\n  /**\n   * Writes the audio data specified by making an internal copy of the data.\n   * @member PushAudioInputStreamImpl.prototype.write\n   * @function\n   * @public\n   * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\n   */\n\n\n  write(dataBuffer) {\n    this.privStream.writeStreamChunk({\n      buffer: dataBuffer,\n      isEnd: false,\n      timeReceived: Date.now()\n    });\n  }\n  /**\n   * Closes the stream.\n   * @member PushAudioInputStreamImpl.prototype.close\n   * @function\n   * @public\n   */\n\n\n  close() {\n    this.privStream.close();\n  }\n\n  id() {\n    return this.privId;\n  }\n\n  get blob() {\n    return this.attach(\"id\").then(audioNode => {\n      const data = [];\n      let bufferData = Buffer.from(\"\");\n\n      const readCycle = () => audioNode.read().then(audioStreamChunk => {\n        if (!audioStreamChunk || audioStreamChunk.isEnd) {\n          if (typeof XMLHttpRequest !== \"undefined\" && typeof Blob !== \"undefined\") {\n            return Promise.resolve(new Blob(data));\n          } else {\n            return Promise.resolve(Buffer.from(bufferData));\n          }\n        } else {\n          if (typeof Blob !== \"undefined\") {\n            data.push(audioStreamChunk.buffer);\n          } else {\n            bufferData = Buffer.concat([bufferData, this.toBuffer(audioStreamChunk.buffer)]);\n          }\n\n          return readCycle();\n        }\n      });\n\n      return readCycle();\n    });\n  }\n\n  turnOn() {\n    this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\n\n    this.onEvent(new AudioSourceReadyEvent(this.privId));\n    return;\n  }\n\n  attach(audioNodeId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\n      yield this.turnOn();\n      const stream = this.privStream;\n      this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\n      return {\n        detach: () => __awaiter(this, void 0, void 0, function* () {\n          this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n          return this.turnOff();\n        }),\n        id: () => audioNodeId,\n        read: () => stream.read()\n      };\n    });\n  }\n\n  detach(audioNodeId) {\n    this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n  }\n\n  turnOff() {\n    return;\n  }\n\n  get events() {\n    return this.privEvents;\n  }\n\n  get deviceInfo() {\n    return Promise.resolve({\n      bitspersample: this.privFormat.bitsPerSample,\n      channelcount: this.privFormat.channels,\n      connectivity: connectivity.Unknown,\n      manufacturer: \"Speech SDK\",\n      model: \"PushStream\",\n      samplerate: this.privFormat.samplesPerSec,\n      type: type.Stream\n    });\n  }\n\n  onEvent(event) {\n    this.privEvents.onEvent(event);\n    Events.instance.onEvent(event);\n  }\n\n  toBuffer(arrayBuffer) {\n    const buf = Buffer.alloc(arrayBuffer.byteLength);\n    const view = new Uint8Array(arrayBuffer);\n\n    for (let i = 0; i < buf.length; ++i) {\n      buf[i] = view[i];\n    }\n\n    return buf;\n  }\n\n}\n/*\n * Represents audio input stream used for custom audio input configurations.\n * @class PullAudioInputStream\n */\n\nexport class PullAudioInputStream extends AudioInputStream {\n  /**\n   * Creates and initializes and instance.\n   * @constructor\n   */\n  constructor() {\n    super();\n  }\n  /**\n   * Creates a PullAudioInputStream that delegates to the specified callback interface for\n   * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\n   * @member PullAudioInputStream.create\n   * @function\n   * @public\n   * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\n   * derived from PullAudioInputStreamCustomCallback\n   * @param {AudioStreamFormat} format - The audio data format in which audio will be\n   * returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\n   * @returns {PullAudioInputStream} The push audio input stream being created.\n   */\n\n\n  static create(callback, format) {\n    return new PullAudioInputStreamImpl(callback, format);\n  }\n\n}\n/**\n * Represents audio input stream used for custom audio input configurations.\n * @private\n * @class PullAudioInputStreamImpl\n */\n\nexport class PullAudioInputStreamImpl extends PullAudioInputStream {\n  /**\n   * Creates a PullAudioInputStream that delegates to the specified callback interface for\n   * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\n   * @constructor\n   * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\n   * derived from PullAudioInputStreamCustomCallback\n   * @param {AudioStreamFormat} format - The audio data format in which audio will be\n   * returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\n   */\n  constructor(callback, format) {\n    super();\n\n    if (undefined === format) {\n      this.privFormat = AudioStreamFormat.getDefaultInputFormat();\n    } else {\n      this.privFormat = format;\n    }\n\n    this.privEvents = new EventSource();\n    this.privId = createNoDashGuid();\n    this.privCallback = callback;\n    this.privIsClosed = false;\n    this.privBufferSize = this.privFormat.avgBytesPerSec / 10;\n  }\n  /**\n   * Format information for the audio\n   */\n\n\n  get format() {\n    return Promise.resolve(this.privFormat);\n  }\n  /**\n   * Closes the stream.\n   * @member PullAudioInputStreamImpl.prototype.close\n   * @function\n   * @public\n   */\n\n\n  close() {\n    this.privIsClosed = true;\n    this.privCallback.close();\n  }\n\n  id() {\n    return this.privId;\n  }\n\n  get blob() {\n    return Promise.reject(\"Not implemented\");\n  }\n\n  turnOn() {\n    this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\n\n    this.onEvent(new AudioSourceReadyEvent(this.privId));\n    return;\n  }\n\n  attach(audioNodeId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\n      yield this.turnOn();\n      this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\n      return {\n        detach: () => {\n          this.privCallback.close();\n          this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n          return this.turnOff();\n        },\n        id: () => audioNodeId,\n        read: () => {\n          let totalBytes = 0;\n          let transmitBuff; // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\n\n          while (totalBytes < this.privBufferSize) {\n            // Sizing the read buffer to the delta between the perfect size and what's left means we won't ever get too much\n            // data back.\n            const readBuff = new ArrayBuffer(this.privBufferSize - totalBytes);\n            const pulledBytes = this.privCallback.read(readBuff); // If there is no return buffer yet defined, set the return buffer to the that was just populated.\n            // This was, if we have enough data there's no copy penalty, but if we don't we have a buffer that's the\n            // preferred size allocated.\n\n            if (undefined === transmitBuff) {\n              transmitBuff = readBuff;\n            } else {\n              // Not the first bite at the apple, so fill the return buffer with the data we got back.\n              const intView = new Int8Array(transmitBuff);\n              intView.set(new Int8Array(readBuff), totalBytes);\n            } // If there are no bytes to read, just break out and be done.\n\n\n            if (0 === pulledBytes) {\n              break;\n            }\n\n            totalBytes += pulledBytes;\n          }\n\n          return Promise.resolve({\n            buffer: transmitBuff.slice(0, totalBytes),\n            isEnd: this.privIsClosed || totalBytes === 0,\n            timeReceived: Date.now()\n          });\n        }\n      };\n    });\n  }\n\n  detach(audioNodeId) {\n    this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n  }\n\n  turnOff() {\n    return;\n  }\n\n  get events() {\n    return this.privEvents;\n  }\n\n  get deviceInfo() {\n    return Promise.resolve({\n      bitspersample: this.privFormat.bitsPerSample,\n      channelcount: this.privFormat.channels,\n      connectivity: connectivity.Unknown,\n      manufacturer: \"Speech SDK\",\n      model: \"PullStream\",\n      samplerate: this.privFormat.samplesPerSec,\n      type: type.Stream\n    });\n  }\n\n  onEvent(event) {\n    this.privEvents.onEvent(event);\n    Events.instance.onEvent(event);\n  }\n\n}","map":{"version":3,"sources":["src/sdk/Audio/AudioInputStream.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    connectivity,\r\n    ISpeechConfigAudioDevice,\r\n    type,\r\n} from \"../../common.speech/Exports\";\r\nimport {\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    ChunkedArrayBufferStream,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStreamChunk,\r\n    Stream,\r\n} from \"../../common/Exports\";\r\nimport { createNoDashGuid } from \"../../common/Guid\";\r\nimport { AudioStreamFormat, PullAudioInputStreamCallback } from \"../Exports\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat\";\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @class AudioInputStream\r\n */\r\nexport abstract class AudioInputStream {\r\n\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\r\n     * @member AudioInputStream.createPushStream\r\n     * @function\r\n     * @public\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     * written to the push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PushAudioInputStream} The audio input stream being created.\r\n     */\r\n    public static createPushStream(format?: AudioStreamFormat): PushAudioInputStream {\r\n        return PushAudioInputStream.create(format);\r\n    }\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for read()\r\n     * and close() methods.\r\n     * @member AudioInputStream.createPullStream\r\n     * @function\r\n     * @public\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object, derived from\r\n     * PullAudioInputStreamCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be returned from\r\n     * the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PullAudioInputStream} The audio input stream being created.\r\n     */\r\n    public static createPullStream(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat): PullAudioInputStream {\r\n        return PullAudioInputStream.create(callback, format);\r\n        // throw new Error(\"Oops\");\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio input stream used for custom audio input configurations.\r\n * @class PushAudioInputStream\r\n */\r\nexport abstract class PushAudioInputStream extends AudioInputStream {\r\n\r\n    /**\r\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\r\n     * @member PushAudioInputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be written to the\r\n     * push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PushAudioInputStream} The push audio input stream being created.\r\n     */\r\n    public static create(format?: AudioStreamFormat): PushAudioInputStream {\r\n        return new PushAudioInputStreamImpl(format);\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PushAudioInputStream.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public abstract write(dataBuffer: ArrayBuffer): void;\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PushAudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class PushAudioInputStreamImpl\r\n */\r\nexport class PushAudioInputStreamImpl extends PushAudioInputStream implements IAudioSource {\r\n\r\n    private privFormat: AudioStreamFormatImpl;\r\n    private privId: string;\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n    private privStream: Stream<ArrayBuffer>;\r\n\r\n    /**\r\n     * Creates and initalizes an instance with the given values.\r\n     * @constructor\r\n     * @param {AudioStreamFormat} format - The audio stream format.\r\n     */\r\n    public constructor(format?: AudioStreamFormat) {\r\n        super();\r\n        if (format === undefined) {\r\n            this.privFormat = AudioStreamFormatImpl.getDefaultInputFormat();\r\n        } else {\r\n            this.privFormat = format as AudioStreamFormatImpl;\r\n        }\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privId = createNoDashGuid();\r\n        this.privStream = new ChunkedArrayBufferStream(this.privFormat.avgBytesPerSec / 10);\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return Promise.resolve(this.privFormat);\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PushAudioInputStreamImpl.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public write(dataBuffer: ArrayBuffer): void {\r\n        this.privStream.writeStreamChunk({\r\n            buffer: dataBuffer,\r\n            isEnd: false,\r\n            timeReceived: Date.now()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PushAudioInputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privStream.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public get blob(): Promise<Blob | Buffer> {\r\n        return this.attach(\"id\").then<Blob | Buffer>((audioNode: IAudioStreamNode): Promise<Blob | Buffer> => {\r\n            const data: ArrayBuffer[] = [];\r\n            let bufferData = Buffer.from(\"\");\r\n            const readCycle = (): Promise<Blob | Buffer> =>\r\n                audioNode.read().then<Blob | Buffer>((audioStreamChunk: IStreamChunk<ArrayBuffer>): Promise<Blob | Buffer> => {\r\n                    if (!audioStreamChunk || audioStreamChunk.isEnd) {\r\n                        if (typeof (XMLHttpRequest) !== \"undefined\" && typeof (Blob) !== \"undefined\") {\r\n                            return Promise.resolve(new Blob(data));\r\n                        } else {\r\n                            return Promise.resolve(Buffer.from(bufferData));\r\n                        }\r\n                    } else {\r\n                        if (typeof (Blob) !== \"undefined\") {\r\n                            data.push(audioStreamChunk.buffer);\r\n                        } else {\r\n                            bufferData = Buffer.concat([bufferData, this.toBuffer(audioStreamChunk.buffer)]);\r\n                        }\r\n                        return readCycle();\r\n                    }\r\n                });\r\n            return readCycle();\r\n        });\r\n    }\r\n\r\n    public turnOn(): Promise<void> {\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return;\r\n    }\r\n\r\n    public async attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        await this.turnOn();\r\n        const stream = this.privStream;\r\n        this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n        return {\r\n            detach: async (): Promise<void> => {\r\n                this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                return this.turnOff();\r\n            },\r\n            id: (): string => audioNodeId,\r\n            read: (): Promise<IStreamChunk<ArrayBuffer>> => stream.read(),\r\n        };\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n    }\r\n\r\n    public turnOff(): Promise<void> {\r\n        return;\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return Promise.resolve({\r\n            bitspersample: this.privFormat.bitsPerSample,\r\n            channelcount: this.privFormat.channels,\r\n            connectivity: connectivity.Unknown,\r\n            manufacturer: \"Speech SDK\",\r\n            model: \"PushStream\",\r\n            samplerate: this.privFormat.samplesPerSec,\r\n            type: type.Stream,\r\n        });\r\n    }\r\n\r\n    private onEvent(event: AudioSourceEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private toBuffer(arrayBuffer: ArrayBuffer): Buffer {\r\n        const buf: Buffer = Buffer.alloc(arrayBuffer.byteLength);\r\n        const view: Uint8Array = new Uint8Array(arrayBuffer);\r\n        for (let i = 0; i < buf.length; ++i) {\r\n            buf[i] = view[i];\r\n        }\r\n        return buf;\r\n    }\r\n}\r\n\r\n/*\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @class PullAudioInputStream\r\n */\r\nexport abstract class PullAudioInputStream extends AudioInputStream {\r\n    /**\r\n     * Creates and initializes and instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n super();\r\n}\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for\r\n     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\r\n     * @member PullAudioInputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\r\n     * derived from PullAudioInputStreamCustomCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     * returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PullAudioInputStream} The push audio input stream being created.\r\n     */\r\n    public static create(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat): PullAudioInputStream {\r\n        return new PullAudioInputStreamImpl(callback, format as AudioStreamFormatImpl);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member PullAudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class PullAudioInputStreamImpl\r\n */\r\nexport class PullAudioInputStreamImpl extends PullAudioInputStream implements IAudioSource {\r\n\r\n    private privCallback: PullAudioInputStreamCallback;\r\n    private privFormat: AudioStreamFormatImpl;\r\n    private privId: string;\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n    private privIsClosed: boolean;\r\n    private privBufferSize: number;\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for\r\n     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\r\n     * @constructor\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\r\n     * derived from PullAudioInputStreamCustomCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     * returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     */\r\n    public constructor(callback: PullAudioInputStreamCallback, format?: AudioStreamFormatImpl) {\r\n        super();\r\n        if (undefined === format) {\r\n            this.privFormat = AudioStreamFormat.getDefaultInputFormat() as AudioStreamFormatImpl;\r\n        } else {\r\n            this.privFormat = format;\r\n        }\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privId = createNoDashGuid();\r\n        this.privCallback = callback;\r\n        this.privIsClosed = false;\r\n        this.privBufferSize = this.privFormat.avgBytesPerSec / 10;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return Promise.resolve(this.privFormat);\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioInputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privIsClosed = true;\r\n        this.privCallback.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public get blob(): Promise<Blob | Buffer> {\r\n        return Promise.reject(\"Not implemented\");\r\n    }\r\n\r\n    public turnOn(): Promise<void> {\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return;\r\n    }\r\n\r\n    public async attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        await this.turnOn();\r\n        this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                this.privCallback.close();\r\n                this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                return this.turnOff();\r\n            },\r\n            id: (): string => audioNodeId,\r\n            read: (): Promise<IStreamChunk<ArrayBuffer>> => {\r\n                let totalBytes: number = 0;\r\n                let transmitBuff: ArrayBuffer;\r\n                // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\r\n                while (totalBytes < this.privBufferSize) {\r\n                    // Sizing the read buffer to the delta between the perfect size and what's left means we won't ever get too much\r\n                    // data back.\r\n                    const readBuff: ArrayBuffer = new ArrayBuffer(this.privBufferSize - totalBytes);\r\n                    const pulledBytes: number = this.privCallback.read(readBuff);\r\n                    // If there is no return buffer yet defined, set the return buffer to the that was just populated.\r\n                    // This was, if we have enough data there's no copy penalty, but if we don't we have a buffer that's the\r\n                    // preferred size allocated.\r\n                    if (undefined === transmitBuff) {\r\n                        transmitBuff = readBuff;\r\n                    } else {\r\n                        // Not the first bite at the apple, so fill the return buffer with the data we got back.\r\n                        const intView: Int8Array = new Int8Array(transmitBuff);\r\n                        intView.set(new Int8Array(readBuff), totalBytes);\r\n                    }\r\n                    // If there are no bytes to read, just break out and be done.\r\n                    if (0 === pulledBytes) {\r\n                        break;\r\n                    }\r\n                    totalBytes += pulledBytes;\r\n                }\r\n                return Promise.resolve<IStreamChunk<ArrayBuffer>>({\r\n                    buffer: transmitBuff.slice(0, totalBytes),\r\n                    isEnd: this.privIsClosed || totalBytes === 0,\r\n                    timeReceived: Date.now(),\r\n                });\r\n            },\r\n        };\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n    }\r\n\r\n    public turnOff(): Promise<void> {\r\n        return;\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return Promise.resolve({\r\n            bitspersample: this.privFormat.bitsPerSample,\r\n            channelcount: this.privFormat.channels,\r\n            connectivity: connectivity.Unknown,\r\n            manufacturer: \"Speech SDK\",\r\n            model: \"PullStream\",\r\n            samplerate: this.privFormat.samplesPerSec,\r\n            type: type.Stream,\r\n        });\r\n    }\r\n\r\n    private onEvent(event: AudioSourceEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}