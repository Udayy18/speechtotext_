{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ServicePropertiesPropertyName } from \"../common.speech/Exports\";\nimport { PropertyId } from \"../sdk/Exports\";\nimport { QueryParameterNames } from \"./QueryParameterNames\";\nexport class ConnectionFactoryBase {\n  static getHostSuffix(region) {\n    if (!!region) {\n      if (region.toLowerCase().startsWith(\"china\")) {\n        return \".azure.cn\";\n      }\n\n      if (region.toLowerCase().startsWith(\"usgov\")) {\n        return \".azure.us\";\n      }\n    }\n\n    return \".microsoft.com\";\n  }\n\n  setCommonUrlParams(config, queryParams, endpoint) {\n    const propertyIdToParameterMap = new Map([[PropertyId.Speech_SegmentationSilenceTimeoutMs, QueryParameterNames.SegmentationSilenceTimeoutMs], [PropertyId.SpeechServiceConnection_EnableAudioLogging, QueryParameterNames.EnableAudioLogging], [PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs, QueryParameterNames.EndSilenceTimeoutMs], [PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs, QueryParameterNames.InitialSilenceTimeoutMs], [PropertyId.SpeechServiceResponse_PostProcessingOption, QueryParameterNames.Postprocessing], [PropertyId.SpeechServiceResponse_ProfanityOption, QueryParameterNames.Profanity], [PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, QueryParameterNames.EnableWordLevelTimestamps], [PropertyId.SpeechServiceResponse_StablePartialResultThreshold, QueryParameterNames.StableIntermediateThreshold]]);\n    propertyIdToParameterMap.forEach((parameterName, propertyId) => {\n      this.setUrlParameter(propertyId, parameterName, config, queryParams, endpoint);\n    });\n    const serviceProperties = JSON.parse(config.parameters.getProperty(ServicePropertiesPropertyName, \"{}\"));\n    Object.keys(serviceProperties).forEach(value => {\n      queryParams[value] = serviceProperties[value];\n    });\n  }\n\n  setUrlParameter(propId, parameterName, config, queryParams, endpoint) {\n    const value = config.parameters.getProperty(propId, undefined);\n\n    if (value && (!endpoint || endpoint.search(parameterName) === -1)) {\n      queryParams[parameterName] = value.toLocaleLowerCase();\n    }\n  }\n\n}","map":{"version":3,"sources":["src/common.speech/ConnectionFactoryBase.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SACI,6BADJ,QAEO,0BAFP;AAIA,SAAS,UAAT,QAA2B,gBAA3B;AAEA,SAAS,mBAAT,QAAoC,uBAApC;AAEA,OAAM,MAAgB,qBAAhB,CAAqC;AAEhC,SAAO,aAAP,CAAqB,MAArB,EAAmC;AACtC,QAAI,CAAC,CAAC,MAAN,EAAc;AACV,UAAI,MAAM,CAAC,WAAP,GAAqB,UAArB,CAAgC,OAAhC,CAAJ,EAA8C;AAC1C,eAAO,WAAP;AACH;;AACD,UAAI,MAAM,CAAC,WAAP,GAAqB,UAArB,CAAgC,OAAhC,CAAJ,EAA8C;AAC1C,eAAO,WAAP;AACH;AACJ;;AACD,WAAO,gBAAP;AACH;;AAOS,EAAA,kBAAkB,CACxB,MADwB,EAExB,WAFwB,EAGxB,QAHwB,EAGR;AAEhB,UAAM,wBAAwB,GAAwB,IAAI,GAAJ,CAAQ,CAC1D,CAAC,UAAU,CAAC,mCAAZ,EAAiD,mBAAmB,CAAC,4BAArE,CAD0D,EAE1D,CAAC,UAAU,CAAC,0CAAZ,EAAwD,mBAAmB,CAAC,kBAA5E,CAF0D,EAG1D,CAAC,UAAU,CAAC,2CAAZ,EAAyD,mBAAmB,CAAC,mBAA7E,CAH0D,EAI1D,CAAC,UAAU,CAAC,+CAAZ,EAA6D,mBAAmB,CAAC,uBAAjF,CAJ0D,EAK1D,CAAC,UAAU,CAAC,0CAAZ,EAAwD,mBAAmB,CAAC,cAA5E,CAL0D,EAM1D,CAAC,UAAU,CAAC,qCAAZ,EAAmD,mBAAmB,CAAC,SAAvE,CAN0D,EAO1D,CAAC,UAAU,CAAC,gDAAZ,EAA8D,mBAAmB,CAAC,yBAAlF,CAP0D,EAQ1D,CAAC,UAAU,CAAC,kDAAZ,EAAgE,mBAAmB,CAAC,2BAApF,CAR0D,CAAR,CAAtD;AAWA,IAAA,wBAAwB,CAAC,OAAzB,CAAiC,CAAC,aAAD,EAAwB,UAAxB,KAAwD;AACrF,WAAK,eAAL,CAAqB,UAArB,EAAiC,aAAjC,EAAgD,MAAhD,EAAwD,WAAxD,EAAqE,QAArE;AACH,KAFD;AAKA,UAAM,iBAAiB,GAA8B,IAAI,CAAC,KAAL,CAAW,MAAM,CAAC,UAAP,CAAkB,WAAlB,CAA8B,6BAA9B,EAA6D,IAA7D,CAAX,CAArD;AAEA,IAAA,MAAM,CAAC,IAAP,CAAY,iBAAZ,EAA+B,OAA/B,CAAwC,KAAD,IAAwB;AAC3D,MAAA,WAAW,CAAC,KAAD,CAAX,GAAqB,iBAAiB,CAAC,KAAD,CAAtC;AACH,KAFD;AAGH;;AAES,EAAA,eAAe,CACrB,MADqB,EAErB,aAFqB,EAGrB,MAHqB,EAIrB,WAJqB,EAKrB,QALqB,EAKL;AAEhB,UAAM,KAAK,GAAW,MAAM,CAAC,UAAP,CAAkB,WAAlB,CAA8B,MAA9B,EAAsC,SAAtC,CAAtB;;AAEA,QAAI,KAAK,KAAK,CAAC,QAAD,IAAa,QAAQ,CAAC,MAAT,CAAgB,aAAhB,MAAmC,CAAC,CAAtD,CAAT,EAAmE;AAC/D,MAAA,WAAW,CAAC,aAAD,CAAX,GAA6B,KAAK,CAAC,iBAAN,EAA7B;AACH;AACJ;;AA3DsC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ServicePropertiesPropertyName,\r\n} from \"../common.speech/Exports\";\r\nimport { IConnection, IStringDictionary } from \"../common/Exports\";\r\nimport { PropertyId } from \"../sdk/Exports\";\r\nimport { AuthInfo, IConnectionFactory, RecognizerConfig } from \"./Exports\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames\";\r\n\r\nexport abstract class ConnectionFactoryBase implements IConnectionFactory {\r\n\r\n    public static getHostSuffix(region: string): string {\r\n        if (!!region) {\r\n            if (region.toLowerCase().startsWith(\"china\")) {\r\n                return \".azure.cn\";\r\n            }\r\n            if (region.toLowerCase().startsWith(\"usgov\")) {\r\n                return \".azure.us\";\r\n            }\r\n        }\r\n        return \".microsoft.com\";\r\n    }\r\n\r\n    public abstract create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection;\r\n\r\n    protected setCommonUrlParams(\r\n        config: RecognizerConfig,\r\n        queryParams: IStringDictionary<string>,\r\n        endpoint: string): void {\r\n\r\n        const propertyIdToParameterMap: Map<number, string> = new Map([\r\n            [PropertyId.Speech_SegmentationSilenceTimeoutMs, QueryParameterNames.SegmentationSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceConnection_EnableAudioLogging, QueryParameterNames.EnableAudioLogging],\r\n            [PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs, QueryParameterNames.EndSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs, QueryParameterNames.InitialSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceResponse_PostProcessingOption, QueryParameterNames.Postprocessing],\r\n            [PropertyId.SpeechServiceResponse_ProfanityOption, QueryParameterNames.Profanity],\r\n            [PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, QueryParameterNames.EnableWordLevelTimestamps],\r\n            [PropertyId.SpeechServiceResponse_StablePartialResultThreshold, QueryParameterNames.StableIntermediateThreshold],\r\n        ]);\r\n\r\n        propertyIdToParameterMap.forEach((parameterName: string, propertyId: PropertyId): void => {\r\n            this.setUrlParameter(propertyId, parameterName, config, queryParams, endpoint);\r\n        });\r\n\r\n\r\n        const serviceProperties: IStringDictionary<string> = JSON.parse(config.parameters.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        Object.keys(serviceProperties).forEach((value: string): void => {\r\n            queryParams[value] = serviceProperties[value];\r\n        });\r\n    }\r\n\r\n    protected setUrlParameter(\r\n        propId: PropertyId,\r\n        parameterName: string,\r\n        config: RecognizerConfig,\r\n        queryParams: IStringDictionary<string>,\r\n        endpoint: string): void {\r\n\r\n        const value: string = config.parameters.getProperty(propId, undefined);\r\n\r\n        if (value && (!endpoint || endpoint.search(parameterName) === -1)) {\r\n            queryParams[parameterName] = value.toLocaleLowerCase();\r\n        }\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}