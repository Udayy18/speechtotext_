{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { ReplayableAudioNode } from \"../common.browser/Exports\";\nimport { ArgumentNullError, ConnectionState, createNoDashGuid, EventSource, MessageType, ServiceEvent, Timeout } from \"../common/Exports\";\nimport { CancellationErrorCode, CancellationReason, PropertyId, RecognitionEventArgs, SessionEventArgs } from \"../sdk/Exports\";\nimport { AgentConfig, DynamicGrammarBuilder, RequestSession, SpeechContext, SpeechDetected, type } from \"./Exports\";\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\nexport class ServiceRecognizerBase {\n  constructor(authentication, connectionFactory, audioSource, recognizerConfig, recognizer) {\n    // A promise for a configured connection.\n    // Do not consume directly, call fetchConnection instead.\n    this.privConnectionConfigurationPromise = undefined; // A promise for a connection, but one that has not had the speech context sent yet.\n    // Do not consume directly, call fetchConnection instead.\n\n    this.privConnectionPromise = undefined;\n    this.privSetTimeout = setTimeout;\n    this.privIsLiveAudio = false;\n    this.recognizeOverride = undefined;\n    this.disconnectOverride = undefined;\n    this.receiveMessageOverride = undefined;\n    this.sendPrePayloadJSONOverride = undefined;\n    this.postConnectImplOverride = undefined;\n    this.configConnectionOverride = undefined;\n\n    if (!authentication) {\n      throw new ArgumentNullError(\"authentication\");\n    }\n\n    if (!connectionFactory) {\n      throw new ArgumentNullError(\"connectionFactory\");\n    }\n\n    if (!audioSource) {\n      throw new ArgumentNullError(\"audioSource\");\n    }\n\n    if (!recognizerConfig) {\n      throw new ArgumentNullError(\"recognizerConfig\");\n    }\n\n    this.privMustReportEndOfStream = false;\n    this.privAuthentication = authentication;\n    this.privConnectionFactory = connectionFactory;\n    this.privAudioSource = audioSource;\n    this.privRecognizerConfig = recognizerConfig;\n    this.privIsDisposed = false;\n    this.privRecognizer = recognizer;\n    this.privRequestSession = new RequestSession(this.privAudioSource.id());\n    this.privConnectionEvents = new EventSource();\n    this.privServiceEvents = new EventSource();\n    this.privDynamicGrammar = new DynamicGrammarBuilder();\n    this.privSpeechContext = new SpeechContext(this.privDynamicGrammar);\n    this.privAgentConfig = new AgentConfig();\n\n    if (typeof Blob !== \"undefined\" && typeof Worker !== \"undefined\") {\n      this.privSetTimeout = Timeout.setTimeout;\n    }\n\n    this.connectionEvents.attach(connectionEvent => {\n      if (connectionEvent.name === \"ConnectionClosedEvent\") {\n        const connectionClosedEvent = connectionEvent;\n\n        if (connectionClosedEvent.statusCode === 1003 || connectionClosedEvent.statusCode === 1007 || connectionClosedEvent.statusCode === 1002 || connectionClosedEvent.statusCode === 4000 || this.privRequestSession.numConnectionAttempts > this.privRecognizerConfig.maxRetryCount) {\n          void this.cancelRecognitionLocal(CancellationReason.Error, connectionClosedEvent.statusCode === 1007 ? CancellationErrorCode.BadRequestParameters : CancellationErrorCode.ConnectionFailure, `${connectionClosedEvent.reason} websocket error code: ${connectionClosedEvent.statusCode}`);\n        }\n      }\n    });\n  }\n\n  get audioSource() {\n    return this.privAudioSource;\n  }\n\n  get speechContext() {\n    return this.privSpeechContext;\n  }\n\n  get dynamicGrammar() {\n    return this.privDynamicGrammar;\n  }\n\n  get agentConfig() {\n    return this.privAgentConfig;\n  }\n\n  set conversationTranslatorToken(token) {\n    this.privRecognizerConfig.parameters.setProperty(PropertyId.ConversationTranslator_Token, token);\n  }\n\n  set authentication(auth) {\n    this.privAuthentication = this.authentication;\n  }\n\n  isDisposed() {\n    return this.privIsDisposed;\n  }\n\n  dispose(reason) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.privIsDisposed = true;\n\n      if (this.privConnectionConfigurationPromise !== undefined) {\n        try {\n          const connection = yield this.privConnectionConfigurationPromise;\n          yield connection.dispose(reason);\n        } catch (error) {\n          // The connection is in a bad state. But we're trying to kill it, so...\n          return;\n        }\n      }\n    });\n  }\n\n  get connectionEvents() {\n    return this.privConnectionEvents;\n  }\n\n  get serviceEvents() {\n    return this.privServiceEvents;\n  }\n\n  get recognitionMode() {\n    return this.privRecognizerConfig.recognitionMode;\n  }\n\n  recognize(recoMode, successCallback, errorCallBack) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.recognizeOverride !== undefined) {\n        yield this.recognizeOverride(recoMode, successCallback, errorCallBack);\n        return;\n      } // Clear the existing configuration promise to force a re-transmission of config and context.\n\n\n      this.privConnectionConfigurationPromise = undefined;\n      this.privRecognizerConfig.recognitionMode = recoMode;\n      this.privSuccessCallback = successCallback;\n      this.privErrorCallback = errorCallBack;\n      this.privRequestSession.startNewRecognition();\n      this.privRequestSession.listenForServiceTelemetry(this.privAudioSource.events); // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\n\n      const conPromise = this.connectImpl();\n      let audioNode;\n\n      try {\n        const audioStreamNode = yield this.audioSource.attach(this.privRequestSession.audioNodeId);\n        const format = yield this.audioSource.format;\n        const deviceInfo = yield this.audioSource.deviceInfo;\n        this.privIsLiveAudio = deviceInfo.type && deviceInfo.type === type.Microphones;\n        audioNode = new ReplayableAudioNode(audioStreamNode, format.avgBytesPerSec);\n        yield this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\n        this.privRecognizerConfig.SpeechServiceConfig.Context.audio = {\n          source: deviceInfo\n        };\n      } catch (error) {\n        yield this.privRequestSession.onStopRecognizing();\n        throw error;\n      }\n\n      try {\n        yield conPromise;\n      } catch (error) {\n        yield this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, error);\n        return;\n      }\n\n      const sessionStartEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\n\n      if (!!this.privRecognizer.sessionStarted) {\n        this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\n      }\n\n      void this.receiveMessage();\n      const audioSendPromise = this.sendAudio(audioNode);\n      audioSendPromise.catch(error => __awaiter(this, void 0, void 0, function* () {\n        yield this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\n      }));\n      return;\n    });\n  }\n\n  stopRecognizing() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privRequestSession.isRecognizing) {\n        try {\n          yield this.audioSource.turnOff();\n          yield this.sendFinalAudio();\n          yield this.privRequestSession.onStopRecognizing();\n          yield this.privRequestSession.turnCompletionPromise;\n        } finally {\n          yield this.privRequestSession.dispose();\n        }\n      }\n\n      return;\n    });\n  }\n\n  connect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.connectImpl();\n      return Promise.resolve();\n    });\n  }\n\n  connectAsync(cb, err) {\n    this.connectImpl().then(() => {\n      try {\n        if (!!cb) {\n          cb();\n        }\n      } catch (e) {\n        if (!!err) {\n          err(e);\n        }\n      }\n    }, reason => {\n      try {\n        if (!!err) {\n          err(reason);\n        }\n        /* eslint-disable no-empty */\n\n      } catch (error) {}\n    });\n  }\n\n  disconnect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.NoError, \"Disconnecting\");\n\n      if (this.disconnectOverride !== undefined) {\n        yield this.disconnectOverride();\n      }\n\n      if (this.privConnectionPromise !== undefined) {\n        try {\n          yield (yield this.privConnectionPromise).dispose();\n        } catch (error) {}\n      }\n\n      this.privConnectionPromise = undefined;\n    });\n  } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  sendMessage(message) {\n    return;\n  }\n\n  sendNetworkMessage(path, payload) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const type = typeof payload === \"string\" ? MessageType.Text : MessageType.Binary;\n      const contentType = typeof payload === \"string\" ? \"application/json\" : \"\";\n      const connection = yield this.fetchConnection();\n      return connection.send(new SpeechConnectionMessage(type, path, this.privRequestSession.requestId, contentType, payload));\n    });\n  }\n\n  set activityTemplate(messagePayload) {\n    this.privActivityTemplate = messagePayload;\n  }\n\n  get activityTemplate() {\n    return this.privActivityTemplate;\n  }\n\n  sendTelemetryData() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const telemetryData = this.privRequestSession.getTelemetry();\n\n      if (ServiceRecognizerBase.telemetryDataEnabled !== true || this.privIsDisposed || null === telemetryData) {\n        return;\n      }\n\n      if (!!ServiceRecognizerBase.telemetryData) {\n        try {\n          ServiceRecognizerBase.telemetryData(telemetryData);\n          /* eslint-disable no-empty */\n        } catch (_a) {}\n      }\n\n      const connection = yield this.fetchConnection();\n      yield connection.send(new SpeechConnectionMessage(MessageType.Text, \"telemetry\", this.privRequestSession.requestId, \"application/json\", telemetryData));\n    });\n  } // Cancels recognition.\n\n\n  cancelRecognitionLocal(cancellationReason, errorCode, error) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!!this.privRequestSession.isRecognizing) {\n        yield this.privRequestSession.onStopRecognizing();\n        this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, cancellationReason, errorCode, error);\n      }\n    });\n  }\n\n  receiveMessage() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (this.privIsDisposed) {\n          // We're done.\n          return;\n        }\n\n        let connection = yield this.fetchConnection();\n        const message = yield connection.read();\n\n        if (this.receiveMessageOverride !== undefined) {\n          return this.receiveMessageOverride();\n        } // indicates we are draining the queue and it came with no message;\n\n\n        if (!message) {\n          if (!this.privRequestSession.isRecognizing) {\n            return;\n          } else {\n            return this.receiveMessage();\n          }\n        }\n\n        this.privServiceHasSentMessage = true;\n        const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\n\n        if (connectionMessage.requestId.toLowerCase() === this.privRequestSession.requestId.toLowerCase()) {\n          switch (connectionMessage.path.toLowerCase()) {\n            case \"turn.start\":\n              this.privMustReportEndOfStream = true;\n              this.privRequestSession.onServiceTurnStartResponse();\n              break;\n\n            case \"speech.startdetected\":\n              const speechStartDetected = SpeechDetected.fromJSON(connectionMessage.textBody);\n              const speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, this.privRequestSession.sessionId);\n\n              if (!!this.privRecognizer.speechStartDetected) {\n                this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\n              }\n\n              break;\n\n            case \"speech.enddetected\":\n              let json;\n\n              if (connectionMessage.textBody.length > 0) {\n                json = connectionMessage.textBody;\n              } else {\n                // If the request was empty, the JSON returned is empty.\n                json = \"{ Offset: 0 }\";\n              }\n\n              const speechStopDetected = SpeechDetected.fromJSON(json); // Only shrink the buffers for continuous recognition.\n              // For single shot, the speech.phrase message will come after the speech.end and it should own buffer shrink.\n\n              if (this.privRecognizerConfig.isContinuousRecognition) {\n                this.privRequestSession.onServiceRecognized(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset);\n              }\n\n              const speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\n\n              if (!!this.privRecognizer.speechEndDetected) {\n                this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\n              }\n\n              break;\n\n            case \"turn.end\":\n              yield this.sendTelemetryData();\n\n              if (this.privRequestSession.isSpeechEnded && this.privMustReportEndOfStream) {\n                this.privMustReportEndOfStream = false;\n                yield this.cancelRecognitionLocal(CancellationReason.EndOfStream, CancellationErrorCode.NoError, undefined);\n              }\n\n              const sessionStopEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\n              yield this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition);\n\n              if (!this.privRecognizerConfig.isContinuousRecognition || this.privRequestSession.isSpeechEnded || !this.privRequestSession.isRecognizing) {\n                if (!!this.privRecognizer.sessionStopped) {\n                  this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\n                }\n\n                return;\n              } else {\n                connection = yield this.fetchConnection();\n                yield this.sendPrePayloadJSON(connection);\n              }\n\n              break;\n\n            default:\n              if (!(yield this.processTypeSpecificMessages(connectionMessage))) {\n                // here are some messages that the derived class has not processed, dispatch them to connect class\n                if (!!this.privServiceEvents) {\n                  this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\n                }\n              }\n\n          }\n        }\n\n        return this.receiveMessage();\n      } catch (error) {\n        return null;\n      }\n    });\n  }\n\n  sendSpeechContext(connection, generateNewRequestId) {\n    const speechContextJson = this.speechContext.toJSON();\n\n    if (generateNewRequestId) {\n      this.privRequestSession.onSpeechContext();\n    }\n\n    if (speechContextJson) {\n      return connection.send(new SpeechConnectionMessage(MessageType.Text, \"speech.context\", this.privRequestSession.requestId, \"application/json\", speechContextJson));\n    }\n\n    return;\n  } // Encapsulated for derived service recognizers that need to send additional JSON\n\n\n  sendPrePayloadJSON(connection, generateNewRequestId = true) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.sendPrePayloadJSONOverride !== undefined) {\n        return this.sendPrePayloadJSONOverride(connection);\n      }\n\n      yield this.sendSpeechContext(connection, generateNewRequestId);\n      yield this.sendWaveHeader(connection);\n      return;\n    });\n  }\n\n  sendWaveHeader(connection) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const format = yield this.audioSource.format; // this.writeBufferToConsole(format.header);\n\n      return connection.send(new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, \"audio/x-wav\", format.header));\n    });\n  } // Establishes a websocket connection to the end point.\n\n\n  connectImpl() {\n    if (this.privConnectionPromise !== undefined) {\n      return this.privConnectionPromise.then(connection => {\n        if (connection.state() === ConnectionState.Disconnected) {\n          this.privConnectionId = null;\n          this.privConnectionPromise = undefined;\n          this.privServiceHasSentMessage = false;\n          return this.connectImpl();\n        }\n\n        return this.privConnectionPromise;\n      }, () => {\n        this.privConnectionId = null;\n        this.privConnectionPromise = undefined;\n        this.privServiceHasSentMessage = false;\n        return this.connectImpl();\n      });\n    }\n\n    this.privConnectionPromise = this.retryableConnect(); // Attach an empty handler to allow the promise to run in the background while\n    // other startup events happen. It'll eventually be awaited on.\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n\n    this.privConnectionPromise.catch(() => {});\n\n    if (this.postConnectImplOverride !== undefined) {\n      return this.postConnectImplOverride(this.privConnectionPromise);\n    }\n\n    return this.privConnectionPromise;\n  }\n\n  sendSpeechServiceConfig(connection, requestSession, SpeechServiceConfigJson) {\n    requestSession.onSpeechContext(); // filter out anything that is not required for the service to work.\n\n    if (ServiceRecognizerBase.telemetryDataEnabled !== true) {\n      const withTelemetry = JSON.parse(SpeechServiceConfigJson);\n      const replacement = {\n        context: {\n          system: withTelemetry.context.system\n        }\n      };\n      SpeechServiceConfigJson = JSON.stringify(replacement);\n    }\n\n    if (this.privRecognizerConfig.parameters.getProperty(\"TranscriptionService_SingleChannel\", \"false\").toLowerCase() === \"true\") {\n      const json = JSON.parse(SpeechServiceConfigJson);\n      json.context.DisableReferenceChannel = \"True\";\n      json.context.MicSpec = \"1_0_0\";\n      SpeechServiceConfigJson = JSON.stringify(json);\n    }\n\n    if (SpeechServiceConfigJson) {\n      return connection.send(new SpeechConnectionMessage(MessageType.Text, \"speech.config\", requestSession.requestId, \"application/json\", SpeechServiceConfigJson));\n    }\n\n    return;\n  }\n\n  fetchConnection() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privConnectionConfigurationPromise !== undefined) {\n        return this.privConnectionConfigurationPromise.then(connection => {\n          if (connection.state() === ConnectionState.Disconnected) {\n            this.privConnectionId = null;\n            this.privConnectionConfigurationPromise = undefined;\n            this.privServiceHasSentMessage = false;\n            return this.fetchConnection();\n          }\n\n          return this.privConnectionConfigurationPromise;\n        }, () => {\n          this.privConnectionId = null;\n          this.privConnectionConfigurationPromise = undefined;\n          this.privServiceHasSentMessage = false;\n          return this.fetchConnection();\n        });\n      }\n\n      this.privConnectionConfigurationPromise = this.configureConnection();\n      return yield this.privConnectionConfigurationPromise;\n    });\n  }\n\n  sendAudio(audioStreamNode) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const audioFormat = yield this.audioSource.format; // The time we last sent data to the service.\n\n      let nextSendTime = Date.now(); // Max amount to send before we start to throttle\n\n      const fastLaneSizeMs = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-TransmitLengthBeforThrottleMs\", \"5000\");\n      const maxSendUnthrottledBytes = audioFormat.avgBytesPerSec / 1000 * parseInt(fastLaneSizeMs, 10);\n      const startRecogNumber = this.privRequestSession.recogNumber;\n\n      const readAndUploadCycle = () => __awaiter(this, void 0, void 0, function* () {\n        // If speech is done, stop sending audio.\n        if (!this.privIsDisposed && !this.privRequestSession.isSpeechEnded && this.privRequestSession.isRecognizing && this.privRequestSession.recogNumber === startRecogNumber) {\n          const connection = yield this.fetchConnection();\n          const audioStreamChunk = yield audioStreamNode.read(); // we have a new audio chunk to upload.\n\n          if (this.privRequestSession.isSpeechEnded) {\n            // If service already recognized audio end then don't send any more audio\n            return;\n          }\n\n          let payload;\n          let sendDelay;\n\n          if (!audioStreamChunk || audioStreamChunk.isEnd) {\n            payload = null;\n            sendDelay = 0;\n          } else {\n            payload = audioStreamChunk.buffer;\n            this.privRequestSession.onAudioSent(payload.byteLength);\n\n            if (maxSendUnthrottledBytes >= this.privRequestSession.bytesSent) {\n              sendDelay = 0;\n            } else {\n              sendDelay = Math.max(0, nextSendTime - Date.now());\n            }\n          }\n\n          if (0 !== sendDelay) {\n            yield this.delay(sendDelay);\n          }\n\n          if (payload !== null) {\n            nextSendTime = Date.now() + payload.byteLength * 1000 / (audioFormat.avgBytesPerSec * 2);\n          } // Are we still alive?\n\n\n          if (!this.privIsDisposed && !this.privRequestSession.isSpeechEnded && this.privRequestSession.isRecognizing && this.privRequestSession.recogNumber === startRecogNumber) {\n            connection.send(new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, payload)).catch(() => {\n              // eslint-disable-next-line @typescript-eslint/no-empty-function\n              this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition).catch(() => {});\n            });\n\n            if (!(audioStreamChunk === null || audioStreamChunk === void 0 ? void 0 : audioStreamChunk.isEnd)) {\n              // this.writeBufferToConsole(payload);\n              // Regardless of success or failure, schedule the next upload.\n              // If the underlying connection was broken, the next cycle will\n              // get a new connection and re-transmit missing audio automatically.\n              return readAndUploadCycle();\n            } else {\n              // the audio stream has been closed, no need to schedule next\n              // read-upload cycle.\n              if (!this.privIsLiveAudio) {\n                this.privRequestSession.onSpeechEnded();\n              }\n            }\n          }\n        }\n      });\n\n      return readAndUploadCycle();\n    });\n  }\n\n  retryableConnect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      let isUnAuthorized = false;\n      this.privAuthFetchEventId = createNoDashGuid();\n      const sessionId = this.privRequestSession.sessionId;\n      this.privConnectionId = sessionId !== undefined ? sessionId : createNoDashGuid();\n      this.privRequestSession.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\n      let lastStatusCode = 0;\n      let lastReason = \"\";\n\n      while (this.privRequestSession.numConnectionAttempts <= this.privRecognizerConfig.maxRetryCount) {\n        // Get the auth information for the connection. This is a bit of overkill for the current API surface, but leaving the plumbing in place to be able to raise a developer-customer\n        // facing event when a connection fails to let them try and provide new auth information.\n        const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\n        const auth = yield authPromise;\n        yield this.privRequestSession.onAuthCompleted(false); // Create the connection\n\n        const connection = this.privConnectionFactory.create(this.privRecognizerConfig, auth, this.privConnectionId); // Attach the telemetry handlers.\n\n        this.privRequestSession.listenForServiceTelemetry(connection.events); // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\n        // it'll stop sending events.\n\n        connection.events.attach(event => {\n          this.connectionEvents.onEvent(event);\n        });\n        const response = yield connection.open(); // 200 == everything is fine.\n\n        if (response.statusCode === 200) {\n          yield this.privRequestSession.onConnectionEstablishCompleted(response.statusCode);\n          return Promise.resolve(connection);\n        } else if (response.statusCode === 1006) {\n          isUnAuthorized = true;\n        }\n\n        lastStatusCode = response.statusCode;\n        lastReason = response.reason;\n        this.privRequestSession.onRetryConnection();\n      }\n\n      yield this.privRequestSession.onConnectionEstablishCompleted(lastStatusCode, lastReason);\n      return Promise.reject(`Unable to contact server. StatusCode: ${lastStatusCode}, ${this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${lastReason}`);\n    });\n  }\n\n  delay(delayMs) {\n    return new Promise(resolve => this.privSetTimeout(resolve, delayMs));\n  }\n\n  writeBufferToConsole(buffer) {\n    let out = \"Buffer Size: \";\n\n    if (null === buffer) {\n      out += \"null\";\n    } else {\n      const readView = new Uint8Array(buffer);\n      out += `${buffer.byteLength}\\r\\n`;\n\n      for (let i = 0; i < buffer.byteLength; i++) {\n        out += readView[i].toString(16).padStart(2, \"0\") + \" \";\n      }\n    } // eslint-disable-next-line no-console\n\n\n    console.info(out);\n  }\n\n  sendFinalAudio() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const connection = yield this.fetchConnection();\n      yield connection.send(new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, null));\n      return;\n    });\n  } // Takes an established websocket connection to the endpoint and sends speech configuration information.\n\n\n  configureConnection() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const connection = yield this.connectImpl();\n\n      if (this.configConnectionOverride !== undefined) {\n        return this.configConnectionOverride(connection);\n      }\n\n      yield this.sendSpeechServiceConfig(connection, this.privRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize());\n      yield this.sendPrePayloadJSON(connection, false);\n      return connection;\n    });\n  }\n\n}\nServiceRecognizerBase.telemetryDataEnabled = true;","map":{"version":3,"sources":["src/common.speech/ServiceRecognizerBase.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports\";\r\nimport { ConnectionOpenResponse } from \"../common/ConnectionOpenResponse\";\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionClosedEvent,\r\n    ConnectionEvent,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    IDisposable,\r\n    IStreamChunk,\r\n    MessageType,\r\n    ServiceEvent,\r\n    Timeout\r\n} from \"../common/Exports\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"../sdk/Exports\";\r\nimport { Callback } from \"../sdk/Transcription/IConversation\";\r\nimport {\r\n    AgentConfig,\r\n    DynamicGrammarBuilder,\r\n    ISpeechConfigAudioDevice,\r\n    RecognitionMode,\r\n    RequestSession,\r\n    SpeechContext,\r\n    SpeechDetected,\r\n    type\r\n} from \"./Exports\";\r\nimport {\r\n    AuthInfo,\r\n    IAuthentication,\r\n} from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\nexport abstract class ServiceRecognizerBase implements IDisposable {\r\n    private privAuthentication: IAuthentication;\r\n    private privConnectionFactory: IConnectionFactory;\r\n\r\n    // A promise for a configured connection.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionConfigurationPromise: Promise<IConnection> = undefined;\r\n\r\n    // A promise for a connection, but one that has not had the speech context sent yet.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionPromise: Promise<IConnection> = undefined;\r\n    private privAuthFetchEventId: string;\r\n    private privIsDisposed: boolean;\r\n    private privMustReportEndOfStream: boolean;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privServiceEvents: EventSource<ServiceEvent>;\r\n    private privDynamicGrammar: DynamicGrammarBuilder;\r\n    private privAgentConfig: AgentConfig;\r\n    private privServiceHasSentMessage: boolean;\r\n    private privActivityTemplate: string;\r\n    private privSetTimeout: (cb: () => void, delay: number) => number = setTimeout;\r\n    private privAudioSource: IAudioSource;\r\n    private privIsLiveAudio: boolean = false;\r\n    protected privSpeechContext: SpeechContext;\r\n    protected privRequestSession: RequestSession;\r\n    protected privConnectionId: string;\r\n    protected privRecognizerConfig: RecognizerConfig;\r\n    protected privRecognizer: Recognizer;\r\n    protected privSuccessCallback: (e: SpeechRecognitionResult) => void;\r\n    protected privErrorCallback: (e: string) => void;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: Recognizer) {\r\n\r\n        if (!authentication) {\r\n            throw new ArgumentNullError(\"authentication\");\r\n        }\r\n\r\n        if (!connectionFactory) {\r\n            throw new ArgumentNullError(\"connectionFactory\");\r\n        }\r\n\r\n        if (!audioSource) {\r\n            throw new ArgumentNullError(\"audioSource\");\r\n        }\r\n\r\n        if (!recognizerConfig) {\r\n            throw new ArgumentNullError(\"recognizerConfig\");\r\n        }\r\n\r\n        this.privMustReportEndOfStream = false;\r\n        this.privAuthentication = authentication;\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.privAudioSource = audioSource;\r\n        this.privRecognizerConfig = recognizerConfig;\r\n        this.privIsDisposed = false;\r\n        this.privRecognizer = recognizer;\r\n        this.privRequestSession = new RequestSession(this.privAudioSource.id());\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privServiceEvents = new EventSource<ServiceEvent>();\r\n        this.privDynamicGrammar = new DynamicGrammarBuilder();\r\n        this.privSpeechContext = new SpeechContext(this.privDynamicGrammar);\r\n        this.privAgentConfig = new AgentConfig();\r\n        if (typeof (Blob) !== \"undefined\" && typeof (Worker) !== \"undefined\") {\r\n            this.privSetTimeout = Timeout.setTimeout;\r\n        }\r\n\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                const connectionClosedEvent = connectionEvent as ConnectionClosedEvent;\r\n                if (connectionClosedEvent.statusCode === 1003 ||\r\n                    connectionClosedEvent.statusCode === 1007 ||\r\n                    connectionClosedEvent.statusCode === 1002 ||\r\n                    connectionClosedEvent.statusCode === 4000 ||\r\n                    this.privRequestSession.numConnectionAttempts > this.privRecognizerConfig.maxRetryCount\r\n                ) {\r\n                    void this.cancelRecognitionLocal(CancellationReason.Error,\r\n                        connectionClosedEvent.statusCode === 1007 ? CancellationErrorCode.BadRequestParameters : CancellationErrorCode.ConnectionFailure,\r\n                        `${connectionClosedEvent.reason} websocket error code: ${connectionClosedEvent.statusCode}`);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public get audioSource(): IAudioSource {\r\n        return this.privAudioSource;\r\n    }\r\n\r\n    public get speechContext(): SpeechContext {\r\n        return this.privSpeechContext;\r\n    }\r\n\r\n    public get dynamicGrammar(): DynamicGrammarBuilder {\r\n        return this.privDynamicGrammar;\r\n    }\r\n\r\n    public get agentConfig(): AgentConfig {\r\n        return this.privAgentConfig;\r\n    }\r\n\r\n    public set conversationTranslatorToken(token: string) {\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.ConversationTranslator_Token, token);\r\n    }\r\n\r\n    public set authentication(auth: IAuthentication) {\r\n        this.privAuthentication = this.authentication;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        this.privIsDisposed = true;\r\n        if (this.privConnectionConfigurationPromise !== undefined) {\r\n            try {\r\n                const connection: IConnection = await this.privConnectionConfigurationPromise;\r\n                await connection.dispose(reason);\r\n            } catch (error) {\r\n                // The connection is in a bad state. But we're trying to kill it, so...\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    public get connectionEvents(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    public get serviceEvents(): EventSource<ServiceEvent> {\r\n        return this.privServiceEvents;\r\n    }\r\n\r\n    public get recognitionMode(): RecognitionMode {\r\n        return this.privRecognizerConfig.recognitionMode;\r\n    }\r\n\r\n    protected recognizeOverride: (recoMode: RecognitionMode, sc: (e: SpeechRecognitionResult) => void, ec: (e: string) => void) => Promise<void> = undefined;\r\n\r\n    public async recognize(\r\n        recoMode: RecognitionMode,\r\n        successCallback: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack: (e: string) => void,\r\n    ): Promise<void> {\r\n\r\n        if (this.recognizeOverride !== undefined) {\r\n            await this.recognizeOverride(recoMode, successCallback, errorCallBack);\r\n            return;\r\n        }\r\n        // Clear the existing configuration promise to force a re-transmission of config and context.\r\n        this.privConnectionConfigurationPromise = undefined;\r\n        this.privRecognizerConfig.recognitionMode = recoMode;\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallBack;\r\n\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privAudioSource.events);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        let audioNode: ReplayableAudioNode;\r\n\r\n        try {\r\n            const audioStreamNode: IAudioStreamNode = await this.audioSource.attach(this.privRequestSession.audioNodeId);\r\n            const format: AudioStreamFormatImpl = await this.audioSource.format;\r\n            const deviceInfo: ISpeechConfigAudioDevice = await this.audioSource.deviceInfo;\r\n            this.privIsLiveAudio = deviceInfo.type && deviceInfo.type === type.Microphones;\r\n\r\n            audioNode = new ReplayableAudioNode(audioStreamNode, format.avgBytesPerSec);\r\n            await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n            this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n        } catch (error) {\r\n            await this.privRequestSession.onStopRecognizing();\r\n            throw error;\r\n        }\r\n\r\n        try {\r\n            await conPromise;\r\n        } catch (error) {\r\n            await this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, error as string);\r\n            return;\r\n        }\r\n\r\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n        if (!!this.privRecognizer.sessionStarted) {\r\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n        }\r\n\r\n        void this.receiveMessage();\r\n        const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n        audioSendPromise.catch(async (error: string): Promise<void> => {\r\n            await this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n\r\n        return;\r\n    }\r\n\r\n    public async stopRecognizing(): Promise<void> {\r\n        if (this.privRequestSession.isRecognizing) {\r\n            try {\r\n                await this.audioSource.turnOff();\r\n                await this.sendFinalAudio();\r\n                await this.privRequestSession.onStopRecognizing();\r\n                await this.privRequestSession.turnCompletionPromise;\r\n            } finally {\r\n                await this.privRequestSession.dispose();\r\n            }\r\n        }\r\n        return;\r\n    }\r\n\r\n    public async connect(): Promise<void> {\r\n        await this.connectImpl();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public connectAsync(cb?: Callback, err?: Callback): void {\r\n        this.connectImpl().then((): void => {\r\n            try {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }\r\n        }, (reason: any): void => {\r\n            try {\r\n                if (!!err) {\r\n                    err(reason);\r\n                }\r\n                /* eslint-disable no-empty */\r\n            } catch (error) {\r\n            }\r\n        });\r\n    }\r\n\r\n    protected disconnectOverride: () => Promise<void> = undefined;\r\n\r\n    public async disconnect(): Promise<void> {\r\n        await this.cancelRecognitionLocal(CancellationReason.Error,\r\n            CancellationErrorCode.NoError,\r\n            \"Disconnecting\");\r\n\r\n        if (this.disconnectOverride !== undefined) {\r\n            await this.disconnectOverride();\r\n        }\r\n\r\n        if (this.privConnectionPromise !== undefined) {\r\n            try {\r\n                await (await this.privConnectionPromise).dispose();\r\n            } catch (error) {\r\n\r\n            }\r\n        }\r\n        this.privConnectionPromise = undefined;\r\n    }\r\n\r\n    // Called when telemetry data is sent to the service.\r\n    // Used for testing Telemetry capture.\r\n    public static telemetryData: (json: string) => void;\r\n    public static telemetryDataEnabled: boolean = true;\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public sendMessage(message: string): Promise<void> {\r\n        return;\r\n    }\r\n\r\n    public async sendNetworkMessage(path: string, payload: string | ArrayBuffer): Promise<void> {\r\n        const type: MessageType = typeof payload === \"string\" ? MessageType.Text : MessageType.Binary;\r\n        const contentType: string = typeof payload === \"string\" ? \"application/json\" : \"\";\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        return connection.send(new SpeechConnectionMessage(type, path, this.privRequestSession.requestId, contentType, payload));\r\n    }\r\n\r\n    public set activityTemplate(messagePayload: string) {\r\n        this.privActivityTemplate = messagePayload;\r\n    }\r\n\r\n    public get activityTemplate(): string {\r\n        return this.privActivityTemplate;\r\n    }\r\n\r\n    protected abstract processTypeSpecificMessages(\r\n        connectionMessage: SpeechConnectionMessage,\r\n        successCallback?: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack?: (e: string) => void): Promise<boolean>;\r\n\r\n    protected async sendTelemetryData(): Promise<void> {\r\n        const telemetryData = this.privRequestSession.getTelemetry();\r\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true ||\r\n            this.privIsDisposed ||\r\n            null === telemetryData) {\r\n            return;\r\n        }\r\n\r\n        if (!!ServiceRecognizerBase.telemetryData) {\r\n            try {\r\n                ServiceRecognizerBase.telemetryData(telemetryData);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"telemetry\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json\",\r\n            telemetryData));\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected abstract cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void;\r\n\r\n    // Cancels recognition.\r\n    protected async cancelRecognitionLocal(\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): Promise<void> {\r\n\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            await this.privRequestSession.onStopRecognizing();\r\n\r\n            this.cancelRecognition(\r\n                this.privRequestSession.sessionId,\r\n                this.privRequestSession.requestId,\r\n                cancellationReason,\r\n                errorCode,\r\n                error);\r\n        }\r\n    }\r\n\r\n    protected receiveMessageOverride: () => Promise<void> = undefined;\r\n\r\n    protected async receiveMessage(): Promise<void> {\r\n        try {\r\n            if (this.privIsDisposed) {\r\n                // We're done.\r\n                return;\r\n            }\r\n\r\n            let connection = await this.fetchConnection();\r\n            const message = await connection.read();\r\n\r\n            if (this.receiveMessageOverride !== undefined) {\r\n                return this.receiveMessageOverride();\r\n            }\r\n\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!message) {\r\n                if (!this.privRequestSession.isRecognizing) {\r\n                    return;\r\n                } else {\r\n                    return this.receiveMessage();\r\n                }\r\n            }\r\n\r\n            this.privServiceHasSentMessage = true;\r\n            const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n            if (connectionMessage.requestId.toLowerCase() === this.privRequestSession.requestId.toLowerCase()) {\r\n                switch (connectionMessage.path.toLowerCase()) {\r\n                    case \"turn.start\":\r\n                        this.privMustReportEndOfStream = true;\r\n                        this.privRequestSession.onServiceTurnStartResponse();\r\n                        break;\r\n\r\n                    case \"speech.startdetected\":\r\n                        const speechStartDetected: SpeechDetected = SpeechDetected.fromJSON(connectionMessage.textBody);\r\n                        const speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, this.privRequestSession.sessionId);\r\n                        if (!!this.privRecognizer.speechStartDetected) {\r\n                            this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\r\n                        }\r\n                        break;\r\n\r\n                    case \"speech.enddetected\":\r\n                        let json: string;\r\n                        if (connectionMessage.textBody.length > 0) {\r\n                            json = connectionMessage.textBody;\r\n                        } else {\r\n                            // If the request was empty, the JSON returned is empty.\r\n                            json = \"{ Offset: 0 }\";\r\n                        }\r\n                        const speechStopDetected: SpeechDetected = SpeechDetected.fromJSON(json);\r\n                        // Only shrink the buffers for continuous recognition.\r\n                        // For single shot, the speech.phrase message will come after the speech.end and it should own buffer shrink.\r\n                        if (this.privRecognizerConfig.isContinuousRecognition) {\r\n                            this.privRequestSession.onServiceRecognized(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset);\r\n                        }\r\n                        const speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\r\n                        if (!!this.privRecognizer.speechEndDetected) {\r\n                            this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\r\n                        }\r\n                        break;\r\n\r\n                    case \"turn.end\":\r\n                        await this.sendTelemetryData();\r\n                        if (this.privRequestSession.isSpeechEnded && this.privMustReportEndOfStream) {\r\n                            this.privMustReportEndOfStream = false;\r\n                            await this.cancelRecognitionLocal(CancellationReason.EndOfStream, CancellationErrorCode.NoError, undefined);\r\n                        }\r\n                        const sessionStopEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n                        await this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition);\r\n                        if (!this.privRecognizerConfig.isContinuousRecognition || this.privRequestSession.isSpeechEnded || !this.privRequestSession.isRecognizing) {\r\n                            if (!!this.privRecognizer.sessionStopped) {\r\n                                this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\r\n                            }\r\n                            return;\r\n                        } else {\r\n                            connection = await this.fetchConnection();\r\n                            await this.sendPrePayloadJSON(connection);\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n                        if (!await this.processTypeSpecificMessages(connectionMessage)) {\r\n                            // here are some messages that the derived class has not processed, dispatch them to connect class\r\n                            if (!!this.privServiceEvents) {\r\n                                this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                            }\r\n                        }\r\n                }\r\n            }\r\n            return this.receiveMessage();\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    protected sendSpeechContext(connection: IConnection, generateNewRequestId: boolean): Promise<void> {\r\n        const speechContextJson = this.speechContext.toJSON();\r\n        if (generateNewRequestId) {\r\n            this.privRequestSession.onSpeechContext();\r\n        }\r\n\r\n        if (speechContextJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.context\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                speechContextJson));\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected sendPrePayloadJSONOverride: (connection: IConnection) => Promise<void> = undefined;\r\n\r\n    // Encapsulated for derived service recognizers that need to send additional JSON\r\n    protected async sendPrePayloadJSON(connection: IConnection, generateNewRequestId: boolean = true): Promise<void> {\r\n        if (this.sendPrePayloadJSONOverride !== undefined) {\r\n            return this.sendPrePayloadJSONOverride(connection);\r\n        }\r\n\r\n        await this.sendSpeechContext(connection, generateNewRequestId);\r\n        await this.sendWaveHeader(connection);\r\n        return;\r\n    }\r\n\r\n    protected async sendWaveHeader(connection: IConnection): Promise<void> {\r\n        const format: AudioStreamFormatImpl = await this.audioSource.format;\r\n        // this.writeBufferToConsole(format.header);\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Binary,\r\n            \"audio\",\r\n            this.privRequestSession.requestId,\r\n            \"audio/x-wav\",\r\n            format.header\r\n        ));\r\n    }\r\n\r\n    protected postConnectImplOverride: (connection: Promise<IConnection>) => Promise<IConnection> = undefined;\r\n\r\n    // Establishes a websocket connection to the end point.\r\n    protected connectImpl(): Promise<IConnection> {\r\n        if (this.privConnectionPromise !== undefined) {\r\n            return this.privConnectionPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionPromise = undefined;\r\n                    this.privServiceHasSentMessage = false;\r\n                    return this.connectImpl();\r\n                }\r\n                return this.privConnectionPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionPromise = undefined;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.connectImpl();\r\n            });\r\n        }\r\n\r\n        this.privConnectionPromise = this.retryableConnect();\r\n\r\n        // Attach an empty handler to allow the promise to run in the background while\r\n        // other startup events happen. It'll eventually be awaited on.\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        this.privConnectionPromise.catch((): void => { });\r\n\r\n        if (this.postConnectImplOverride !== undefined) {\r\n            return this.postConnectImplOverride(this.privConnectionPromise);\r\n        }\r\n\r\n        return this.privConnectionPromise;\r\n    }\r\n\r\n    protected configConnectionOverride: (connection: IConnection) => Promise<IConnection> = undefined;\r\n\r\n    protected sendSpeechServiceConfig(connection: IConnection, requestSession: RequestSession, SpeechServiceConfigJson: string): Promise<void> {\r\n        requestSession.onSpeechContext();\r\n        // filter out anything that is not required for the service to work.\r\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true) {\r\n            const withTelemetry: { context: { system: string } } = JSON.parse(SpeechServiceConfigJson) as { context: { system: string } } ;\r\n\r\n            const replacement: any = {\r\n                context: {\r\n                    system: withTelemetry.context.system,\r\n                },\r\n            };\r\n\r\n            SpeechServiceConfigJson = JSON.stringify(replacement);\r\n        }\r\n\r\n        if (this.privRecognizerConfig.parameters.getProperty(\"TranscriptionService_SingleChannel\", \"false\").toLowerCase() === \"true\") {\r\n            const json: { context: { DisableReferenceChannel: string; MicSpec: string } } = JSON.parse(SpeechServiceConfigJson) as { context: { DisableReferenceChannel: string; MicSpec: string } } ;\r\n            json.context.DisableReferenceChannel = \"True\";\r\n            json.context.MicSpec = \"1_0_0\";\r\n            SpeechServiceConfigJson = JSON.stringify(json);\r\n        }\r\n\r\n        if (SpeechServiceConfigJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.config\",\r\n                requestSession.requestId,\r\n                \"application/json\",\r\n                SpeechServiceConfigJson));\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    protected async fetchConnection(): Promise<IConnection> {\r\n        if (this.privConnectionConfigurationPromise !== undefined) {\r\n            return this.privConnectionConfigurationPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionConfigurationPromise = undefined;\r\n                    this.privServiceHasSentMessage = false;\r\n                    return this.fetchConnection();\r\n                }\r\n                return this.privConnectionConfigurationPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionConfigurationPromise = undefined;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.fetchConnection();\r\n            });\r\n        }\r\n\r\n        this.privConnectionConfigurationPromise = this.configureConnection();\r\n        return await this.privConnectionConfigurationPromise;\r\n    }\r\n\r\n    protected async sendAudio(audioStreamNode: IAudioStreamNode): Promise<void> {\r\n        const audioFormat: AudioStreamFormatImpl = await this.audioSource.format;\r\n\r\n        // The time we last sent data to the service.\r\n        let nextSendTime: number = Date.now();\r\n\r\n        // Max amount to send before we start to throttle\r\n        const fastLaneSizeMs: string = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-TransmitLengthBeforThrottleMs\", \"5000\");\r\n        const maxSendUnthrottledBytes: number = audioFormat.avgBytesPerSec / 1000 * parseInt(fastLaneSizeMs, 10);\r\n        const startRecogNumber: number = this.privRequestSession.recogNumber;\r\n\r\n        const readAndUploadCycle = async (): Promise<void> => {\r\n            // If speech is done, stop sending audio.\r\n            if (!this.privIsDisposed &&\r\n                !this.privRequestSession.isSpeechEnded &&\r\n                this.privRequestSession.isRecognizing &&\r\n                this.privRequestSession.recogNumber === startRecogNumber) {\r\n\r\n                const connection: IConnection = await this.fetchConnection();\r\n                const audioStreamChunk: IStreamChunk<ArrayBuffer> = await audioStreamNode.read();\r\n                // we have a new audio chunk to upload.\r\n                if (this.privRequestSession.isSpeechEnded) {\r\n                    // If service already recognized audio end then don't send any more audio\r\n                    return;\r\n                }\r\n\r\n                let payload: ArrayBuffer;\r\n                let sendDelay: number;\r\n\r\n                if (!audioStreamChunk || audioStreamChunk.isEnd) {\r\n                    payload = null;\r\n                    sendDelay = 0;\r\n                } else {\r\n                    payload = audioStreamChunk.buffer;\r\n\r\n                    this.privRequestSession.onAudioSent(payload.byteLength);\r\n\r\n                    if (maxSendUnthrottledBytes >= this.privRequestSession.bytesSent) {\r\n                        sendDelay = 0;\r\n                    } else {\r\n                        sendDelay = Math.max(0, nextSendTime - Date.now());\r\n                    }\r\n                }\r\n\r\n                if (0 !== sendDelay) {\r\n                    await this.delay(sendDelay);\r\n                }\r\n\r\n                if (payload !== null) {\r\n                    nextSendTime = Date.now() + (payload.byteLength * 1000 / (audioFormat.avgBytesPerSec * 2));\r\n                }\r\n\r\n                // Are we still alive?\r\n                if (!this.privIsDisposed &&\r\n                    !this.privRequestSession.isSpeechEnded &&\r\n                    this.privRequestSession.isRecognizing &&\r\n                    this.privRequestSession.recogNumber === startRecogNumber) {\r\n                    connection.send(\r\n                        new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, payload)\r\n                    ).catch((): void => {\r\n                        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                        this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition).catch((): void => { });\r\n                    });\r\n\r\n                    if (!audioStreamChunk?.isEnd) {\r\n                        // this.writeBufferToConsole(payload);\r\n                        // Regardless of success or failure, schedule the next upload.\r\n                        // If the underlying connection was broken, the next cycle will\r\n                        // get a new connection and re-transmit missing audio automatically.\r\n                        return readAndUploadCycle();\r\n                    } else {\r\n                        // the audio stream has been closed, no need to schedule next\r\n                        // read-upload cycle.\r\n                        if (!this.privIsLiveAudio) {\r\n                            this.privRequestSession.onSpeechEnded();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        return readAndUploadCycle();\r\n    }\r\n\r\n    private async retryableConnect(): Promise<IConnection> {\r\n        let isUnAuthorized: boolean = false;\r\n\r\n        this.privAuthFetchEventId = createNoDashGuid();\r\n        const sessionId: string = this.privRequestSession.sessionId;\r\n        this.privConnectionId = (sessionId !== undefined) ? sessionId : createNoDashGuid();\r\n\r\n        this.privRequestSession.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\r\n        let lastStatusCode: number = 0;\r\n        let lastReason: string = \"\";\r\n\r\n        while (this.privRequestSession.numConnectionAttempts <= this.privRecognizerConfig.maxRetryCount) {\r\n\r\n            // Get the auth information for the connection. This is a bit of overkill for the current API surface, but leaving the plumbing in place to be able to raise a developer-customer\r\n            // facing event when a connection fails to let them try and provide new auth information.\r\n            const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\r\n            const auth: AuthInfo = await authPromise;\r\n\r\n            await this.privRequestSession.onAuthCompleted(false);\r\n\r\n            // Create the connection\r\n            const connection: IConnection = this.privConnectionFactory.create(this.privRecognizerConfig, auth, this.privConnectionId);\r\n            // Attach the telemetry handlers.\r\n            this.privRequestSession.listenForServiceTelemetry(connection.events);\r\n\r\n            // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\r\n            // it'll stop sending events.\r\n            connection.events.attach((event: ConnectionEvent): void => {\r\n                this.connectionEvents.onEvent(event);\r\n            });\r\n\r\n            const response: ConnectionOpenResponse = await connection.open();\r\n            // 200 == everything is fine.\r\n            if (response.statusCode === 200) {\r\n                await this.privRequestSession.onConnectionEstablishCompleted(response.statusCode);\r\n                return Promise.resolve(connection);\r\n            } else if (response.statusCode === 1006) {\r\n                isUnAuthorized = true;\r\n            }\r\n\r\n            lastStatusCode = response.statusCode;\r\n            lastReason = response.reason;\r\n\r\n            this.privRequestSession.onRetryConnection();\r\n        }\r\n\r\n        await this.privRequestSession.onConnectionEstablishCompleted(lastStatusCode, lastReason);\r\n        return Promise.reject(`Unable to contact server. StatusCode: ${lastStatusCode}, ${this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${lastReason}`);\r\n    }\r\n\r\n    private delay(delayMs: number): Promise<void> {\r\n        return new Promise((resolve: () => void): number => this.privSetTimeout(resolve, delayMs));\r\n    }\r\n\r\n    private writeBufferToConsole(buffer: ArrayBuffer): void {\r\n        let out: string = \"Buffer Size: \";\r\n        if (null === buffer) {\r\n            out += \"null\";\r\n        } else {\r\n            const readView: Uint8Array = new Uint8Array(buffer);\r\n            out += `${buffer.byteLength}\\r\\n`;\r\n            for (let i: number = 0; i < buffer.byteLength; i++) {\r\n                out += readView[i].toString(16).padStart(2, \"0\") + \" \";\r\n            }\r\n        }\r\n        // eslint-disable-next-line no-console\r\n        console.info(out);\r\n    }\r\n\r\n    private async sendFinalAudio(): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await connection.send(new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, null));\r\n        return;\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private async configureConnection(): Promise<IConnection> {\r\n        const connection: IConnection = await this.connectImpl();\r\n        if (this.configConnectionOverride !== undefined) {\r\n            return this.configConnectionOverride(connection);\r\n        }\r\n        await this.sendSpeechServiceConfig(connection, this.privRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize());\r\n        await this.sendPrePayloadJSON(connection, false);\r\n        return connection;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}