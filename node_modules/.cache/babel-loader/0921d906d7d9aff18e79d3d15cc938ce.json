{"ast":null,"code":"//\n// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\n//\nimport { ConsoleLoggingListener } from \"../common.browser/Exports\";\nimport { Events } from \"../common/Exports\";\n/**\n * Defines diagnostics API for managing console output\n * Added in version 1.21.0\n */\n\nexport class Diagnostics {\n  static SetLoggingLevel(logLevel) {\n    this.privListener = new ConsoleLoggingListener(logLevel);\n    Events.instance.attachConsoleListener(this.privListener);\n  }\n\n  static SetLogOutputPath(path) {\n    if (typeof window === \"undefined\") {\n      if (!!this.privListener) {\n        this.privListener.logPath = path;\n      }\n    } else {\n      throw new Error(\"File system logging not available in browser.\");\n    }\n  }\n\n}\nDiagnostics.privListener = undefined;","map":{"version":3,"sources":["src/sdk/Diagnostics.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AAEA,SAAS,sBAAT,QAAuC,2BAAvC;AACA,SAAS,MAAT,QAAuB,mBAAvB;AAGA;;;AAGG;;AACH,OAAM,MAAO,WAAP,CAAkB;AAGb,SAAO,eAAP,CAAuB,QAAvB,EAAyC;AAC5C,SAAK,YAAL,GAAqB,IAAI,sBAAJ,CAA2B,QAA3B,CAArB;AACA,IAAA,MAAM,CAAC,QAAP,CAAgB,qBAAhB,CAAsC,KAAK,YAA3C;AACH;;AAEM,SAAO,gBAAP,CAAwB,IAAxB,EAAoC;AACvC,QAAI,OAAO,MAAP,KAAkB,WAAtB,EAAmC;AAC/B,UAAI,CAAC,CAAC,KAAK,YAAX,EAAyB;AACrB,aAAK,YAAL,CAAkB,OAAlB,GAA4B,IAA5B;AACH;AACJ,KAJD,MAIO;AACH,YAAM,IAAI,KAAJ,CAAU,+CAAV,CAAN;AACH;AACJ;;AAhBmB;AACL,WAAA,CAAA,YAAA,GAAuC,SAAvC","sourcesContent":["//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport { ConsoleLoggingListener } from \"../common.browser/Exports\";\r\nimport { Events } from \"../common/Exports\";\r\nimport { LogLevel } from \"./LogLevel\";\r\n\r\n/**\r\n * Defines diagnostics API for managing console output\r\n * Added in version 1.21.0\r\n */\r\nexport class Diagnostics {\r\n    private static privListener: ConsoleLoggingListener = undefined;\r\n\r\n    public static SetLoggingLevel(logLevel: LogLevel): void {\r\n        this.privListener =  new ConsoleLoggingListener(logLevel);\r\n        Events.instance.attachConsoleListener(this.privListener);\r\n    }\r\n\r\n    public static SetLogOutputPath(path: string): void {\r\n        if (typeof window === \"undefined\") {\r\n            if (!!this.privListener) {\r\n                this.privListener.logPath = path;\r\n            }\r\n        } else {\r\n            throw new Error(\"File system logging not available in browser.\");\r\n        }\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}