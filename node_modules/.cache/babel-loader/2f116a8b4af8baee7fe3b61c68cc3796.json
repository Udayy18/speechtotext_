{"ast":null,"code":"/* eslint-disable import/order */\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport * as tls from \"tls\";\nimport * as ocsp from \"../../external/ocsp/ocsp\";\nimport { Events, OCSPCacheEntryExpiredEvent, OCSPCacheEntryNeedsRefreshEvent, OCSPCacheFetchErrorEvent, OCSPCacheHitEvent, OCSPCacheMissEvent, OCSPCacheUpdateCompleteEvent, OCSPCacheUpdateNeededEvent, OCSPDiskCacheHitEvent, OCSPDiskCacheStoreEvent, OCSPMemoryCacheHitEvent, OCSPMemoryCacheStoreEvent, OCSPResponseRetrievedEvent, OCSPStapleReceivedEvent, OCSPVerificationFailedEvent } from \"../common/Exports\";\nimport Agent from \"agent-base\"; // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\n\nimport Cache from \"async-disk-cache\";\nimport HttpsProxyAgent from \"https-proxy-agent\";\nimport * as net from \"net\";\nimport { OCSPCacheUpdateErrorEvent } from \"../common/OCSPEvents\";\nexport class CertCheckAgent {\n  constructor(proxyInfo) {\n    if (!!proxyInfo) {\n      this.privProxyInfo = proxyInfo;\n    } // Initialize this here to allow tests to set the env variable before the cache is constructed.\n\n\n    if (!CertCheckAgent.privDiskCache) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call\n      CertCheckAgent.privDiskCache = new Cache(\"microsoft-cognitiveservices-speech-sdk-cache\", {\n        supportBuffer: true,\n        location: typeof process !== \"undefined\" && !!process.env.SPEECH_OCSP_CACHE_ROOT ? process.env.SPEECH_OCSP_CACHE_ROOT : undefined\n      });\n    }\n  } // Test hook to force the disk cache to be recreated.\n\n\n  static forceReinitDiskCache() {\n    CertCheckAgent.privDiskCache = undefined;\n    CertCheckAgent.privMemCache = {};\n  } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  GetAgent(disableStapling) {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const agent = new Agent.Agent(this.CreateConnection);\n\n    if (this.privProxyInfo !== undefined && this.privProxyInfo.HostName !== undefined && this.privProxyInfo.Port > 0) {\n      const proxyName = \"privProxyInfo\"; // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n      agent[proxyName] = this.privProxyInfo;\n    }\n\n    return agent;\n  }\n\n  static GetProxyAgent(proxyInfo) {\n    const httpProxyOptions = {\n      host: proxyInfo.HostName,\n      port: proxyInfo.Port\n    };\n\n    if (!!proxyInfo.UserName) {\n      httpProxyOptions.headers = {\n        \"Proxy-Authentication\": \"Basic \" + new Buffer(`${proxyInfo.UserName}:${proxyInfo.Password === undefined ? \"\" : proxyInfo.Password}`).toString(\"base64\")\n      };\n    } else {\n      httpProxyOptions.headers = {};\n    }\n\n    httpProxyOptions.headers.requestOCSP = \"true\";\n    const httpProxyAgent = new HttpsProxyAgent(httpProxyOptions);\n    return httpProxyAgent;\n  }\n\n  static OCSPCheck(socketPromise, proxyInfo) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let ocspRequest;\n      let stapling;\n      let resolved = false;\n      const socket = yield socketPromise;\n      socket.cork();\n      const tlsSocket = socket;\n      return new Promise((resolve, reject) => {\n        socket.on(\"OCSPResponse\", data => {\n          if (!!data) {\n            this.onEvent(new OCSPStapleReceivedEvent());\n            stapling = data;\n          }\n        });\n        socket.on(\"error\", error => {\n          if (!resolved) {\n            resolved = true;\n            socket.destroy();\n            reject(error);\n          }\n        }); // eslint-disable-next-line @typescript-eslint/no-misused-promises, @typescript-eslint/explicit-function-return-type\n\n        tlsSocket.on(\"secure\", () => __awaiter(this, void 0, void 0, function* () {\n          const peer = tlsSocket.getPeerCertificate(true);\n\n          try {\n            const issuer = yield this.GetIssuer(peer); // We always need a request to verify the response.\n\n            ocspRequest = ocsp.request.generate(peer.raw, issuer.raw); // Do we have a result for this certificate in our memory cache?\n\n            const sig = ocspRequest.id.toString(\"hex\"); // Stapled response trumps cached response.\n\n            if (!stapling) {\n              const cacheEntry = yield CertCheckAgent.GetResponseFromCache(sig, ocspRequest, proxyInfo);\n              stapling = cacheEntry;\n            }\n\n            yield this.VerifyOCSPResponse(stapling, ocspRequest, proxyInfo);\n            socket.uncork();\n            resolved = true;\n            resolve(socket);\n          } catch (e) {\n            socket.destroy();\n            resolved = true;\n            reject(e);\n          }\n        }));\n      });\n    });\n  }\n\n  static GetIssuer(peer) {\n    if (peer.issuerCertificate) {\n      return Promise.resolve(peer.issuerCertificate);\n    }\n\n    return new Promise((resolve, reject) => {\n      const ocspAgent = new ocsp.Agent({});\n      ocspAgent.fetchIssuer(peer, null, (error, value) => {\n        if (!!error) {\n          reject(error);\n          return;\n        }\n\n        resolve(value);\n      });\n    });\n  }\n\n  static GetResponseFromCache(signature, ocspRequest, proxyInfo) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let cachedResponse = CertCheckAgent.privMemCache[signature];\n\n      if (!!cachedResponse) {\n        this.onEvent(new OCSPMemoryCacheHitEvent(signature));\n      } // Do we have a result for this certificate on disk in %TMP%?\n\n\n      if (!cachedResponse) {\n        try {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n          const diskCacheResponse = yield CertCheckAgent.privDiskCache.get(signature);\n\n          if (!!diskCacheResponse.isCached) {\n            CertCheckAgent.onEvent(new OCSPDiskCacheHitEvent(signature));\n            CertCheckAgent.StoreMemoryCacheEntry(signature, diskCacheResponse.value);\n            cachedResponse = diskCacheResponse.value;\n          }\n        } catch (error) {\n          cachedResponse = null;\n        }\n      }\n\n      if (!cachedResponse) {\n        return cachedResponse;\n      }\n\n      try {\n        const cachedOcspResponse = ocsp.utils.parseResponse(cachedResponse);\n        const responseValue = cachedOcspResponse.value;\n        const tbsData = responseValue.tbsResponseData;\n\n        if (tbsData.responses.length < 1) {\n          this.onEvent(new OCSPCacheFetchErrorEvent(signature, \"Not enough data in cached response\"));\n          return;\n        }\n\n        const cachedStartTime = tbsData.responses[0].thisUpdate;\n        const cachedNextTime = tbsData.responses[0].nextUpdate;\n\n        if (cachedNextTime < Date.now() + this.testTimeOffset - 60000) {\n          // Cached entry has expired.\n          this.onEvent(new OCSPCacheEntryExpiredEvent(signature, cachedNextTime));\n          cachedResponse = null;\n        } else {\n          // If we're within one day of the next update, or 50% of the way through the validity period,\n          // background an update to the cache.\n          const minUpdate = Math.min(24 * 60 * 60 * 1000, (cachedNextTime - cachedStartTime) / 2);\n\n          if (cachedNextTime - (Date.now() + this.testTimeOffset) < minUpdate) {\n            this.onEvent(new OCSPCacheEntryNeedsRefreshEvent(signature, cachedStartTime, cachedNextTime));\n            this.UpdateCache(ocspRequest, proxyInfo).catch(error => {\n              // Well, not much we can do here.\n              this.onEvent(new OCSPCacheUpdateErrorEvent(signature, error.toString()));\n            });\n          } else {\n            this.onEvent(new OCSPCacheHitEvent(signature, cachedStartTime, cachedNextTime));\n          }\n        }\n      } catch (error) {\n        this.onEvent(new OCSPCacheFetchErrorEvent(signature, error));\n        cachedResponse = null;\n      }\n\n      if (!cachedResponse) {\n        this.onEvent(new OCSPCacheMissEvent(signature));\n      }\n\n      return cachedResponse;\n    });\n  }\n\n  static VerifyOCSPResponse(cacheValue, ocspRequest, proxyInfo) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let ocspResponse = cacheValue; // Do we have a valid response?\n\n      if (!ocspResponse) {\n        ocspResponse = yield CertCheckAgent.GetOCSPResponse(ocspRequest, proxyInfo);\n      }\n\n      return new Promise((resolve, reject) => {\n        ocsp.verify({\n          request: ocspRequest,\n          response: ocspResponse\n        }, error => {\n          if (!!error) {\n            CertCheckAgent.onEvent(new OCSPVerificationFailedEvent(ocspRequest.id.toString(\"hex\"), error)); // Bad Cached Value? One more try without the cache.\n\n            if (!!cacheValue) {\n              this.VerifyOCSPResponse(null, ocspRequest, proxyInfo).then(() => {\n                resolve();\n              }, error => {\n                reject(error);\n              });\n            } else {\n              reject(error);\n            }\n          } else {\n            if (!cacheValue) {\n              CertCheckAgent.StoreCacheEntry(ocspRequest.id.toString(\"hex\"), ocspResponse);\n            }\n\n            resolve();\n          }\n        });\n      });\n    });\n  }\n\n  static UpdateCache(req, proxyInfo) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const signature = req.id.toString(\"hex\");\n      this.onEvent(new OCSPCacheUpdateNeededEvent(signature));\n      const rawResponse = yield this.GetOCSPResponse(req, proxyInfo);\n      this.StoreCacheEntry(signature, rawResponse);\n      this.onEvent(new OCSPCacheUpdateCompleteEvent(req.id.toString(\"hex\")));\n    });\n  }\n\n  static StoreCacheEntry(sig, rawResponse) {\n    this.StoreMemoryCacheEntry(sig, rawResponse);\n    this.StoreDiskCacheEntry(sig, rawResponse);\n  }\n\n  static StoreMemoryCacheEntry(sig, rawResponse) {\n    this.privMemCache[sig] = rawResponse;\n    this.onEvent(new OCSPMemoryCacheStoreEvent(sig));\n  }\n\n  static StoreDiskCacheEntry(sig, rawResponse) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n    this.privDiskCache.set(sig, rawResponse).then(() => {\n      this.onEvent(new OCSPDiskCacheStoreEvent(sig));\n    });\n  }\n\n  static GetOCSPResponse(req, proxyInfo) {\n    const ocspMethod = \"1.3.6.1.5.5.7.48.1\";\n    let options = {};\n\n    if (!!proxyInfo) {\n      const agent = CertCheckAgent.GetProxyAgent(proxyInfo);\n      options.agent = agent;\n    }\n\n    return new Promise((resolve, reject) => {\n      ocsp.utils.getAuthorityInfo(req.cert, ocspMethod, (error, uri) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n\n        const url = new URL(uri);\n        options = Object.assign(Object.assign({}, options), {\n          host: url.host,\n          protocol: url.protocol,\n          port: url.port,\n          path: url.pathname,\n          hostname: url.host\n        });\n        ocsp.utils.getResponse(options, req.data, (error, raw) => {\n          if (error) {\n            reject(error);\n            return;\n          }\n\n          const certID = req.certID;\n          this.onEvent(new OCSPResponseRetrievedEvent(certID.toString(\"hex\")));\n          resolve(raw);\n        });\n      });\n    });\n  }\n\n  static onEvent(event) {\n    Events.instance.onEvent(event);\n  }\n\n  CreateConnection(request, options) {\n    const enableOCSP = typeof process !== \"undefined\" && process.env.NODE_TLS_REJECT_UNAUTHORIZED !== \"0\" && process.env.SPEECH_CONDUCT_OCSP_CHECK !== \"0\" && options.secureEndpoint;\n    let socketPromise;\n    options = Object.assign(Object.assign({}, options), {\n      requestOCSP: !CertCheckAgent.forceDisableOCSPStapling,\n      servername: options.host\n    });\n\n    if (!!this.privProxyInfo) {\n      const httpProxyAgent = CertCheckAgent.GetProxyAgent(this.privProxyInfo);\n      const baseAgent = httpProxyAgent;\n      socketPromise = new Promise((resolve, reject) => {\n        baseAgent.callback(request, options, (error, socket) => {\n          if (!!error) {\n            reject(error);\n          } else {\n            resolve(socket);\n          }\n        });\n      });\n    } else {\n      if (!!options.secureEndpoint) {\n        socketPromise = Promise.resolve(tls.connect(options));\n      } else {\n        socketPromise = Promise.resolve(net.connect(options));\n      }\n    }\n\n    if (!!enableOCSP) {\n      return CertCheckAgent.OCSPCheck(socketPromise, this.privProxyInfo);\n    } else {\n      return socketPromise;\n    }\n  }\n\n} // Test hook to enable forcing expiration / refresh to happen.\n\nCertCheckAgent.testTimeOffset = 0; // Test hook to disable stapling for cache testing.\n\nCertCheckAgent.forceDisableOCSPStapling = false; // An in memory cache for recived responses.\n\nCertCheckAgent.privMemCache = {};","map":{"version":3,"sources":["src/common.browser/CertChecks.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable import/order */\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport * as http from \"http\";\r\nimport * as tls from \"tls\";\r\nimport * as ocsp from \"../../external/ocsp/ocsp\";\r\nimport {\r\n    Events,\r\n    OCSPCacheEntryExpiredEvent,\r\n    OCSPCacheEntryNeedsRefreshEvent,\r\n    OCSPCacheFetchErrorEvent,\r\n    OCSPCacheHitEvent,\r\n    OCSPCacheMissEvent,\r\n    OCSPCacheUpdateCompleteEvent,\r\n    OCSPCacheUpdateNeededEvent,\r\n    OCSPDiskCacheHitEvent,\r\n    OCSPDiskCacheStoreEvent,\r\n    OCSPEvent,\r\n    OCSPMemoryCacheHitEvent,\r\n    OCSPMemoryCacheStoreEvent,\r\n    OCSPResponseRetrievedEvent,\r\n    OCSPStapleReceivedEvent,\r\n    OCSPVerificationFailedEvent,\r\n} from \"../common/Exports\";\r\nimport { IStringDictionary } from \"../common/IDictionary\";\r\nimport { ProxyInfo } from \"./ProxyInfo\";\r\n\r\nimport Agent from \"agent-base\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n// @ts-ignore\r\nimport Cache from \"async-disk-cache\";\r\nimport HttpsProxyAgent from \"https-proxy-agent\";\r\nimport * as net from \"net\";\r\nimport { OCSPCacheUpdateErrorEvent } from \"../common/OCSPEvents\";\r\n\r\n\r\ninterface tbsUpdateResponse {\r\n    thisUpdate: number;\r\n    nextUpdate: number;\r\n}\r\n\r\ninterface tbsResponse {\r\n    tbsResponseData: {\r\n        responses: tbsUpdateResponse[];\r\n    };\r\n}\r\n\r\nexport class CertCheckAgent {\r\n\r\n    // Test hook to enable forcing expiration / refresh to happen.\r\n    public static testTimeOffset: number = 0;\r\n\r\n    // Test hook to disable stapling for cache testing.\r\n    public static forceDisableOCSPStapling: boolean = false;\r\n\r\n    // An in memory cache for recived responses.\r\n    private static privMemCache: IStringDictionary<Buffer> = {};\r\n\r\n    // The on disk cache.\r\n    private static privDiskCache: Cache;\r\n\r\n    private privProxyInfo: ProxyInfo;\r\n\r\n    public constructor(proxyInfo?: ProxyInfo) {\r\n        if (!!proxyInfo) {\r\n            this.privProxyInfo = proxyInfo;\r\n        }\r\n\r\n        // Initialize this here to allow tests to set the env variable before the cache is constructed.\r\n        if (!CertCheckAgent.privDiskCache) {\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call\r\n            CertCheckAgent.privDiskCache = new Cache(\"microsoft-cognitiveservices-speech-sdk-cache\", { supportBuffer: true, location: (typeof process !== \"undefined\" && !!process.env.SPEECH_OCSP_CACHE_ROOT) ? process.env.SPEECH_OCSP_CACHE_ROOT : undefined });\r\n        }\r\n    }\r\n\r\n    // Test hook to force the disk cache to be recreated.\r\n    public static forceReinitDiskCache(): void {\r\n        CertCheckAgent.privDiskCache = undefined;\r\n        CertCheckAgent.privMemCache = {};\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public GetAgent(disableStapling?: boolean): http.Agent {\r\n        // eslint-disable-next-line @typescript-eslint/unbound-method\r\n        const agent: any = new Agent.Agent(this.CreateConnection);\r\n\r\n        if (this.privProxyInfo !== undefined &&\r\n            this.privProxyInfo.HostName !== undefined &&\r\n            this.privProxyInfo.Port > 0) {\r\n            const proxyName: string = \"privProxyInfo\";\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n            agent[proxyName] = this.privProxyInfo;\r\n        }\r\n\r\n        return agent as http.Agent;\r\n    }\r\n\r\n    private static GetProxyAgent(proxyInfo: ProxyInfo): HttpsProxyAgent {\r\n        const httpProxyOptions: HttpsProxyAgent.HttpsProxyAgentOptions = {\r\n            host: proxyInfo.HostName,\r\n            port: proxyInfo.Port,\r\n        };\r\n\r\n        if (!!proxyInfo.UserName) {\r\n            httpProxyOptions.headers = {\r\n                \"Proxy-Authentication\": \"Basic \" + new Buffer(`${proxyInfo.UserName}:${(proxyInfo.Password === undefined) ? \"\" : proxyInfo.Password}`).toString(\"base64\"),\r\n            };\r\n        } else {\r\n            httpProxyOptions.headers = {};\r\n        }\r\n\r\n        httpProxyOptions.headers.requestOCSP = \"true\";\r\n\r\n        const httpProxyAgent: HttpsProxyAgent = new HttpsProxyAgent(httpProxyOptions);\r\n        return httpProxyAgent;\r\n    }\r\n\r\n    private static async OCSPCheck(socketPromise: Promise<net.Socket>, proxyInfo: ProxyInfo): Promise<net.Socket> {\r\n        let ocspRequest: ocsp.Request;\r\n        let stapling: Buffer;\r\n        let resolved: boolean = false;\r\n\r\n        const socket: net.Socket = await socketPromise;\r\n        socket.cork();\r\n\r\n        const tlsSocket: tls.TLSSocket = socket as tls.TLSSocket;\r\n\r\n        return new Promise<net.Socket>((resolve: (value: net.Socket) => void, reject: (error: string | Error) => void): void => {\r\n            socket.on(\"OCSPResponse\", (data: Buffer): void => {\r\n                if (!!data) {\r\n                    this.onEvent(new OCSPStapleReceivedEvent());\r\n                    stapling = data;\r\n                }\r\n            });\r\n\r\n            socket.on(\"error\", (error: Error): void => {\r\n                if (!resolved) {\r\n                    resolved = true;\r\n                    socket.destroy();\r\n                    reject(error);\r\n                }\r\n            });\r\n\r\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises, @typescript-eslint/explicit-function-return-type\r\n            tlsSocket.on(\"secure\", async () => {\r\n                const peer: tls.DetailedPeerCertificate = tlsSocket.getPeerCertificate(true);\r\n                try {\r\n                    const issuer: tls.DetailedPeerCertificate = await this.GetIssuer(peer);\r\n\r\n                    // We always need a request to verify the response.\r\n                    ocspRequest = ocsp.request.generate(peer.raw, issuer.raw);\r\n\r\n                    // Do we have a result for this certificate in our memory cache?\r\n                    const sig: string = ocspRequest.id.toString(\"hex\");\r\n\r\n                    // Stapled response trumps cached response.\r\n                    if (!stapling) {\r\n                        const cacheEntry: Buffer = await CertCheckAgent.GetResponseFromCache(sig, ocspRequest, proxyInfo);\r\n                        stapling = cacheEntry;\r\n                    }\r\n\r\n                    await this.VerifyOCSPResponse(stapling, ocspRequest, proxyInfo);\r\n\r\n                    socket.uncork();\r\n                    resolved = true;\r\n                    resolve(socket);\r\n                } catch (e) {\r\n                    socket.destroy();\r\n                    resolved = true;\r\n                    reject(e as string);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    private static GetIssuer(peer: tls.DetailedPeerCertificate): Promise<tls.DetailedPeerCertificate> {\r\n        if (peer.issuerCertificate) {\r\n            return Promise.resolve(peer.issuerCertificate);\r\n        }\r\n\r\n        return new Promise<tls.DetailedPeerCertificate>((resolve: (value: tls.DetailedPeerCertificate) => void, reject: (reason: string) => void): void => {\r\n            const ocspAgent: ocsp.Agent = new ocsp.Agent({});\r\n            ocspAgent.fetchIssuer(peer, null, (error: string, value: tls.DetailedPeerCertificate): void => {\r\n                if (!!error) {\r\n                    reject(error);\r\n                    return;\r\n                }\r\n\r\n                resolve(value);\r\n            });\r\n        });\r\n    }\r\n\r\n    private static async GetResponseFromCache(signature: string, ocspRequest: ocsp.Request, proxyInfo: ProxyInfo): Promise<Buffer> {\r\n        let cachedResponse: Buffer = CertCheckAgent.privMemCache[signature];\r\n\r\n        if (!!cachedResponse) {\r\n            this.onEvent(new OCSPMemoryCacheHitEvent(signature));\r\n        }\r\n\r\n        // Do we have a result for this certificate on disk in %TMP%?\r\n        if (!cachedResponse) {\r\n            try {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\r\n                const diskCacheResponse: { value: Buffer; isCached?: any } = await CertCheckAgent.privDiskCache.get(signature) as { value: Buffer; isCached?: any };\r\n                if (!!diskCacheResponse.isCached) {\r\n                    CertCheckAgent.onEvent(new OCSPDiskCacheHitEvent(signature));\r\n                    CertCheckAgent.StoreMemoryCacheEntry(signature, diskCacheResponse.value);\r\n                    cachedResponse = diskCacheResponse.value;\r\n                }\r\n            } catch (error) {\r\n                cachedResponse = null;\r\n            }\r\n        }\r\n\r\n        if (!cachedResponse) {\r\n            return cachedResponse;\r\n        }\r\n\r\n        try {\r\n            const cachedOcspResponse: ocsp.Response = ocsp.utils.parseResponse(cachedResponse);\r\n            const responseValue: tbsResponse = cachedOcspResponse.value as tbsResponse;\r\n            const tbsData: { responses: tbsUpdateResponse[] } = responseValue.tbsResponseData;\r\n            if (tbsData.responses.length < 1) {\r\n                this.onEvent(new OCSPCacheFetchErrorEvent(signature, \"Not enough data in cached response\"));\r\n                return;\r\n            }\r\n\r\n            const cachedStartTime: number = tbsData.responses[0].thisUpdate;\r\n            const cachedNextTime: number = tbsData.responses[0].nextUpdate;\r\n\r\n            if (cachedNextTime < (Date.now() + this.testTimeOffset - 60000)) {\r\n                // Cached entry has expired.\r\n                this.onEvent(new OCSPCacheEntryExpiredEvent(signature, cachedNextTime));\r\n                cachedResponse = null;\r\n            } else {\r\n                // If we're within one day of the next update, or 50% of the way through the validity period,\r\n                // background an update to the cache.\r\n\r\n                const minUpdate: number = Math.min(24 * 60 * 60 * 1000, (cachedNextTime - cachedStartTime) / 2);\r\n\r\n                if ((cachedNextTime - (Date.now() + this.testTimeOffset)) < minUpdate) {\r\n                    this.onEvent(new OCSPCacheEntryNeedsRefreshEvent(signature, cachedStartTime, cachedNextTime));\r\n                    this.UpdateCache(ocspRequest, proxyInfo).catch((error: string): void => {\r\n                        // Well, not much we can do here.\r\n                        this.onEvent(new OCSPCacheUpdateErrorEvent(signature, error.toString()));\r\n                    });\r\n                } else {\r\n                    this.onEvent(new OCSPCacheHitEvent(signature, cachedStartTime, cachedNextTime));\r\n                }\r\n            }\r\n        } catch (error) {\r\n            this.onEvent(new OCSPCacheFetchErrorEvent(signature, error as string));\r\n            cachedResponse = null;\r\n        }\r\n        if (!cachedResponse) {\r\n            this.onEvent(new OCSPCacheMissEvent(signature));\r\n        }\r\n        return cachedResponse;\r\n    }\r\n\r\n    private static async VerifyOCSPResponse(cacheValue: Buffer, ocspRequest: ocsp.Request, proxyInfo: ProxyInfo): Promise<void> {\r\n        let ocspResponse: Buffer = cacheValue;\r\n\r\n        // Do we have a valid response?\r\n        if (!ocspResponse) {\r\n            ocspResponse = await CertCheckAgent.GetOCSPResponse(ocspRequest, proxyInfo);\r\n        }\r\n\r\n        return new Promise<void>((resolve: () => void, reject: (error: string | Error) => void): void => {\r\n            ocsp.verify({ request: ocspRequest, response: ocspResponse }, (error: string): void => {\r\n                if (!!error) {\r\n                    CertCheckAgent.onEvent(new OCSPVerificationFailedEvent(ocspRequest.id.toString(\"hex\"), error));\r\n\r\n                    // Bad Cached Value? One more try without the cache.\r\n                    if (!!cacheValue) {\r\n                        this.VerifyOCSPResponse(null, ocspRequest, proxyInfo).then((): void => {\r\n                            resolve();\r\n                        }, (error: Error): void => {\r\n                            reject(error);\r\n                        });\r\n                    } else {\r\n                        reject(error);\r\n                    }\r\n                } else {\r\n                    if (!cacheValue) {\r\n                        CertCheckAgent.StoreCacheEntry(ocspRequest.id.toString(\"hex\"), ocspResponse);\r\n                    }\r\n                    resolve();\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    private static async UpdateCache(req: ocsp.Request, proxyInfo: ProxyInfo): Promise<void> {\r\n        const signature: string = req.id.toString(\"hex\");\r\n        this.onEvent(new OCSPCacheUpdateNeededEvent(signature));\r\n\r\n        const rawResponse: Buffer = await this.GetOCSPResponse(req, proxyInfo);\r\n        this.StoreCacheEntry(signature, rawResponse);\r\n        this.onEvent(new OCSPCacheUpdateCompleteEvent(req.id.toString(\"hex\")));\r\n\r\n    }\r\n\r\n    private static StoreCacheEntry(sig: string, rawResponse: Buffer): void {\r\n        this.StoreMemoryCacheEntry(sig, rawResponse);\r\n        this.StoreDiskCacheEntry(sig, rawResponse);\r\n    }\r\n\r\n    private static StoreMemoryCacheEntry(sig: string, rawResponse: Buffer): void {\r\n        this.privMemCache[sig] = rawResponse;\r\n        this.onEvent(new OCSPMemoryCacheStoreEvent(sig));\r\n    }\r\n\r\n    private static StoreDiskCacheEntry(sig: string, rawResponse: Buffer): void {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\r\n        this.privDiskCache.set(sig, rawResponse).then((): void => {\r\n            this.onEvent(new OCSPDiskCacheStoreEvent(sig));\r\n        });\r\n    }\r\n\r\n    private static GetOCSPResponse(req: ocsp.Request, proxyInfo: ProxyInfo): Promise<Buffer> {\r\n\r\n        const ocspMethod: string = \"1.3.6.1.5.5.7.48.1\";\r\n        let options: http.RequestOptions = {};\r\n\r\n        if (!!proxyInfo) {\r\n            const agent: HttpsProxyAgent = CertCheckAgent.GetProxyAgent(proxyInfo);\r\n            options.agent = agent;\r\n        }\r\n\r\n        return new Promise<Buffer>((resolve: (value: Buffer) => void, reject: (error: string | Error) => void): void => {\r\n            ocsp.utils.getAuthorityInfo(req.cert as tls.DetailedPeerCertificate, ocspMethod, (error: string, uri: string): void => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                }\r\n\r\n                const url = new URL(uri);\r\n                options = { ...options, host: url.host, protocol: url.protocol, port: url.port, path: url.pathname, hostname: url.host };\r\n\r\n                ocsp.utils.getResponse(options, req.data, (error: string, raw: Buffer): void => {\r\n                    if (error) {\r\n                        reject(error);\r\n                        return;\r\n                    }\r\n\r\n                    const certID: Buffer = req.certID as Buffer;\r\n                    this.onEvent(new OCSPResponseRetrievedEvent(certID.toString(\"hex\")));\r\n                    resolve(raw);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    private static onEvent(event: OCSPEvent): void {\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private CreateConnection(request: Agent.ClientRequest, options: Agent.RequestOptions): Promise<net.Socket> {\r\n        const enableOCSP: boolean = (typeof process !== \"undefined\" && process.env.NODE_TLS_REJECT_UNAUTHORIZED !== \"0\" && process.env.SPEECH_CONDUCT_OCSP_CHECK !== \"0\") && options.secureEndpoint;\r\n        let socketPromise: Promise<net.Socket>;\r\n\r\n        options = {\r\n            ...options,\r\n            ...{\r\n                requestOCSP: !CertCheckAgent.forceDisableOCSPStapling,\r\n                servername: options.host\r\n            }\r\n        };\r\n\r\n        if (!!this.privProxyInfo) {\r\n            const httpProxyAgent: HttpsProxyAgent = CertCheckAgent.GetProxyAgent(this.privProxyInfo);\r\n            const baseAgent: Agent.Agent = httpProxyAgent as unknown as Agent.Agent;\r\n\r\n            socketPromise = new Promise<net.Socket>((resolve: (value: net.Socket) => void, reject: (error: string | Error) => void): void => {\r\n                baseAgent.callback(request, options, (error: Error, socket: net.Socket): void => {\r\n                    if (!!error) {\r\n                        reject(error);\r\n                    } else {\r\n                        resolve(socket);\r\n                    }\r\n                });\r\n            });\r\n        } else {\r\n            if (!!options.secureEndpoint) {\r\n                socketPromise = Promise.resolve(tls.connect(options));\r\n            } else {\r\n                socketPromise = Promise.resolve(net.connect(options));\r\n            }\r\n        }\r\n\r\n        if (!!enableOCSP) {\r\n            return CertCheckAgent.OCSPCheck(socketPromise, this.privProxyInfo);\r\n        } else {\r\n            return socketPromise;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}