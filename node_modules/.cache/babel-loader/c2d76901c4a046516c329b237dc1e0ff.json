{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ArgumentNullError, ConnectionMessage } from \"../common/Exports\";\nimport { HeaderNames } from \"./HeaderNames\";\nexport class SpeechConnectionMessage extends ConnectionMessage {\n  constructor(messageType, path, requestId, contentType, body, streamId, additionalHeaders, id) {\n    if (!path) {\n      throw new ArgumentNullError(\"path\");\n    }\n\n    if (!requestId) {\n      throw new ArgumentNullError(\"requestId\");\n    }\n\n    const headers = {};\n    headers[HeaderNames.Path] = path;\n    headers[HeaderNames.RequestId] = requestId;\n    headers[HeaderNames.RequestTimestamp] = new Date().toISOString();\n\n    if (contentType) {\n      headers[HeaderNames.ContentType] = contentType;\n    }\n\n    if (streamId) {\n      headers[HeaderNames.RequestStreamId] = streamId;\n    }\n\n    if (additionalHeaders) {\n      for (const headerName in additionalHeaders) {\n        if (headerName) {\n          headers[headerName] = additionalHeaders[headerName];\n        }\n      }\n    }\n\n    if (id) {\n      super(messageType, body, headers, id);\n    } else {\n      super(messageType, body, headers);\n    }\n\n    this.privPath = path;\n    this.privRequestId = requestId;\n    this.privContentType = contentType;\n    this.privStreamId = streamId;\n    this.privAdditionalHeaders = additionalHeaders;\n  }\n\n  get path() {\n    return this.privPath;\n  }\n\n  get requestId() {\n    return this.privRequestId;\n  }\n\n  get contentType() {\n    return this.privContentType;\n  }\n\n  get streamId() {\n    return this.privStreamId;\n  }\n\n  get additionalHeaders() {\n    return this.privAdditionalHeaders;\n  }\n\n  static fromConnectionMessage(message) {\n    let path = null;\n    let requestId = null;\n    let contentType = null; // let requestTimestamp = null;\n\n    let streamId = null;\n    const additionalHeaders = {};\n\n    if (message.headers) {\n      for (const headerName in message.headers) {\n        if (headerName) {\n          if (headerName.toLowerCase() === HeaderNames.Path.toLowerCase()) {\n            path = message.headers[headerName];\n          } else if (headerName.toLowerCase() === HeaderNames.RequestId.toLowerCase()) {\n            requestId = message.headers[headerName]; // } else if (headerName.toLowerCase() === HeaderNames.RequestTimestamp.toLowerCase()) {\n            //  requestTimestamp = message.headers[headerName];\n          } else if (headerName.toLowerCase() === HeaderNames.ContentType.toLowerCase()) {\n            contentType = message.headers[headerName];\n          } else if (headerName.toLowerCase() === HeaderNames.RequestStreamId.toLowerCase()) {\n            streamId = message.headers[headerName];\n          } else {\n            additionalHeaders[headerName] = message.headers[headerName];\n          }\n        }\n      }\n    }\n\n    return new SpeechConnectionMessage(message.messageType, path, requestId, contentType, message.body, streamId, additionalHeaders, message.id);\n  }\n\n}","map":{"version":3,"sources":["src/common.speech/SpeechConnectionMessage.Internal.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ArgumentNullError, ConnectionMessage, IStringDictionary, MessageType } from \"../common/Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\n\r\nexport class SpeechConnectionMessage extends ConnectionMessage {\r\n\r\n    private privPath: string;\r\n    private privRequestId: string;\r\n    private privContentType: string;\r\n    private privStreamId: string;\r\n    private privAdditionalHeaders: IStringDictionary<string>;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        path: string,\r\n        requestId: string,\r\n        contentType: string,\r\n        body: any,\r\n        streamId?: string,\r\n        additionalHeaders?: IStringDictionary<string>,\r\n        id?: string) {\r\n\r\n        if (!path) {\r\n            throw new ArgumentNullError(\"path\");\r\n        }\r\n\r\n        if (!requestId) {\r\n            throw new ArgumentNullError(\"requestId\");\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        headers[HeaderNames.Path] = path;\r\n        headers[HeaderNames.RequestId] = requestId;\r\n        headers[HeaderNames.RequestTimestamp] = new Date().toISOString();\r\n        if (contentType) {\r\n            headers[HeaderNames.ContentType] = contentType;\r\n        }\r\n\r\n        if (streamId) {\r\n            headers[HeaderNames.RequestStreamId] = streamId;\r\n        }\r\n\r\n        if (additionalHeaders) {\r\n            for (const headerName in additionalHeaders) {\r\n                if (headerName) {\r\n                    headers[headerName] = additionalHeaders[headerName];\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        if (id) {\r\n            super(messageType, body, headers, id);\r\n        } else {\r\n            super(messageType, body, headers);\r\n        }\r\n\r\n        this.privPath = path;\r\n        this.privRequestId = requestId;\r\n        this.privContentType = contentType;\r\n        this.privStreamId = streamId;\r\n        this.privAdditionalHeaders = additionalHeaders;\r\n    }\r\n\r\n    public get path(): string {\r\n        return this.privPath;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get contentType(): string {\r\n        return this.privContentType;\r\n    }\r\n\r\n    public get streamId(): string {\r\n        return this.privStreamId;\r\n    }\r\n\r\n    public get additionalHeaders(): IStringDictionary<string> {\r\n        return this.privAdditionalHeaders;\r\n    }\r\n\r\n    public static fromConnectionMessage(message: ConnectionMessage): SpeechConnectionMessage {\r\n        let path = null;\r\n        let requestId = null;\r\n        let contentType = null;\r\n        // let requestTimestamp = null;\r\n        let streamId = null;\r\n        const additionalHeaders: IStringDictionary<string> = {};\r\n\r\n        if (message.headers) {\r\n            for (const headerName in message.headers) {\r\n                if (headerName) {\r\n                    if (headerName.toLowerCase() === HeaderNames.Path.toLowerCase()) {\r\n                        path = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.RequestId.toLowerCase()) {\r\n                        requestId = message.headers[headerName];\r\n                    // } else if (headerName.toLowerCase() === HeaderNames.RequestTimestamp.toLowerCase()) {\r\n                       //  requestTimestamp = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.ContentType.toLowerCase()) {\r\n                        contentType = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.RequestStreamId.toLowerCase()) {\r\n                        streamId = message.headers[headerName];\r\n                    } else {\r\n                        additionalHeaders[headerName] = message.headers[headerName];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return new SpeechConnectionMessage(\r\n            message.messageType,\r\n            path,\r\n            requestId,\r\n            contentType,\r\n            message.body,\r\n            streamId,\r\n            additionalHeaders,\r\n            message.id);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}