{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { Contracts } from \"./Contracts\";\nimport { PronunciationAssessmentGradingSystem, PronunciationAssessmentGranularity, PropertyCollection, PropertyId } from \"./Exports\";\n/**\n * Pronunciation assessment configuration.\n * @class PronunciationAssessmentConfig\n * Added in version 1.15.0.\n */\n\nexport class PronunciationAssessmentConfig {\n  /**\n   * PronunciationAssessmentConfig constructor.\n   * @constructor\n   * @param {string} referenceText\n   * @param gradingSystem\n   * @param granularity\n   * @param enableMiscue\n   */\n  constructor(referenceText, gradingSystem = PronunciationAssessmentGradingSystem.FivePoint, granularity = PronunciationAssessmentGranularity.Phoneme, enableMiscue = false) {\n    Contracts.throwIfNullOrUndefined(referenceText, \"referenceText\");\n    this.privProperties = new PropertyCollection();\n    this.privProperties.setProperty(PropertyId.PronunciationAssessment_ReferenceText, referenceText);\n    this.privProperties.setProperty(PropertyId.PronunciationAssessment_GradingSystem, PronunciationAssessmentGradingSystem[gradingSystem]);\n    this.privProperties.setProperty(PropertyId.PronunciationAssessment_Granularity, PronunciationAssessmentGranularity[granularity]);\n    this.privProperties.setProperty(PropertyId.PronunciationAssessment_EnableMiscue, String(enableMiscue));\n  }\n  /**\n   * @member PronunciationAssessmentConfig.fromJSON\n   * @function\n   * @public\n   * @param {string} json The json string containing the pronunciation assessment parameters.\n   * @return {PronunciationAssessmentConfig} Instance of PronunciationAssessmentConfig\n   * @summary Creates an instance of the PronunciationAssessmentConfig from json.\n   */\n\n\n  static fromJSON(json) {\n    Contracts.throwIfNullOrUndefined(json, \"json\");\n    const config = new PronunciationAssessmentConfig(\"\");\n    config.privProperties = new PropertyCollection();\n    config.properties.setProperty(PropertyId.PronunciationAssessment_Json, json);\n    return config;\n  }\n\n  toJSON() {\n    this.updateJson();\n    return this.privProperties.getProperty(PropertyId.PronunciationAssessment_Params);\n  }\n\n  applyTo(recognizer) {\n    this.updateJson();\n    const recoBase = recognizer.internalData;\n    recoBase.speechContext.setPronunciationAssessmentParams(this.properties.getProperty(PropertyId.PronunciationAssessment_Params));\n  }\n  /**\n   * Gets the reference text.\n   * @member PronunciationAssessmentConfig.prototype.referenceText\n   * @function\n   * @public\n   * @returns {string} Reference text.\n   */\n\n\n  get referenceText() {\n    return this.properties.getProperty(PropertyId.PronunciationAssessment_ReferenceText);\n  }\n  /**\n   * Gets/Sets the reference text.\n   * @member PronunciationAssessmentConfig.prototype.referenceText\n   * @function\n   * @public\n   * @param {string} referenceText - Reference text.\n   */\n\n\n  set referenceText(referenceText) {\n    Contracts.throwIfNullOrWhitespace(referenceText, \"referenceText\");\n    this.properties.setProperty(PropertyId.PronunciationAssessment_ReferenceText, referenceText);\n  }\n  /**\n   * Sets the phoneme alphabet.\n   * The valid values are \"SAPI\" (default) and \"IPA\".\n   * Added in version 1.20.0\n   * @member PronunciationAssessmentConfig.prototype.phonemeAlphabet\n   * @function\n   * @public\n   * @param {string} phonemeAlphabet - Phoneme alphabet.\n   */\n\n\n  set phonemeAlphabet(phonemeAlphabet) {\n    Contracts.throwIfNullOrWhitespace(phonemeAlphabet, \"phonemeAlphabet\");\n    this.privPhonemeAlphabet = phonemeAlphabet;\n  }\n  /**\n   * Sets the nbest phoneme count\n   * Added in version 1.20.0\n   * @member PronunciationAssessmentConfig.prototype.nbestPhonemeCount\n   * @function\n   * @public\n   * @param {number} nbestPhonemeCount - NBest phoneme count.\n   */\n\n\n  set nbestPhonemeCount(nbestPhonemeCount) {\n    this.privNBestPhonemeCount = nbestPhonemeCount;\n  }\n  /**\n   * @member PronunciationAssessmentConfig.prototype.properties\n   * @function\n   * @public\n   * @return {PropertyCollection} Properties of the config.\n   * @summary Gets a pronunciation assessment config properties\n   */\n\n\n  get properties() {\n    return this.privProperties;\n  }\n\n  updateJson() {\n    const jsonString = this.privProperties.getProperty(PropertyId.PronunciationAssessment_Json, \"{}\");\n    const paramsJson = JSON.parse(jsonString);\n    const referenceText = this.privProperties.getProperty(PropertyId.PronunciationAssessment_ReferenceText);\n\n    if (referenceText) {\n      paramsJson.referenceText = referenceText;\n    }\n\n    const gradingSystem = this.privProperties.getProperty(PropertyId.PronunciationAssessment_GradingSystem);\n\n    if (gradingSystem) {\n      paramsJson.gradingSystem = gradingSystem;\n    }\n\n    const granularity = this.privProperties.getProperty(PropertyId.PronunciationAssessment_Granularity);\n\n    if (granularity) {\n      paramsJson.granularity = granularity;\n    }\n\n    if (this.privPhonemeAlphabet) {\n      paramsJson.phonemeAlphabet = this.privPhonemeAlphabet;\n    }\n\n    if (this.privNBestPhonemeCount) {\n      paramsJson.nbestPhonemeCount = this.privNBestPhonemeCount;\n    } // always set dimension to Comprehensive\n\n\n    paramsJson.dimension = \"Comprehensive\";\n    const enableMiscueString = this.privProperties.getProperty(PropertyId.PronunciationAssessment_EnableMiscue);\n\n    if (enableMiscueString === \"true\") {\n      paramsJson.enableMiscue = true;\n    } else if (enableMiscueString === \"false\") {\n      paramsJson.enableMiscue = false;\n    }\n\n    this.privProperties.setProperty(PropertyId.PronunciationAssessment_Params, JSON.stringify(paramsJson));\n  }\n\n}","map":{"version":3,"sources":["src/sdk/PronunciationAssessmentConfig.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ServiceRecognizerBase } from \"../common.speech/ServiceRecognizerBase\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    PronunciationAssessmentGradingSystem,\r\n    PronunciationAssessmentGranularity,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer\r\n} from \"./Exports\";\r\n\r\ninterface PronunciationAssessmentJSON {\r\n    referenceText: string;\r\n    gradingSystem: string;\r\n    granularity: string;\r\n    phonemeAlphabet: string;\r\n    nbestPhonemeCount: number;\r\n    dimension: string;\r\n    enableMiscue: boolean;\r\n}\r\n\r\n/**\r\n * Pronunciation assessment configuration.\r\n * @class PronunciationAssessmentConfig\r\n * Added in version 1.15.0.\r\n */\r\nexport class PronunciationAssessmentConfig {\r\n    private privProperties: PropertyCollection;\r\n    private privPhonemeAlphabet: string;\r\n    private privNBestPhonemeCount: number;\r\n\r\n    /**\r\n     * PronunciationAssessmentConfig constructor.\r\n     * @constructor\r\n     * @param {string} referenceText\r\n     * @param gradingSystem\r\n     * @param granularity\r\n     * @param enableMiscue\r\n     */\r\n    public constructor(referenceText: string,\r\n                       gradingSystem: PronunciationAssessmentGradingSystem = PronunciationAssessmentGradingSystem.FivePoint,\r\n                       granularity: PronunciationAssessmentGranularity = PronunciationAssessmentGranularity.Phoneme,\r\n                       enableMiscue: boolean = false) {\r\n        Contracts.throwIfNullOrUndefined(referenceText, \"referenceText\");\r\n        this.privProperties = new PropertyCollection();\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_ReferenceText, referenceText);\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_GradingSystem, PronunciationAssessmentGradingSystem[gradingSystem]);\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_Granularity, PronunciationAssessmentGranularity[granularity]);\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_EnableMiscue, String(enableMiscue));\r\n    }\r\n\r\n    /**\r\n     * @member PronunciationAssessmentConfig.fromJSON\r\n     * @function\r\n     * @public\r\n     * @param {string} json The json string containing the pronunciation assessment parameters.\r\n     * @return {PronunciationAssessmentConfig} Instance of PronunciationAssessmentConfig\r\n     * @summary Creates an instance of the PronunciationAssessmentConfig from json.\r\n     */\r\n    public static fromJSON(json: string): PronunciationAssessmentConfig {\r\n        Contracts.throwIfNullOrUndefined(json, \"json\");\r\n        const config = new PronunciationAssessmentConfig(\"\");\r\n        config.privProperties = new PropertyCollection();\r\n        config.properties.setProperty(PropertyId.PronunciationAssessment_Json, json);\r\n        return config;\r\n    }\r\n\r\n    public toJSON(): string {\r\n        this.updateJson();\r\n        return this.privProperties.getProperty(PropertyId.PronunciationAssessment_Params);\r\n    }\r\n\r\n    public applyTo(recognizer: Recognizer): void {\r\n        this.updateJson();\r\n        const recoBase = recognizer.internalData as ServiceRecognizerBase;\r\n        recoBase.speechContext.setPronunciationAssessmentParams(this.properties.getProperty(PropertyId.PronunciationAssessment_Params));\r\n    }\r\n\r\n    /**\r\n     * Gets the reference text.\r\n     * @member PronunciationAssessmentConfig.prototype.referenceText\r\n     * @function\r\n     * @public\r\n     * @returns {string} Reference text.\r\n     */\r\n    public get referenceText(): string {\r\n        return this.properties.getProperty(PropertyId.PronunciationAssessment_ReferenceText);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the reference text.\r\n     * @member PronunciationAssessmentConfig.prototype.referenceText\r\n     * @function\r\n     * @public\r\n     * @param {string} referenceText - Reference text.\r\n     */\r\n    public set referenceText(referenceText: string) {\r\n        Contracts.throwIfNullOrWhitespace(referenceText, \"referenceText\");\r\n        this.properties.setProperty(PropertyId.PronunciationAssessment_ReferenceText, referenceText);\r\n    }\r\n\r\n    /**\r\n     * Sets the phoneme alphabet.\r\n     * The valid values are \"SAPI\" (default) and \"IPA\".\r\n     * Added in version 1.20.0\r\n     * @member PronunciationAssessmentConfig.prototype.phonemeAlphabet\r\n     * @function\r\n     * @public\r\n     * @param {string} phonemeAlphabet - Phoneme alphabet.\r\n     */\r\n    public set phonemeAlphabet(phonemeAlphabet: string) {\r\n        Contracts.throwIfNullOrWhitespace(phonemeAlphabet, \"phonemeAlphabet\");\r\n        this.privPhonemeAlphabet = phonemeAlphabet;\r\n    }\r\n\r\n    /**\r\n     * Sets the nbest phoneme count\r\n     * Added in version 1.20.0\r\n     * @member PronunciationAssessmentConfig.prototype.nbestPhonemeCount\r\n     * @function\r\n     * @public\r\n     * @param {number} nbestPhonemeCount - NBest phoneme count.\r\n     */\r\n    public set nbestPhonemeCount(nbestPhonemeCount: number) {\r\n        this.privNBestPhonemeCount = nbestPhonemeCount;\r\n    }\r\n\r\n    /**\r\n     * @member PronunciationAssessmentConfig.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @return {PropertyCollection} Properties of the config.\r\n     * @summary Gets a pronunciation assessment config properties\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    private updateJson(): void {\r\n        const jsonString = this.privProperties.getProperty(PropertyId.PronunciationAssessment_Json, \"{}\");\r\n        const paramsJson: PronunciationAssessmentJSON = JSON.parse(jsonString) as PronunciationAssessmentJSON;\r\n\r\n        const referenceText = this.privProperties.getProperty(PropertyId.PronunciationAssessment_ReferenceText);\r\n        if (referenceText) {\r\n            paramsJson.referenceText = referenceText;\r\n        }\r\n\r\n        const gradingSystem = this.privProperties.getProperty(PropertyId.PronunciationAssessment_GradingSystem);\r\n        if (gradingSystem) {\r\n            paramsJson.gradingSystem = gradingSystem;\r\n        }\r\n\r\n        const granularity = this.privProperties.getProperty(PropertyId.PronunciationAssessment_Granularity);\r\n        if (granularity) {\r\n            paramsJson.granularity = granularity;\r\n        }\r\n\r\n        if (this.privPhonemeAlphabet) {\r\n            paramsJson.phonemeAlphabet = this.privPhonemeAlphabet;\r\n        }\r\n\r\n        if (this.privNBestPhonemeCount) {\r\n            paramsJson.nbestPhonemeCount = this.privNBestPhonemeCount;\r\n        }\r\n\r\n        // always set dimension to Comprehensive\r\n        paramsJson.dimension = \"Comprehensive\";\r\n\r\n        const enableMiscueString = this.privProperties.getProperty(PropertyId.PronunciationAssessment_EnableMiscue);\r\n        if (enableMiscueString === \"true\") {\r\n            paramsJson.enableMiscue = true;\r\n        } else if (enableMiscueString === \"false\") {\r\n            paramsJson.enableMiscue = false;\r\n        }\r\n\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_Params, JSON.stringify(paramsJson));\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}