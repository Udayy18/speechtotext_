{"ast":null,"code":"'use strict';\n\nconst encodings = new Set(['json', 'buffer', 'string']);\n\nmodule.exports = mkrequest => (...args) => {\n  const statusCodes = new Set();\n  let method;\n  let encoding;\n  let headers;\n  let baseurl = '';\n  args.forEach(arg => {\n    if (typeof arg === 'string') {\n      if (arg.toUpperCase() === arg) {\n        if (method) {\n          const msg = `Can't set method to ${arg}, already set to ${method}.`;\n          throw new Error(msg);\n        } else {\n          method = arg;\n        }\n      } else if (arg.startsWith('http:') || arg.startsWith('https:')) {\n        baseurl = arg;\n      } else {\n        if (encodings.has(arg)) {\n          encoding = arg;\n        } else {\n          throw new Error(`Unknown encoding, ${arg}`);\n        }\n      }\n    } else if (typeof arg === 'number') {\n      statusCodes.add(arg);\n    } else if (typeof arg === 'object') {\n      if (Array.isArray(arg) || arg instanceof Set) {\n        arg.forEach(code => statusCodes.add(code));\n      } else {\n        if (headers) {\n          throw new Error('Cannot set headers twice.');\n        }\n\n        headers = arg;\n      }\n    } else {\n      throw new Error(`Unknown type: ${typeof arg}`);\n    }\n  });\n  if (!method) method = 'GET';\n\n  if (statusCodes.size === 0) {\n    statusCodes.add(200);\n  }\n\n  return mkrequest(statusCodes, method, encoding, headers, baseurl);\n};","map":{"version":3,"sources":["C:/Users/91959/Desktop/js_speechtotext/AzureSpeechReactSample/node_modules/bent/src/core.js"],"names":["encodings","Set","module","exports","mkrequest","args","statusCodes","method","encoding","headers","baseurl","forEach","arg","toUpperCase","msg","Error","startsWith","has","add","Array","isArray","code","size"],"mappings":"AAAA;;AACA,MAAMA,SAAS,GAAG,IAAIC,GAAJ,CAAQ,CAAC,MAAD,EAAS,QAAT,EAAmB,QAAnB,CAAR,CAAlB;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,SAAS,IAAI,CAAC,GAAGC,IAAJ,KAAa;AACzC,QAAMC,WAAW,GAAG,IAAIL,GAAJ,EAApB;AACA,MAAIM,MAAJ;AACA,MAAIC,QAAJ;AACA,MAAIC,OAAJ;AACA,MAAIC,OAAO,GAAG,EAAd;AAEAL,EAAAA,IAAI,CAACM,OAAL,CAAaC,GAAG,IAAI;AAClB,QAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC3B,UAAIA,GAAG,CAACC,WAAJ,OAAsBD,GAA1B,EAA+B;AAC7B,YAAIL,MAAJ,EAAY;AACV,gBAAMO,GAAG,GAAI,uBAAsBF,GAAI,oBAAmBL,MAAO,GAAjE;AACA,gBAAM,IAAIQ,KAAJ,CAAUD,GAAV,CAAN;AACD,SAHD,MAGO;AACLP,UAAAA,MAAM,GAAGK,GAAT;AACD;AACF,OAPD,MAOO,IAAIA,GAAG,CAACI,UAAJ,CAAe,OAAf,KAA2BJ,GAAG,CAACI,UAAJ,CAAe,QAAf,CAA/B,EAAyD;AAC9DN,QAAAA,OAAO,GAAGE,GAAV;AACD,OAFM,MAEA;AACL,YAAIZ,SAAS,CAACiB,GAAV,CAAcL,GAAd,CAAJ,EAAwB;AACtBJ,UAAAA,QAAQ,GAAGI,GAAX;AACD,SAFD,MAEO;AACL,gBAAM,IAAIG,KAAJ,CAAW,qBAAoBH,GAAI,EAAnC,CAAN;AACD;AACF;AACF,KAjBD,MAiBO,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAClCN,MAAAA,WAAW,CAACY,GAAZ,CAAgBN,GAAhB;AACD,KAFM,MAEA,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAClC,UAAIO,KAAK,CAACC,OAAN,CAAcR,GAAd,KAAsBA,GAAG,YAAYX,GAAzC,EAA8C;AAC5CW,QAAAA,GAAG,CAACD,OAAJ,CAAYU,IAAI,IAAIf,WAAW,CAACY,GAAZ,CAAgBG,IAAhB,CAApB;AACD,OAFD,MAEO;AACL,YAAIZ,OAAJ,EAAa;AACX,gBAAM,IAAIM,KAAJ,CAAU,2BAAV,CAAN;AACD;;AACDN,QAAAA,OAAO,GAAGG,GAAV;AACD;AACF,KATM,MASA;AACL,YAAM,IAAIG,KAAJ,CAAW,iBAAgB,OAAOH,GAAI,EAAtC,CAAN;AACD;AACF,GAhCD;AAkCA,MAAI,CAACL,MAAL,EAAaA,MAAM,GAAG,KAAT;;AACb,MAAID,WAAW,CAACgB,IAAZ,KAAqB,CAAzB,EAA4B;AAC1BhB,IAAAA,WAAW,CAACY,GAAZ,CAAgB,GAAhB;AACD;;AAED,SAAOd,SAAS,CAACE,WAAD,EAAcC,MAAd,EAAsBC,QAAtB,EAAgCC,OAAhC,EAAyCC,OAAzC,CAAhB;AACD,CA/CD","sourcesContent":["'use strict'\nconst encodings = new Set(['json', 'buffer', 'string'])\n\nmodule.exports = mkrequest => (...args) => {\n  const statusCodes = new Set()\n  let method\n  let encoding\n  let headers\n  let baseurl = ''\n\n  args.forEach(arg => {\n    if (typeof arg === 'string') {\n      if (arg.toUpperCase() === arg) {\n        if (method) {\n          const msg = `Can't set method to ${arg}, already set to ${method}.`\n          throw new Error(msg)\n        } else {\n          method = arg\n        }\n      } else if (arg.startsWith('http:') || arg.startsWith('https:')) {\n        baseurl = arg\n      } else {\n        if (encodings.has(arg)) {\n          encoding = arg\n        } else {\n          throw new Error(`Unknown encoding, ${arg}`)\n        }\n      }\n    } else if (typeof arg === 'number') {\n      statusCodes.add(arg)\n    } else if (typeof arg === 'object') {\n      if (Array.isArray(arg) || arg instanceof Set) {\n        arg.forEach(code => statusCodes.add(code))\n      } else {\n        if (headers) {\n          throw new Error('Cannot set headers twice.')\n        }\n        headers = arg\n      }\n    } else {\n      throw new Error(`Unknown type: ${typeof arg}`)\n    }\n  })\n\n  if (!method) method = 'GET'\n  if (statusCodes.size === 0) {\n    statusCodes.add(200)\n  }\n\n  return mkrequest(statusCodes, method, encoding, headers, baseurl)\n}\n"]},"metadata":{},"sourceType":"script"}