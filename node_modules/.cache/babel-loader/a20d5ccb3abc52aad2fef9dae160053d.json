{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ObjectDisposedError } from \"./Error\";\nimport { createNoDashGuid } from \"./Guid\";\nexport class EventSource {\n  constructor(metadata) {\n    this.privEventListeners = {};\n    this.privIsDisposed = false;\n    this.privConsoleListener = undefined;\n    this.privMetadata = metadata;\n  }\n\n  onEvent(event) {\n    if (this.isDisposed()) {\n      throw new ObjectDisposedError(\"EventSource\");\n    }\n\n    if (this.metadata) {\n      for (const paramName in this.metadata) {\n        if (paramName) {\n          if (event.metadata) {\n            if (!event.metadata[paramName]) {\n              event.metadata[paramName] = this.metadata[paramName];\n            }\n          }\n        }\n      }\n    }\n\n    for (const eventId in this.privEventListeners) {\n      if (eventId && this.privEventListeners[eventId]) {\n        this.privEventListeners[eventId](event);\n      }\n    }\n  }\n\n  attach(onEventCallback) {\n    const id = createNoDashGuid();\n    this.privEventListeners[id] = onEventCallback;\n    return {\n      detach: () => {\n        delete this.privEventListeners[id];\n        return Promise.resolve();\n      }\n    };\n  }\n\n  attachListener(listener) {\n    return this.attach(e => listener.onEvent(e));\n  }\n\n  attachConsoleListener(listener) {\n    if (!!this.privConsoleListener) {\n      void this.privConsoleListener.detach(); // Detach implementation for eventListeners is synchronous\n    }\n\n    this.privConsoleListener = this.attach(e => listener.onEvent(e));\n    return this.privConsoleListener;\n  }\n\n  isDisposed() {\n    return this.privIsDisposed;\n  }\n\n  dispose() {\n    this.privEventListeners = null;\n    this.privIsDisposed = true;\n  }\n\n  get metadata() {\n    return this.privMetadata;\n  }\n\n}","map":{"version":3,"sources":["src/common/EventSource.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SAAS,mBAAT,QAAoC,SAApC;AACA,SAAS,gBAAT,QAAiC,QAAjC;AAMA,OAAM,MAAO,WAAP,CAAkB;AAMpB,EAAA,WAAA,CAAmB,QAAnB,EAAuD;AAL/C,SAAA,kBAAA,GAAiE,EAAjE;AAEA,SAAA,cAAA,GAA0B,KAA1B;AACA,SAAA,mBAAA,GAAmC,SAAnC;AAGJ,SAAK,YAAL,GAAoB,QAApB;AACH;;AAEM,EAAA,OAAO,CAAC,KAAD,EAAc;AACxB,QAAI,KAAK,UAAL,EAAJ,EAAuB;AACnB,YAAO,IAAI,mBAAJ,CAAwB,aAAxB,CAAP;AACH;;AAED,QAAI,KAAK,QAAT,EAAmB;AACf,WAAK,MAAM,SAAX,IAAwB,KAAK,QAA7B,EAAuC;AACnC,YAAI,SAAJ,EAAe;AACX,cAAI,KAAK,CAAC,QAAV,EAAoB;AAChB,gBAAI,CAAC,KAAK,CAAC,QAAN,CAAe,SAAf,CAAL,EAAgC;AAC5B,cAAA,KAAK,CAAC,QAAN,CAAe,SAAf,IAA4B,KAAK,QAAL,CAAc,SAAd,CAA5B;AACH;AACJ;AACJ;AACJ;AACJ;;AAED,SAAK,MAAM,OAAX,IAAsB,KAAK,kBAA3B,EAA+C;AAC3C,UAAI,OAAO,IAAI,KAAK,kBAAL,CAAwB,OAAxB,CAAf,EAAiD;AAC7C,aAAK,kBAAL,CAAwB,OAAxB,EAAiC,KAAjC;AACH;AACJ;AACJ;;AAEM,EAAA,MAAM,CAAC,eAAD,EAAyC;AAClD,UAAM,EAAE,GAAG,gBAAgB,EAA3B;AACA,SAAK,kBAAL,CAAwB,EAAxB,IAA8B,eAA9B;AACA,WAAO;AACH,MAAA,MAAM,EAAE,MAAoB;AACxB,eAAO,KAAK,kBAAL,CAAwB,EAAxB,CAAP;AACA,eAAO,OAAO,CAAC,OAAR,EAAP;AACH;AAJE,KAAP;AAMH;;AAEM,EAAA,cAAc,CAAC,QAAD,EAAiC;AAClD,WAAO,KAAK,MAAL,CAAa,CAAD,IAAqB,QAAQ,CAAC,OAAT,CAAiB,CAAjB,CAAjC,CAAP;AACH;;AAEM,EAAA,qBAAqB,CAAC,QAAD,EAAiC;AACzD,QAAI,CAAC,CAAC,KAAK,mBAAX,EAAgC;AAC5B,WAAK,KAAK,mBAAL,CAAyB,MAAzB,EAAL,CAD4B,CACY;AAC3C;;AACD,SAAK,mBAAL,GAA2B,KAAK,MAAL,CAAa,CAAD,IAAqB,QAAQ,CAAC,OAAT,CAAiB,CAAjB,CAAjC,CAA3B;AACA,WAAO,KAAK,mBAAZ;AACH;;AAEM,EAAA,UAAU,GAAA;AACb,WAAO,KAAK,cAAZ;AACH;;AAEM,EAAA,OAAO,GAAA;AACV,SAAK,kBAAL,GAA0B,IAA1B;AACA,SAAK,cAAL,GAAsB,IAAtB;AACH;;AAED,MAAW,QAAX,GAAmB;AACf,WAAO,KAAK,YAAZ;AACH;;AApEmB","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ObjectDisposedError } from \"./Error\";\r\nimport { createNoDashGuid } from \"./Guid\";\r\nimport { IDetachable } from \"./IDetachable\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\nimport { IEventListener, IEventSource } from \"./IEventSource\";\r\nimport { PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport class EventSource<TEvent extends PlatformEvent> implements IEventSource<TEvent> {\r\n    private privEventListeners: IStringDictionary<(event: TEvent) => void> = {};\r\n    private privMetadata: IStringDictionary<string>;\r\n    private privIsDisposed: boolean = false;\r\n    private privConsoleListener: IDetachable = undefined;\r\n\r\n    public constructor(metadata?: IStringDictionary<string>) {\r\n        this.privMetadata = metadata;\r\n    }\r\n\r\n    public onEvent(event: TEvent): void {\r\n        if (this.isDisposed()) {\r\n            throw (new ObjectDisposedError(\"EventSource\"));\r\n        }\r\n\r\n        if (this.metadata) {\r\n            for (const paramName in this.metadata) {\r\n                if (paramName) {\r\n                    if (event.metadata) {\r\n                        if (!event.metadata[paramName]) {\r\n                            event.metadata[paramName] = this.metadata[paramName];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (const eventId in this.privEventListeners) {\r\n            if (eventId && this.privEventListeners[eventId]) {\r\n                this.privEventListeners[eventId](event);\r\n            }\r\n        }\r\n    }\r\n\r\n    public attach(onEventCallback: (event: TEvent) => void): IDetachable {\r\n        const id = createNoDashGuid();\r\n        this.privEventListeners[id] = onEventCallback;\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                delete this.privEventListeners[id];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public attachListener(listener: IEventListener<TEvent>): IDetachable {\r\n        return this.attach((e: TEvent): void => listener.onEvent(e));\r\n    }\r\n\r\n    public attachConsoleListener(listener: IEventListener<TEvent>): IDetachable {\r\n        if (!!this.privConsoleListener) {\r\n            void this.privConsoleListener.detach(); // Detach implementation for eventListeners is synchronous\r\n        }\r\n        this.privConsoleListener = this.attach((e: TEvent): void => listener.onEvent(e));\r\n        return this.privConsoleListener;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.privEventListeners = null;\r\n        this.privIsDisposed = true;\r\n    }\r\n\r\n    public get metadata(): IStringDictionary<string> {\r\n        return this.privMetadata;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}