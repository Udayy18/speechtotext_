{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ObjectDisposedError } from \"./Error\";\nexport class List {\n  constructor(list) {\n    this.privSubscriptionIdCounter = 0;\n    this.privAddSubscriptions = {};\n    this.privRemoveSubscriptions = {};\n    this.privDisposedSubscriptions = {};\n    this.privDisposeReason = null;\n    this.privList = []; // copy the list rather than taking as is.\n\n    if (list) {\n      for (const item of list) {\n        this.privList.push(item);\n      }\n    }\n  }\n\n  get(itemIndex) {\n    this.throwIfDisposed();\n    return this.privList[itemIndex];\n  }\n\n  first() {\n    return this.get(0);\n  }\n\n  last() {\n    return this.get(this.length() - 1);\n  }\n\n  add(item) {\n    this.throwIfDisposed();\n    this.insertAt(this.privList.length, item);\n  }\n\n  insertAt(index, item) {\n    this.throwIfDisposed();\n\n    if (index === 0) {\n      this.privList.unshift(item);\n    } else if (index === this.privList.length) {\n      this.privList.push(item);\n    } else {\n      this.privList.splice(index, 0, item);\n    }\n\n    this.triggerSubscriptions(this.privAddSubscriptions);\n  }\n\n  removeFirst() {\n    this.throwIfDisposed();\n    return this.removeAt(0);\n  }\n\n  removeLast() {\n    this.throwIfDisposed();\n    return this.removeAt(this.length() - 1);\n  }\n\n  removeAt(index) {\n    this.throwIfDisposed();\n    return this.remove(index, 1)[0];\n  }\n\n  remove(index, count) {\n    this.throwIfDisposed();\n    const removedElements = this.privList.splice(index, count);\n    this.triggerSubscriptions(this.privRemoveSubscriptions);\n    return removedElements;\n  }\n\n  clear() {\n    this.throwIfDisposed();\n    this.remove(0, this.length());\n  }\n\n  length() {\n    this.throwIfDisposed();\n    return this.privList.length;\n  }\n\n  onAdded(addedCallback) {\n    this.throwIfDisposed();\n    const subscriptionId = this.privSubscriptionIdCounter++;\n    this.privAddSubscriptions[subscriptionId] = addedCallback;\n    return {\n      detach: () => {\n        delete this.privAddSubscriptions[subscriptionId];\n        return Promise.resolve();\n      }\n    };\n  }\n\n  onRemoved(removedCallback) {\n    this.throwIfDisposed();\n    const subscriptionId = this.privSubscriptionIdCounter++;\n    this.privRemoveSubscriptions[subscriptionId] = removedCallback;\n    return {\n      detach: () => {\n        delete this.privRemoveSubscriptions[subscriptionId];\n        return Promise.resolve();\n      }\n    };\n  }\n\n  onDisposed(disposedCallback) {\n    this.throwIfDisposed();\n    const subscriptionId = this.privSubscriptionIdCounter++;\n    this.privDisposedSubscriptions[subscriptionId] = disposedCallback;\n    return {\n      detach: () => {\n        delete this.privDisposedSubscriptions[subscriptionId];\n        return Promise.resolve();\n      }\n    };\n  }\n\n  join(seperator) {\n    this.throwIfDisposed();\n    return this.privList.join(seperator);\n  }\n\n  toArray() {\n    const cloneCopy = Array();\n    this.privList.forEach(val => {\n      cloneCopy.push(val);\n    });\n    return cloneCopy;\n  }\n\n  any(callback) {\n    this.throwIfDisposed();\n\n    if (callback) {\n      return this.where(callback).length() > 0;\n    } else {\n      return this.length() > 0;\n    }\n  }\n\n  all(callback) {\n    this.throwIfDisposed();\n    return this.where(callback).length() === this.length();\n  }\n\n  forEach(callback) {\n    this.throwIfDisposed();\n\n    for (let i = 0; i < this.length(); i++) {\n      callback(this.privList[i], i);\n    }\n  }\n\n  select(callback) {\n    this.throwIfDisposed();\n    const selectList = [];\n\n    for (let i = 0; i < this.privList.length; i++) {\n      selectList.push(callback(this.privList[i], i));\n    }\n\n    return new List(selectList);\n  }\n\n  where(callback) {\n    this.throwIfDisposed();\n    const filteredList = new List();\n\n    for (let i = 0; i < this.privList.length; i++) {\n      if (callback(this.privList[i], i)) {\n        filteredList.add(this.privList[i]);\n      }\n    }\n\n    return filteredList;\n  }\n\n  orderBy(compareFn) {\n    this.throwIfDisposed();\n    const clonedArray = this.toArray();\n    const orderedArray = clonedArray.sort(compareFn);\n    return new List(orderedArray);\n  }\n\n  orderByDesc(compareFn) {\n    this.throwIfDisposed();\n    return this.orderBy((a, b) => compareFn(b, a));\n  }\n\n  clone() {\n    this.throwIfDisposed();\n    return new List(this.toArray());\n  }\n\n  concat(list) {\n    this.throwIfDisposed();\n    return new List(this.privList.concat(list.toArray()));\n  }\n\n  concatArray(array) {\n    this.throwIfDisposed();\n    return new List(this.privList.concat(array));\n  }\n\n  isDisposed() {\n    return this.privList == null;\n  }\n\n  dispose(reason) {\n    if (!this.isDisposed()) {\n      this.privDisposeReason = reason;\n      this.privList = null;\n      this.privAddSubscriptions = null;\n      this.privRemoveSubscriptions = null;\n      this.triggerSubscriptions(this.privDisposedSubscriptions);\n    }\n  }\n\n  throwIfDisposed() {\n    if (this.isDisposed()) {\n      throw new ObjectDisposedError(\"List\", this.privDisposeReason);\n    }\n  }\n\n  triggerSubscriptions(subscriptions) {\n    if (subscriptions) {\n      for (const subscriptionId in subscriptions) {\n        if (subscriptionId) {\n          subscriptions[subscriptionId]();\n        }\n      }\n    }\n  }\n\n}","map":{"version":3,"sources":["src/common/List.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ObjectDisposedError } from \"./Error\";\r\nimport { IDetachable } from \"./IDetachable\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\nimport { IDisposable } from \"./IDisposable\";\r\n\r\nexport interface IList<TItem> extends IDisposable {\r\n    get(itemIndex: number): TItem;\r\n    first(): TItem;\r\n    last(): TItem;\r\n\r\n    add(item: TItem): void;\r\n    insertAt(index: number, item: TItem): void;\r\n\r\n    removeFirst(): TItem;\r\n    removeLast(): TItem;\r\n    removeAt(index: number): TItem;\r\n    remove(index: number, count: number): TItem[];\r\n    clear(): void;\r\n\r\n    length(): number;\r\n\r\n    onAdded(addedCallback: () => void): IDetachable;\r\n    onRemoved(removedCallback: () => void): IDetachable;\r\n    onDisposed(disposedCallback: () => void): IDetachable;\r\n\r\n    join(seperator?: string): string;\r\n\r\n    toArray(): TItem[];\r\n\r\n    any(callback?: (item: TItem, index: number) => boolean): boolean;\r\n    all(callback: (item: TItem) => boolean): boolean;\r\n    forEach(callback: (item: TItem, index: number) => void): void;\r\n    select<T2>(callback: (item: TItem, index: number) => T2): List<T2>;\r\n    where(callback: (item: TItem, index: number) => boolean): List<TItem>;\r\n    orderBy(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\r\n    orderByDesc(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\r\n    clone(): List<TItem>;\r\n    concat(list: List<TItem>): List<TItem>;\r\n    concatArray(array: TItem[]): List<TItem>;\r\n}\r\n\r\nexport class List<TItem> implements IList<TItem>  {\r\n    private privList: TItem[];\r\n    private privSubscriptionIdCounter: number = 0;\r\n    private privAddSubscriptions: IStringDictionary<() => void> = {};\r\n    private privRemoveSubscriptions: IStringDictionary<() => void> = {};\r\n    private privDisposedSubscriptions: IStringDictionary<() => void> = {};\r\n    private privDisposeReason: string = null;\r\n\r\n    public constructor(list?: TItem[]) {\r\n        this.privList = [];\r\n        // copy the list rather than taking as is.\r\n        if (list) {\r\n            for (const item of list) {\r\n                this.privList.push(item);\r\n            }\r\n        }\r\n    }\r\n\r\n    public get(itemIndex: number): TItem {\r\n        this.throwIfDisposed();\r\n        return this.privList[itemIndex];\r\n    }\r\n\r\n    public first(): TItem {\r\n        return this.get(0);\r\n    }\r\n\r\n    public last(): TItem {\r\n        return this.get(this.length() - 1);\r\n    }\r\n\r\n    public add(item: TItem): void {\r\n        this.throwIfDisposed();\r\n        this.insertAt(this.privList.length, item);\r\n    }\r\n\r\n    public insertAt(index: number, item: TItem): void {\r\n        this.throwIfDisposed();\r\n        if (index === 0) {\r\n            this.privList.unshift(item);\r\n        } else if (index === this.privList.length) {\r\n            this.privList.push(item);\r\n        } else {\r\n            this.privList.splice(index, 0, item);\r\n        }\r\n        this.triggerSubscriptions(this.privAddSubscriptions);\r\n    }\r\n\r\n    public removeFirst(): TItem {\r\n        this.throwIfDisposed();\r\n        return this.removeAt(0);\r\n    }\r\n\r\n    public removeLast(): TItem {\r\n        this.throwIfDisposed();\r\n        return this.removeAt(this.length() - 1);\r\n    }\r\n\r\n    public removeAt(index: number): TItem {\r\n        this.throwIfDisposed();\r\n        return this.remove(index, 1)[0];\r\n    }\r\n\r\n    public remove(index: number, count: number): TItem[] {\r\n        this.throwIfDisposed();\r\n        const removedElements = this.privList.splice(index, count);\r\n        this.triggerSubscriptions(this.privRemoveSubscriptions);\r\n        return removedElements;\r\n    }\r\n\r\n    public clear(): void {\r\n        this.throwIfDisposed();\r\n        this.remove(0, this.length());\r\n    }\r\n\r\n    public length(): number {\r\n        this.throwIfDisposed();\r\n        return this.privList.length;\r\n    }\r\n\r\n    public onAdded(addedCallback: () => void): IDetachable {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privAddSubscriptions[subscriptionId] = addedCallback;\r\n\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                delete this.privAddSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public onRemoved(removedCallback: () => void): IDetachable {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privRemoveSubscriptions[subscriptionId] = removedCallback;\r\n\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                delete this.privRemoveSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public onDisposed(disposedCallback: () => void): IDetachable {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privDisposedSubscriptions[subscriptionId] = disposedCallback;\r\n\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                delete this.privDisposedSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public join(seperator?: string): string {\r\n        this.throwIfDisposed();\r\n        return this.privList.join(seperator);\r\n    }\r\n\r\n    public toArray(): TItem[] {\r\n        const cloneCopy = Array<TItem>();\r\n        this.privList.forEach((val: TItem): void => {\r\n            cloneCopy.push(val);\r\n        });\r\n        return cloneCopy;\r\n    }\r\n\r\n    public any(callback?: (item: TItem, index: number) => boolean): boolean {\r\n        this.throwIfDisposed();\r\n        if (callback) {\r\n            return this.where(callback).length() > 0;\r\n        } else {\r\n            return this.length() > 0;\r\n        }\r\n    }\r\n\r\n    public all(callback: (item: TItem) => boolean): boolean {\r\n        this.throwIfDisposed();\r\n        return this.where(callback).length() === this.length();\r\n    }\r\n\r\n    public forEach(callback: (item: TItem, index: number) => void): void {\r\n        this.throwIfDisposed();\r\n        for (let i = 0; i < this.length(); i++) {\r\n            callback(this.privList[i], i);\r\n        }\r\n    }\r\n\r\n    public select<T2>(callback: (item: TItem, index: number) => T2): List<T2> {\r\n        this.throwIfDisposed();\r\n        const selectList: T2[] = [];\r\n        for (let i = 0; i < this.privList.length; i++) {\r\n            selectList.push(callback(this.privList[i], i));\r\n        }\r\n\r\n        return new List<T2>(selectList);\r\n    }\r\n\r\n    public where(callback: (item: TItem, index: number) => boolean): List<TItem> {\r\n        this.throwIfDisposed();\r\n        const filteredList = new List<TItem>();\r\n        for (let i = 0; i < this.privList.length; i++) {\r\n            if (callback(this.privList[i], i)) {\r\n                filteredList.add(this.privList[i]);\r\n            }\r\n        }\r\n        return filteredList;\r\n    }\r\n\r\n    public orderBy(compareFn: (a: TItem, b: TItem) => number): List<TItem> {\r\n        this.throwIfDisposed();\r\n        const clonedArray = this.toArray();\r\n        const orderedArray = clonedArray.sort(compareFn);\r\n        return new List(orderedArray);\r\n    }\r\n\r\n    public orderByDesc(compareFn: (a: TItem, b: TItem) => number): List<TItem> {\r\n        this.throwIfDisposed();\r\n        return this.orderBy((a: TItem, b: TItem): number => compareFn(b, a));\r\n    }\r\n\r\n    public clone(): List<TItem> {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.toArray());\r\n    }\r\n\r\n    public concat(list: List<TItem>): List<TItem> {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.privList.concat(list.toArray()));\r\n    }\r\n\r\n    public concatArray(array: TItem[]): List<TItem> {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.privList.concat(array));\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privList == null;\r\n    }\r\n\r\n    public dispose(reason?: string): void {\r\n        if (!this.isDisposed()) {\r\n            this.privDisposeReason = reason;\r\n            this.privList = null;\r\n            this.privAddSubscriptions = null;\r\n            this.privRemoveSubscriptions = null;\r\n            this.triggerSubscriptions(this.privDisposedSubscriptions);\r\n        }\r\n    }\r\n\r\n    private throwIfDisposed(): void {\r\n        if (this.isDisposed()) {\r\n            throw new ObjectDisposedError(\"List\", this.privDisposeReason);\r\n        }\r\n    }\r\n\r\n    private triggerSubscriptions(subscriptions: IStringDictionary<() => void>): void {\r\n        if (subscriptions) {\r\n            for (const subscriptionId in subscriptions) {\r\n                if (subscriptionId) {\r\n                    subscriptions[subscriptionId]();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}