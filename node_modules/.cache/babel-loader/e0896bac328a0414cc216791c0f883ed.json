{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { PropertyId } from \"./Exports\";\n/**\n * Represents collection of properties and their values.\n * @class PropertyCollection\n */\n\nexport class PropertyCollection {\n  constructor() {\n    this.privKeys = [];\n    this.privValues = [];\n  }\n  /**\n   * Returns the property value in type String.\n   * Currently only String, int and bool are allowed.\n   * If the name is not available, the specified defaultValue is returned.\n   * @member PropertyCollection.prototype.getProperty\n   * @function\n   * @public\n   * @param {string} key - The parameter name.\n   * @param {string | number | boolean} def - The default value which is returned if the parameter\n   * is not available in the collection.\n   * @returns {string} value of the parameter.\n   */\n\n\n  getProperty(key, def) {\n    let keyToUse;\n\n    if (typeof key === \"string\") {\n      keyToUse = key;\n    } else {\n      keyToUse = PropertyId[key];\n    }\n\n    for (let n = 0; n < this.privKeys.length; n++) {\n      if (this.privKeys[n] === keyToUse) {\n        return this.privValues[n];\n      }\n    }\n\n    if (def === undefined) {\n      return undefined;\n    }\n\n    return String(def);\n  }\n  /**\n   * Sets the String value of the parameter specified by name.\n   * @member PropertyCollection.prototype.setProperty\n   * @function\n   * @public\n   * @param {string} key - The parameter name.\n   * @param {string} value - The value of the parameter.\n   */\n\n\n  setProperty(key, value) {\n    let keyToUse;\n\n    if (typeof key === \"string\") {\n      keyToUse = key;\n    } else {\n      keyToUse = PropertyId[key];\n    }\n\n    for (let n = 0; n < this.privKeys.length; n++) {\n      if (this.privKeys[n] === keyToUse) {\n        this.privValues[n] = value;\n        return;\n      }\n    }\n\n    this.privKeys.push(keyToUse);\n    this.privValues.push(value);\n  }\n  /**\n   * Clones the collection.\n   * @member PropertyCollection.prototype.clone\n   * @function\n   * @public\n   * @returns {PropertyCollection} A copy of the collection.\n   */\n\n\n  clone() {\n    const clonedMap = new PropertyCollection();\n\n    for (let n = 0; n < this.privKeys.length; n++) {\n      clonedMap.privKeys.push(this.privKeys[n]);\n      clonedMap.privValues.push(this.privValues[n]);\n    }\n\n    return clonedMap;\n  }\n  /**\n   * Merges this set of properties into another, no overwrites.\n   * @member PropertyCollection.prototype.mergeTo\n   * @function\n   * @public\n   * @param {PropertyCollection}  destinationCollection - The collection to merge into.\n   */\n\n\n  mergeTo(destinationCollection) {\n    this.privKeys.forEach(key => {\n      if (destinationCollection.getProperty(key, undefined) === undefined) {\n        const value = this.getProperty(key);\n        destinationCollection.setProperty(key, value);\n      }\n    });\n  }\n  /**\n   * Get the keys in Property Collection.\n   * @member PropertyCollection.prototype.keys\n   * @function\n   * @public\n   * @returns {string []} Keys in the collection.\n   */\n\n\n  get keys() {\n    return this.privKeys;\n  }\n\n}","map":{"version":3,"sources":["src/sdk/PropertyCollection.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SAAS,UAAT,QAA2B,WAA3B;AAEA;;;AAGG;;AACH,OAAM,MAAO,kBAAP,CAAyB;AAA/B,EAAA,WAAA,GAAA;AACY,SAAA,QAAA,GAAqB,EAArB;AACA,SAAA,UAAA,GAAuB,EAAvB;AA4GX;AA1GG;;;;;;;;;;;AAWG;;;AACI,EAAA,WAAW,CAAC,GAAD,EAA2B,GAA3B,EAA0D;AACxE,QAAI,QAAJ;;AAEA,QAAI,OAAO,GAAP,KAAe,QAAnB,EAA6B;AACzB,MAAA,QAAQ,GAAG,GAAX;AACH,KAFD,MAEO;AACH,MAAA,QAAQ,GAAG,UAAU,CAAC,GAAD,CAArB;AACH;;AAED,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,QAAL,CAAc,MAAlC,EAA0C,CAAC,EAA3C,EAA+C;AAC3C,UAAI,KAAK,QAAL,CAAc,CAAd,MAAqB,QAAzB,EAAmC;AAC/B,eAAO,KAAK,UAAL,CAAgB,CAAhB,CAAP;AACH;AACJ;;AAED,QAAI,GAAG,KAAK,SAAZ,EAAuB;AACnB,aAAO,SAAP;AACH;;AAED,WAAO,MAAM,CAAC,GAAD,CAAb;AACH;AAED;;;;;;;AAOG;;;AACI,EAAA,WAAW,CAAC,GAAD,EAA2B,KAA3B,EAAwC;AACtD,QAAI,QAAJ;;AAEA,QAAI,OAAO,GAAP,KAAe,QAAnB,EAA6B;AACzB,MAAA,QAAQ,GAAG,GAAX;AACH,KAFD,MAEO;AACH,MAAA,QAAQ,GAAG,UAAU,CAAC,GAAD,CAArB;AACH;;AAED,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,QAAL,CAAc,MAAlC,EAA0C,CAAC,EAA3C,EAA+C;AAC3C,UAAI,KAAK,QAAL,CAAc,CAAd,MAAqB,QAAzB,EAAmC;AAC/B,aAAK,UAAL,CAAgB,CAAhB,IAAqB,KAArB;AACA;AACH;AACJ;;AAED,SAAK,QAAL,CAAc,IAAd,CAAmB,QAAnB;AACA,SAAK,UAAL,CAAgB,IAAhB,CAAqB,KAArB;AACH;AAED;;;;;;AAMG;;;AACI,EAAA,KAAK,GAAA;AACR,UAAM,SAAS,GAAG,IAAI,kBAAJ,EAAlB;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,QAAL,CAAc,MAAlC,EAA0C,CAAC,EAA3C,EAA+C;AAC3C,MAAA,SAAS,CAAC,QAAV,CAAmB,IAAnB,CAAwB,KAAK,QAAL,CAAc,CAAd,CAAxB;AACA,MAAA,SAAS,CAAC,UAAV,CAAqB,IAArB,CAA0B,KAAK,UAAL,CAAgB,CAAhB,CAA1B;AACH;;AAED,WAAO,SAAP;AACH;AAED;;;;;;AAMG;;;AACI,EAAA,OAAO,CAAC,qBAAD,EAA0C;AACpD,SAAK,QAAL,CAAc,OAAd,CAAuB,GAAD,IAAmC;AACrD,UAAI,qBAAqB,CAAC,WAAtB,CAAkC,GAAlC,EAAuC,SAAvC,MAAsD,SAA1D,EAAqE;AACjE,cAAM,KAAK,GAAG,KAAK,WAAL,CAAiB,GAAjB,CAAd;AACA,QAAA,qBAAqB,CAAC,WAAtB,CAAkC,GAAlC,EAAuC,KAAvC;AACH;AACJ,KALD;AAMH;AAED;;;;;;AAMG;;;AACH,MAAW,IAAX,GAAe;AACX,WAAO,KAAK,QAAZ;AACH;;AA7G0B","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyId } from \"./Exports\";\r\n\r\n/**\r\n * Represents collection of properties and their values.\r\n * @class PropertyCollection\r\n */\r\nexport class PropertyCollection {\r\n    private privKeys: string[] = [] as string[];\r\n    private privValues: string[] = [] as string[];\r\n\r\n    /**\r\n     * Returns the property value in type String.\r\n     * Currently only String, int and bool are allowed.\r\n     * If the name is not available, the specified defaultValue is returned.\r\n     * @member PropertyCollection.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string | number | boolean} def - The default value which is returned if the parameter\r\n     * is not available in the collection.\r\n     * @returns {string} value of the parameter.\r\n     */\r\n    public getProperty(key: PropertyId | string, def?: string | number | boolean): string {\r\n        let keyToUse: string;\r\n\r\n        if (typeof key === \"string\") {\r\n            keyToUse = key;\r\n        } else {\r\n            keyToUse = PropertyId[key];\r\n        }\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            if (this.privKeys[n] === keyToUse) {\r\n                return this.privValues[n];\r\n            }\r\n        }\r\n\r\n        if (def === undefined) {\r\n            return undefined;\r\n        }\r\n\r\n        return String(def);\r\n    }\r\n\r\n    /**\r\n     * Sets the String value of the parameter specified by name.\r\n     * @member PropertyCollection.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} value - The value of the parameter.\r\n     */\r\n    public setProperty(key: string | PropertyId, value: string): void {\r\n        let keyToUse: string;\r\n\r\n        if (typeof key === \"string\") {\r\n            keyToUse = key;\r\n        } else {\r\n            keyToUse = PropertyId[key];\r\n        }\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            if (this.privKeys[n] === keyToUse) {\r\n                this.privValues[n] = value;\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.privKeys.push(keyToUse);\r\n        this.privValues.push(value);\r\n    }\r\n\r\n    /**\r\n     * Clones the collection.\r\n     * @member PropertyCollection.prototype.clone\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} A copy of the collection.\r\n     */\r\n    public clone(): PropertyCollection {\r\n        const clonedMap = new PropertyCollection();\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            clonedMap.privKeys.push(this.privKeys[n]);\r\n            clonedMap.privValues.push(this.privValues[n]);\r\n        }\r\n\r\n        return clonedMap;\r\n    }\r\n\r\n    /**\r\n     * Merges this set of properties into another, no overwrites.\r\n     * @member PropertyCollection.prototype.mergeTo\r\n     * @function\r\n     * @public\r\n     * @param {PropertyCollection}  destinationCollection - The collection to merge into.\r\n     */\r\n    public mergeTo(destinationCollection: PropertyCollection): void {\r\n        this.privKeys.forEach((key: string | PropertyId): void => {\r\n            if (destinationCollection.getProperty(key, undefined) === undefined) {\r\n                const value = this.getProperty(key);\r\n                destinationCollection.setProperty(key, value);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the keys in Property Collection.\r\n     * @member PropertyCollection.prototype.keys\r\n     * @function\r\n     * @public\r\n     * @returns {string []} Keys in the collection.\r\n     */\r\n    public get keys(): string[] {\r\n        return this.privKeys;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}