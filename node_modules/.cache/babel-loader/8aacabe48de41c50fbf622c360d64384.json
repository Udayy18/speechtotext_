{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { connectivity, type } from \"../common.speech/Exports\";\nimport { AudioSourceErrorEvent, AudioSourceInitializingEvent, AudioSourceOffEvent, AudioSourceReadyEvent, AudioStreamNodeAttachedEvent, AudioStreamNodeAttachingEvent, AudioStreamNodeDetachedEvent, AudioStreamNodeErrorEvent, ChunkedArrayBufferStream, createNoDashGuid, Deferred, Events, EventSource } from \"../common/Exports\";\nimport { AudioStreamFormat } from \"../sdk/Audio/AudioStreamFormat\";\nexport class FileAudioSource {\n  constructor(file, filename, audioSourceId) {\n    this.privStreams = {};\n    this.privHeaderEnd = 44;\n    this.privId = audioSourceId ? audioSourceId : createNoDashGuid();\n    this.privEvents = new EventSource();\n    this.privSource = file;\n\n    if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && this.privSource instanceof Blob) {\n      this.privFilename = file.name;\n    } else {\n      this.privFilename = filename || \"unknown.wav\";\n    } // Read the header.\n\n\n    this.privAudioFormatPromise = this.readHeader();\n  }\n\n  get format() {\n    return this.privAudioFormatPromise;\n  }\n\n  get blob() {\n    return Promise.resolve(this.privSource);\n  }\n\n  turnOn() {\n    if (this.privFilename.lastIndexOf(\".wav\") !== this.privFilename.length - 4) {\n      const errorMsg = this.privFilename + \" is not supported. Only WAVE files are allowed at the moment.\";\n      this.onEvent(new AudioSourceErrorEvent(errorMsg, \"\"));\n      return Promise.reject(errorMsg);\n    }\n\n    this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\n\n    this.onEvent(new AudioSourceReadyEvent(this.privId));\n    return;\n  }\n\n  id() {\n    return this.privId;\n  }\n\n  attach(audioNodeId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\n      const stream = yield this.upload(audioNodeId);\n      this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\n      return Promise.resolve({\n        detach: () => __awaiter(this, void 0, void 0, function* () {\n          stream.readEnded();\n          delete this.privStreams[audioNodeId];\n          this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n          yield this.turnOff();\n        }),\n        id: () => audioNodeId,\n        read: () => stream.read()\n      });\n    });\n  }\n\n  detach(audioNodeId) {\n    if (audioNodeId && this.privStreams[audioNodeId]) {\n      this.privStreams[audioNodeId].close();\n      delete this.privStreams[audioNodeId];\n      this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n    }\n  }\n\n  turnOff() {\n    for (const streamId in this.privStreams) {\n      if (streamId) {\n        const stream = this.privStreams[streamId];\n\n        if (stream && !stream.isClosed) {\n          stream.close();\n        }\n      }\n    }\n\n    this.onEvent(new AudioSourceOffEvent(this.privId)); // no stream now\n\n    return Promise.resolve();\n  }\n\n  get events() {\n    return this.privEvents;\n  }\n\n  get deviceInfo() {\n    return this.privAudioFormatPromise.then(result => Promise.resolve({\n      bitspersample: result.bitsPerSample,\n      channelcount: result.channels,\n      connectivity: connectivity.Unknown,\n      manufacturer: \"Speech SDK\",\n      model: \"File\",\n      samplerate: result.samplesPerSec,\n      type: type.File\n    }));\n  }\n\n  readHeader() {\n    // Read the wave header.\n    const maxHeaderSize = 512;\n    const header = this.privSource.slice(0, maxHeaderSize);\n    const headerResult = new Deferred();\n\n    const processHeader = header => {\n      const view = new DataView(header);\n\n      const getWord = index => String.fromCharCode(view.getUint8(index), view.getUint8(index + 1), view.getUint8(index + 2), view.getUint8(index + 3)); // RIFF 4 bytes.\n\n\n      if (\"RIFF\" !== getWord(0)) {\n        headerResult.reject(\"Invalid WAV header in file, RIFF was not found\");\n        return;\n      } // length, 4 bytes\n      // RIFF Type & fmt 8 bytes\n\n\n      if (\"WAVE\" !== getWord(8) || \"fmt \" !== getWord(12)) {\n        headerResult.reject(\"Invalid WAV header in file, WAVEfmt was not found\");\n        return;\n      }\n\n      const formatSize = view.getInt32(16, true);\n      const channelCount = view.getUint16(22, true);\n      const sampleRate = view.getUint32(24, true);\n      const bitsPerSample = view.getUint16(34, true); // Confirm if header is 44 bytes long.\n\n      let pos = 36 + Math.max(formatSize - 16, 0);\n\n      for (; getWord(pos) !== \"data\"; pos += 2) {\n        if (pos > maxHeaderSize - 8) {\n          headerResult.reject(\"Invalid WAV header in file, data block was not found\");\n          return;\n        }\n      }\n\n      this.privHeaderEnd = pos + 8;\n      headerResult.resolve(AudioStreamFormat.getWaveFormatPCM(sampleRate, bitsPerSample, channelCount));\n    };\n\n    if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && header instanceof Blob) {\n      const reader = new FileReader();\n\n      reader.onload = event => {\n        const header = event.target.result;\n        processHeader(header);\n      };\n\n      reader.readAsArrayBuffer(header);\n    } else {\n      const h = header;\n      processHeader(h.buffer.slice(h.byteOffset, h.byteOffset + h.byteLength));\n    }\n\n    return headerResult.promise;\n  }\n\n  upload(audioNodeId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const onerror = error => {\n        const errorMsg = `Error occurred while processing '${this.privFilename}'. ${error}`;\n        this.onEvent(new AudioStreamNodeErrorEvent(this.privId, audioNodeId, errorMsg));\n        throw new Error(errorMsg);\n      };\n\n      try {\n        yield this.turnOn();\n        const format = yield this.privAudioFormatPromise;\n        const stream = new ChunkedArrayBufferStream(format.avgBytesPerSec / 10, audioNodeId);\n        this.privStreams[audioNodeId] = stream;\n        const chunk = this.privSource.slice(this.privHeaderEnd);\n\n        const processFile = buff => {\n          if (stream.isClosed) {\n            return; // output stream was closed (somebody called TurnOff). We're done here.\n          }\n\n          stream.writeStreamChunk({\n            buffer: buff,\n            isEnd: false,\n            timeReceived: Date.now()\n          });\n          stream.close();\n        };\n\n        if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && chunk instanceof Blob) {\n          const reader = new FileReader();\n\n          reader.onerror = ev => onerror(ev.toString());\n\n          reader.onload = event => {\n            const fileBuffer = event.target.result;\n            processFile(fileBuffer);\n          };\n\n          reader.readAsArrayBuffer(chunk);\n        } else {\n          const c = chunk;\n          processFile(c.buffer.slice(c.byteOffset, c.byteOffset + c.byteLength));\n        }\n\n        return stream;\n      } catch (e) {\n        onerror(e);\n      }\n    });\n  }\n\n  onEvent(event) {\n    this.privEvents.onEvent(event);\n    Events.instance.onEvent(event);\n  }\n\n}","map":{"version":3,"sources":["src/common.browser/FileAudioSource.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    connectivity,\r\n    ISpeechConfigAudioDevice,\r\n    type,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceOffEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    ChunkedArrayBufferStream,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStreamChunk,\r\n    IStringDictionary,\r\n    Stream,\r\n} from \"../common/Exports\";\r\nimport { AudioStreamFormat, AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat\";\r\n\r\nexport class FileAudioSource implements IAudioSource {\r\n\r\n    private privAudioFormatPromise: Promise<AudioStreamFormatImpl>;\r\n\r\n    private privStreams: IStringDictionary<Stream<ArrayBuffer>> = {};\r\n\r\n    private privId: string;\r\n\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n\r\n    private privSource: Blob | Buffer;\r\n\r\n    private privFilename: string;\r\n\r\n    private privHeaderEnd: number = 44;\r\n\r\n    public constructor(file: File | Buffer, filename?: string, audioSourceId?: string) {\r\n        this.privId = audioSourceId ? audioSourceId : createNoDashGuid();\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privSource = file;\r\n        if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && this.privSource instanceof Blob) {\r\n            this.privFilename = (file as File).name;\r\n        } else {\r\n            this.privFilename = filename || \"unknown.wav\";\r\n        }\r\n\r\n        // Read the header.\r\n        this.privAudioFormatPromise = this.readHeader();\r\n    }\r\n\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return this.privAudioFormatPromise;\r\n    }\r\n\r\n    public get blob(): Promise<Blob | Buffer> {\r\n        return Promise.resolve(this.privSource);\r\n    }\r\n\r\n    public turnOn(): Promise<void> {\r\n        if (this.privFilename.lastIndexOf(\".wav\") !== this.privFilename.length - 4) {\r\n            const errorMsg = this.privFilename + \" is not supported. Only WAVE files are allowed at the moment.\";\r\n            this.onEvent(new AudioSourceErrorEvent(errorMsg, \"\"));\r\n            return Promise.reject(errorMsg);\r\n        }\r\n\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return;\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public async attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        const stream: Stream<ArrayBuffer> = await this.upload(audioNodeId);\r\n\r\n        this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n        return Promise.resolve({\r\n            detach: async (): Promise<void> => {\r\n                stream.readEnded();\r\n                delete this.privStreams[audioNodeId];\r\n                this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                await this.turnOff();\r\n            },\r\n            id: (): string => audioNodeId,\r\n            read: (): Promise<IStreamChunk<ArrayBuffer>> => stream.read(),\r\n        });\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        if (audioNodeId && this.privStreams[audioNodeId]) {\r\n            this.privStreams[audioNodeId].close();\r\n            delete this.privStreams[audioNodeId];\r\n            this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n        }\r\n    }\r\n\r\n    public turnOff(): Promise<void> {\r\n        for (const streamId in this.privStreams) {\r\n            if (streamId) {\r\n                const stream = this.privStreams[streamId];\r\n                if (stream && !stream.isClosed) {\r\n                    stream.close();\r\n                }\r\n            }\r\n        }\r\n\r\n        this.onEvent(new AudioSourceOffEvent(this.privId)); // no stream now\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return this.privAudioFormatPromise.then<ISpeechConfigAudioDevice>((result: AudioStreamFormatImpl): Promise<{\r\n            bitspersample: number;\r\n            channelcount: number;\r\n            connectivity: connectivity.Unknown;\r\n            manufacturer: string;\r\n            model: string;\r\n            samplerate: number;\r\n            type: type.File;\r\n        }> => ( Promise.resolve({\r\n                bitspersample: result.bitsPerSample,\r\n                channelcount: result.channels,\r\n                connectivity: connectivity.Unknown,\r\n                manufacturer: \"Speech SDK\",\r\n                model: \"File\",\r\n                samplerate: result.samplesPerSec,\r\n                type: type.File,\r\n            })\r\n        ));\r\n    }\r\n\r\n    private readHeader(): Promise<AudioStreamFormatImpl> {\r\n        // Read the wave header.\r\n        const maxHeaderSize: number = 512;\r\n        const header: Blob | Buffer = this.privSource.slice(0, maxHeaderSize);\r\n\r\n        const headerResult: Deferred<AudioStreamFormatImpl> = new Deferred<AudioStreamFormatImpl>();\r\n\r\n        const processHeader = (header: ArrayBuffer): void => {\r\n            const view: DataView = new DataView(header);\r\n\r\n            const getWord = (index: number): string => String.fromCharCode(view.getUint8(index), view.getUint8(index + 1), view.getUint8(index + 2), view.getUint8(index + 3));\r\n\r\n            // RIFF 4 bytes.\r\n            if (\"RIFF\" !== getWord(0)) {\r\n                headerResult.reject(\"Invalid WAV header in file, RIFF was not found\");\r\n                return;\r\n            }\r\n\r\n            // length, 4 bytes\r\n            // RIFF Type & fmt 8 bytes\r\n            if (\"WAVE\" !== getWord(8) || \"fmt \" !== getWord(12)) {\r\n                headerResult.reject(\"Invalid WAV header in file, WAVEfmt was not found\");\r\n                return;\r\n            }\r\n\r\n            const formatSize: number = view.getInt32(16, true);\r\n            const channelCount: number = view.getUint16(22, true);\r\n            const sampleRate: number = view.getUint32(24, true);\r\n            const bitsPerSample: number = view.getUint16(34, true);\r\n            // Confirm if header is 44 bytes long.\r\n            let pos: number = 36 + Math.max(formatSize - 16, 0);\r\n            for (; getWord(pos) !== \"data\"; pos += 2) {\r\n                if (pos > maxHeaderSize - 8) {\r\n                    headerResult.reject(\"Invalid WAV header in file, data block was not found\");\r\n                    return;\r\n                }\r\n            }\r\n            this.privHeaderEnd = pos + 8;\r\n            headerResult.resolve(AudioStreamFormat.getWaveFormatPCM(sampleRate, bitsPerSample, channelCount) as AudioStreamFormatImpl);\r\n        };\r\n\r\n        if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && header instanceof Blob) {\r\n            const reader: FileReader = new FileReader();\r\n\r\n            reader.onload = (event: Event): void => {\r\n                const header: ArrayBuffer = (event.target as FileReader).result as ArrayBuffer;\r\n                processHeader(header);\r\n            };\r\n\r\n            reader.readAsArrayBuffer(header);\r\n        } else {\r\n            const h: Buffer = header as Buffer;\r\n            processHeader(h.buffer.slice(h.byteOffset, h.byteOffset + h.byteLength));\r\n        }\r\n        return headerResult.promise;\r\n    }\r\n\r\n    private async upload(audioNodeId: string): Promise<Stream<ArrayBuffer>> {\r\n        const onerror = (error: string): void => {\r\n            const errorMsg = `Error occurred while processing '${this.privFilename}'. ${error}`;\r\n            this.onEvent(new AudioStreamNodeErrorEvent(this.privId, audioNodeId, errorMsg));\r\n            throw new Error(errorMsg);\r\n        };\r\n\r\n        try {\r\n            await this.turnOn();\r\n\r\n            const format: AudioStreamFormatImpl = await this.privAudioFormatPromise;\r\n            const stream = new ChunkedArrayBufferStream(format.avgBytesPerSec / 10, audioNodeId);\r\n\r\n            this.privStreams[audioNodeId] = stream;\r\n            const chunk: Blob | Buffer = this.privSource.slice(this.privHeaderEnd);\r\n\r\n            const processFile = (buff: ArrayBuffer): void => {\r\n                if (stream.isClosed) {\r\n                    return; // output stream was closed (somebody called TurnOff). We're done here.\r\n                }\r\n\r\n                stream.writeStreamChunk({\r\n                    buffer: buff,\r\n                    isEnd: false,\r\n                    timeReceived: Date.now(),\r\n                });\r\n                stream.close();\r\n            };\r\n\r\n            if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && chunk instanceof Blob) {\r\n                const reader: FileReader = new FileReader();\r\n                reader.onerror = (ev: ProgressEvent<FileReader>): void  =>  onerror(ev.toString());\r\n\r\n                reader.onload = (event: Event): void => {\r\n                    const fileBuffer: ArrayBuffer = (event.target as FileReader).result as ArrayBuffer;\r\n                    processFile(fileBuffer);\r\n                };\r\n\r\n                reader.readAsArrayBuffer(chunk);\r\n            } else {\r\n                const c: Buffer = chunk as Buffer;\r\n                processFile(c.buffer.slice(c.byteOffset, c.byteOffset + c.byteLength));\r\n            }\r\n\r\n            return stream;\r\n        } catch (e) {\r\n            onerror(e as string);\r\n        }\r\n    }\r\n\r\n    private onEvent(event: AudioSourceEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}