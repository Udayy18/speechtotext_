{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/* eslint-disable max-classes-per-file, @typescript-eslint/typedef */\nexport var PromiseState;\n\n(function (PromiseState) {\n  PromiseState[PromiseState[\"None\"] = 0] = \"None\";\n  PromiseState[PromiseState[\"Resolved\"] = 1] = \"Resolved\";\n  PromiseState[PromiseState[\"Rejected\"] = 2] = \"Rejected\";\n})(PromiseState || (PromiseState = {}));\n\nexport class PromiseResult {\n  constructor(promiseResultEventSource) {\n    this.throwIfError = () => {\n      if (this.isError) {\n        throw this.error;\n      }\n    };\n\n    promiseResultEventSource.on(result => {\n      if (!this.privIsCompleted) {\n        this.privIsCompleted = true;\n        this.privIsError = false;\n        this.privResult = result;\n      }\n    }, error => {\n      if (!this.privIsCompleted) {\n        this.privIsCompleted = true;\n        this.privIsError = true;\n        this.privError = error;\n      }\n    });\n  }\n\n  get isCompleted() {\n    return this.privIsCompleted;\n  }\n\n  get isError() {\n    return this.privIsError;\n  }\n\n  get error() {\n    return this.privError;\n  }\n\n  get result() {\n    return this.privResult;\n  }\n\n}\nexport class PromiseResultEventSource {\n  constructor() {\n    this.setResult = result => {\n      this.privOnSetResult(result);\n    };\n\n    this.setError = error => {\n      this.privOnSetError(error);\n    };\n\n    this.on = (onSetResult, onSetError) => {\n      this.privOnSetResult = onSetResult;\n      this.privOnSetError = onSetError;\n    };\n  }\n\n}\nexport class Deferred {\n  constructor() {\n    this.resolve = result => {\n      this.privResolve(result);\n      return this;\n    };\n\n    this.reject = error => {\n      this.privReject(error);\n      return this;\n    }; // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n\n\n    this.privPromise = new Promise((resolve, reject) => {\n      this.privResolve = resolve;\n      this.privReject = reject;\n    });\n  }\n\n  get promise() {\n    return this.privPromise;\n  }\n\n}\nexport class Sink {\n  constructor() {\n    this.privState = PromiseState.None;\n    this.privPromiseResult = null;\n    this.privPromiseResultEvents = null;\n    this.privSuccessHandlers = [];\n    this.privErrorHandlers = [];\n    this.privPromiseResultEvents = new PromiseResultEventSource();\n    this.privPromiseResult = new PromiseResult(this.privPromiseResultEvents);\n  }\n\n  get state() {\n    return this.privState;\n  }\n\n  get result() {\n    return this.privPromiseResult;\n  }\n\n  resolve(result) {\n    if (this.privState !== PromiseState.None) {\n      throw new Error(\"'Cannot resolve a completed promise'\");\n    }\n\n    this.privState = PromiseState.Resolved;\n    this.privPromiseResultEvents.setResult(result);\n\n    for (let i = 0; i < this.privSuccessHandlers.length; i++) {\n      this.executeSuccessCallback(result, this.privSuccessHandlers[i], this.privErrorHandlers[i]);\n    }\n\n    this.detachHandlers();\n  }\n\n  reject(error) {\n    if (this.privState !== PromiseState.None) {\n      throw new Error(\"'Cannot reject a completed promise'\");\n    }\n\n    this.privState = PromiseState.Rejected;\n    this.privPromiseResultEvents.setError(error);\n\n    for (const errorHandler of this.privErrorHandlers) {\n      this.executeErrorCallback(error, errorHandler);\n    }\n\n    this.detachHandlers();\n  }\n\n  on(successCallback, errorCallback) {\n    if (successCallback == null) {\n      // eslint-disable-next-line @typescript-eslint/no-empty-function\n      successCallback = () => {};\n    }\n\n    if (this.privState === PromiseState.None) {\n      this.privSuccessHandlers.push(successCallback);\n      this.privErrorHandlers.push(errorCallback);\n    } else {\n      if (this.privState === PromiseState.Resolved) {\n        this.executeSuccessCallback(this.privPromiseResult.result, successCallback, errorCallback);\n      } else if (this.privState === PromiseState.Rejected) {\n        this.executeErrorCallback(this.privPromiseResult.error, errorCallback);\n      }\n\n      this.detachHandlers();\n    }\n  }\n\n  executeSuccessCallback(result, successCallback, errorCallback) {\n    try {\n      successCallback(result);\n    } catch (e) {\n      this.executeErrorCallback(`'Unhandled callback error: ${e}'`, errorCallback);\n    }\n  }\n\n  executeErrorCallback(error, errorCallback) {\n    if (errorCallback) {\n      try {\n        errorCallback(error);\n      } catch (e) {\n        throw new Error(`'Unhandled callback error: ${e}. InnerError: ${error}'`);\n      }\n    } else {\n      throw new Error(`'Unhandled error: ${error}'`);\n    }\n  }\n\n  detachHandlers() {\n    this.privErrorHandlers = [];\n    this.privSuccessHandlers = [];\n  }\n\n} // eslint-disable-next-line prefer-arrow/prefer-arrow-functions\n\nexport function marshalPromiseToCallbacks(promise, cb, err) {\n  promise.then(val => {\n    try {\n      if (!!cb) {\n        cb(val);\n      }\n    } catch (error) {\n      if (!!err) {\n        try {\n          if (error instanceof Error) {\n            const typedError = error;\n            err(typedError.name + \": \" + typedError.message);\n          } else {\n            err(error);\n          } // eslint-disable-next-line no-empty\n\n        } catch (error) {}\n      }\n    }\n  }, error => {\n    if (!!err) {\n      try {\n        if (error instanceof Error) {\n          const typedError = error;\n          err(typedError.name + \": \" + typedError.message);\n        } else {\n          err(error);\n        } // eslint-disable-next-line no-empty\n\n      } catch (error) {}\n    }\n  });\n}","map":{"version":3,"sources":["src/common/Promise.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file, @typescript-eslint/typedef */\r\n\r\nexport enum PromiseState {\r\n    None,\r\n    Resolved,\r\n    Rejected,\r\n}\r\n\r\nexport interface IDeferred<T> {\r\n    readonly promise: Promise<T>;\r\n\r\n    resolve(result: T): IDeferred<T>;\r\n\r\n    reject(error: string): IDeferred<T>;\r\n}\r\n\r\nexport class PromiseResult<T> {\r\n    protected privIsCompleted: boolean;\r\n    protected privIsError: boolean;\r\n    protected privError: string;\r\n    protected privResult: T;\r\n\r\n    public constructor(promiseResultEventSource: PromiseResultEventSource<T>) {\r\n        promiseResultEventSource.on((result: T): void => {\r\n            if (!this.privIsCompleted) {\r\n                this.privIsCompleted = true;\r\n                this.privIsError = false;\r\n                this.privResult = result;\r\n            }\r\n        }, (error: string): void => {\r\n            if (!this.privIsCompleted) {\r\n                this.privIsCompleted = true;\r\n                this.privIsError = true;\r\n                this.privError = error;\r\n            }\r\n        });\r\n    }\r\n\r\n    public get isCompleted(): boolean {\r\n        return this.privIsCompleted;\r\n    }\r\n\r\n    public get isError(): boolean {\r\n        return this.privIsError;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n\r\n    public get result(): T {\r\n        return this.privResult;\r\n    }\r\n\r\n    public throwIfError = (): void => {\r\n        if (this.isError) {\r\n            throw this.error;\r\n        }\r\n    };\r\n}\r\n\r\nexport class PromiseResultEventSource<T>  {\r\n\r\n    private privOnSetResult: (result: T) => void;\r\n    private privOnSetError: (error: string) => void;\r\n\r\n    public setResult = (result: T): void => {\r\n        this.privOnSetResult(result);\r\n    };\r\n\r\n    public setError = (error: string): void => {\r\n        this.privOnSetError(error);\r\n    };\r\n\r\n    public on = (onSetResult: (result: T) => void, onSetError: (error: string) => void): void => {\r\n        this.privOnSetResult = onSetResult;\r\n        this.privOnSetError = onSetError;\r\n    };\r\n}\r\n\r\nexport class Deferred<T> implements IDeferred<T> {\r\n    private privPromise: Promise<T>;\r\n    private privResolve: (value?: T | PromiseLike<T>) => void;\r\n    private privReject: (reason?: any) => void;\r\n\r\n    public constructor() {\r\n        // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\r\n        this.privPromise = new Promise<T>((resolve: (value: T) => void, reject: (reason: any) => void) => {\r\n            this.privResolve = resolve;\r\n            this.privReject = reject;\r\n        });\r\n    }\r\n\r\n    public get promise(): Promise<T> {\r\n        return this.privPromise;\r\n    }\r\n\r\n    public resolve = (result: T | Promise<T>): Deferred<T> => {\r\n        this.privResolve(result);\r\n        return this;\r\n    };\r\n\r\n    public reject = (error: string): Deferred<T> => {\r\n        this.privReject(error);\r\n        return this;\r\n    };\r\n}\r\n\r\nexport class Sink<T> {\r\n    private privState: PromiseState = PromiseState.None;\r\n    private privPromiseResult: PromiseResult<T> = null;\r\n    private privPromiseResultEvents: PromiseResultEventSource<T> = null;\r\n\r\n    private privSuccessHandlers: ((result: T) => void)[] = [];\r\n    private privErrorHandlers: ((e: string) => void)[] = [];\r\n\r\n    public constructor() {\r\n        this.privPromiseResultEvents = new PromiseResultEventSource();\r\n        this.privPromiseResult = new PromiseResult(this.privPromiseResultEvents);\r\n    }\r\n\r\n    public get state(): PromiseState {\r\n        return this.privState;\r\n    }\r\n\r\n    public get result(): PromiseResult<T> {\r\n        return this.privPromiseResult;\r\n    }\r\n\r\n    public resolve(result: T): void {\r\n        if (this.privState !== PromiseState.None) {\r\n            throw new Error(\"'Cannot resolve a completed promise'\");\r\n        }\r\n\r\n        this.privState = PromiseState.Resolved;\r\n        this.privPromiseResultEvents.setResult(result);\r\n\r\n        for (let i = 0; i < this.privSuccessHandlers.length; i++) {\r\n            this.executeSuccessCallback(result, this.privSuccessHandlers[i], this.privErrorHandlers[i]);\r\n        }\r\n\r\n        this.detachHandlers();\r\n    }\r\n\r\n    public reject(error: string): void {\r\n        if (this.privState !== PromiseState.None) {\r\n            throw new Error(\"'Cannot reject a completed promise'\");\r\n        }\r\n\r\n        this.privState = PromiseState.Rejected;\r\n        this.privPromiseResultEvents.setError(error);\r\n\r\n        for (const errorHandler of this.privErrorHandlers) {\r\n            this.executeErrorCallback(error, errorHandler);\r\n        }\r\n\r\n        this.detachHandlers();\r\n    }\r\n\r\n    public on(\r\n        successCallback: (result: T) => void,\r\n        errorCallback: (error: string) => void): void {\r\n\r\n        if (successCallback == null) {\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            successCallback = (): void => { };\r\n        }\r\n\r\n        if (this.privState === PromiseState.None) {\r\n            this.privSuccessHandlers.push(successCallback);\r\n            this.privErrorHandlers.push(errorCallback);\r\n        } else {\r\n            if (this.privState === PromiseState.Resolved) {\r\n                this.executeSuccessCallback(this.privPromiseResult.result, successCallback, errorCallback);\r\n            } else if (this.privState === PromiseState.Rejected) {\r\n                this.executeErrorCallback(this.privPromiseResult.error, errorCallback);\r\n            }\r\n\r\n            this.detachHandlers();\r\n        }\r\n    }\r\n\r\n    private executeSuccessCallback(result: T, successCallback: (result: T) => void, errorCallback: (error: string) => void): void {\r\n        try {\r\n            successCallback(result);\r\n        } catch (e) {\r\n            this.executeErrorCallback(`'Unhandled callback error: ${e as string}'`, errorCallback);\r\n        }\r\n    }\r\n\r\n    private executeErrorCallback(error: string, errorCallback: (error: string) => void): void {\r\n        if (errorCallback) {\r\n            try {\r\n                errorCallback(error);\r\n            } catch (e) {\r\n                throw new Error(`'Unhandled callback error: ${e as string}. InnerError: ${error}'`);\r\n            }\r\n        } else {\r\n            throw new Error(`'Unhandled error: ${error}'`);\r\n        }\r\n    }\r\n\r\n    private detachHandlers(): void {\r\n        this.privErrorHandlers = [];\r\n        this.privSuccessHandlers = [];\r\n    }\r\n}\r\n\r\n// eslint-disable-next-line prefer-arrow/prefer-arrow-functions\r\nexport function marshalPromiseToCallbacks<T>(\r\n    promise: Promise<T>,\r\n    cb?: (value: T) => void,\r\n    err?: (error: string) => void): void {\r\n    promise.then((val: T): void => {\r\n        try {\r\n            if (!!cb) {\r\n                cb(val);\r\n            }\r\n        } catch (error) {\r\n            if (!!err) {\r\n                try {\r\n                    if (error instanceof Error) {\r\n                        const typedError: Error = error ;\r\n                        err(typedError.name + \": \" + typedError.message);\r\n                    } else {\r\n                        err(error as string);\r\n                    }\r\n                // eslint-disable-next-line no-empty\r\n                } catch (error) { }\r\n            }\r\n        }\r\n    }, (error: any): void => {\r\n        if (!!err) {\r\n            try {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            // eslint-disable-next-line no-empty\r\n            } catch (error) { }\r\n        }\r\n    });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}