{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { createNoDashGuid, Deferred } from \"../../common/Exports\";\n/**\n * Placeholder class for the Conversation Request Session. Based off RequestSession.\n * TODO: define what telemetry is required.\n */\n\nexport class ConversationRequestSession {\n  constructor(sessionId) {\n    this.privIsDisposed = false;\n    this.privDetachables = new Array();\n    this.privSessionId = sessionId;\n    this.privRequestId = createNoDashGuid();\n    this.privRequestCompletionDeferral = new Deferred();\n  }\n\n  get sessionId() {\n    return this.privSessionId;\n  }\n\n  get requestId() {\n    return this.privRequestId;\n  }\n\n  get completionPromise() {\n    return this.privRequestCompletionDeferral.promise;\n  }\n\n  onPreConnectionStart(authFetchEventId, connectionId) {\n    this.privSessionId = connectionId;\n  }\n\n  onAuthCompleted(isError) {\n    if (isError) {\n      this.onComplete();\n    }\n  }\n\n  onConnectionEstablishCompleted(statusCode) {\n    if (statusCode === 200) {\n      return;\n    } else if (statusCode === 403) {\n      this.onComplete();\n    }\n  }\n\n  onServiceTurnEndResponse(continuousRecognition) {\n    if (!continuousRecognition) {\n      this.onComplete();\n    } else {\n      this.privRequestId = createNoDashGuid();\n    }\n  }\n\n  dispose() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.privIsDisposed) {\n        // we should have completed by now. If we did not its an unknown error.\n        this.privIsDisposed = true;\n\n        for (const detachable of this.privDetachables) {\n          yield detachable.detach();\n        }\n      }\n    });\n  }\n\n  onComplete() {//\n  }\n\n}","map":{"version":3,"sources":["src/common.speech/Transcription/ConversationRequestSession.ts"],"names":[],"mappings":"AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,SACI,gBADJ,EAEI,QAFJ,QAIO,sBAJP;AAMA;;;AAGG;;AACH,OAAM,MAAO,0BAAP,CAAiC;AAOnC,EAAA,WAAA,CAAmB,SAAnB,EAAoC;AAN5B,SAAA,cAAA,GAA0B,KAA1B;AACA,SAAA,eAAA,GAAiC,IAAI,KAAJ,EAAjC;AAMJ,SAAK,aAAL,GAAqB,SAArB;AACA,SAAK,aAAL,GAAqB,gBAAgB,EAArC;AACA,SAAK,6BAAL,GAAqC,IAAI,QAAJ,EAArC;AACH;;AAED,MAAW,SAAX,GAAoB;AAChB,WAAO,KAAK,aAAZ;AACH;;AAED,MAAW,SAAX,GAAoB;AAChB,WAAO,KAAK,aAAZ;AACH;;AAED,MAAW,iBAAX,GAA4B;AACxB,WAAO,KAAK,6BAAL,CAAmC,OAA1C;AACH;;AAEM,EAAA,oBAAoB,CAAC,gBAAD,EAA2B,YAA3B,EAA+C;AACtE,SAAK,aAAL,GAAqB,YAArB;AACH;;AAEM,EAAA,eAAe,CAAC,OAAD,EAAiB;AACnC,QAAI,OAAJ,EAAa;AACT,WAAK,UAAL;AACH;AACJ;;AAEM,EAAA,8BAA8B,CAAC,UAAD,EAAmB;AACpD,QAAI,UAAU,KAAK,GAAnB,EAAwB;AACpB;AACH,KAFD,MAEO,IAAI,UAAU,KAAK,GAAnB,EAAwB;AAC3B,WAAK,UAAL;AACH;AACJ;;AAEM,EAAA,wBAAwB,CAAC,qBAAD,EAA+B;AAC1D,QAAI,CAAC,qBAAL,EAA4B;AACxB,WAAK,UAAL;AACH,KAFD,MAEO;AACH,WAAK,aAAL,GAAqB,gBAAgB,EAArC;AACH;AACJ;;AAEY,EAAA,OAAO,GAAA;;AAChB,UAAI,CAAC,KAAK,cAAV,EAA0B;AACtB;AACA,aAAK,cAAL,GAAsB,IAAtB;;AACA,aAAK,MAAM,UAAX,IAAyB,KAAK,eAA9B,EAA+C;AAC3C,gBAAM,UAAU,CAAC,MAAX,EAAN;AACH;AACJ;AACJ,K;AAAA;;AAEO,EAAA,UAAU,GAAA,CACd;AACH;;AA/DkC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    IDetachable,\r\n} from \"../../common/Exports\";\r\n\r\n/**\r\n * Placeholder class for the Conversation Request Session. Based off RequestSession.\r\n * TODO: define what telemetry is required.\r\n */\r\nexport class ConversationRequestSession {\r\n    private privIsDisposed: boolean = false;\r\n    private privDetachables: IDetachable[] = new Array<IDetachable>();\r\n    private privRequestId: string;\r\n    private privRequestCompletionDeferral: Deferred<void>;\r\n    private privSessionId: string;\r\n\r\n    public constructor(sessionId: string) {\r\n        this.privSessionId = sessionId;\r\n        this.privRequestId = createNoDashGuid();\r\n        this.privRequestCompletionDeferral = new Deferred<void>();\r\n    }\r\n\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get completionPromise(): Promise<void> {\r\n        return this.privRequestCompletionDeferral.promise;\r\n    }\r\n\r\n    public onPreConnectionStart(authFetchEventId: string, connectionId: string): void {\r\n        this.privSessionId = connectionId;\r\n    }\r\n\r\n    public onAuthCompleted(isError: boolean): void {\r\n        if (isError) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onConnectionEstablishCompleted(statusCode: number): void {\r\n        if (statusCode === 200) {\r\n            return;\r\n        } else if (statusCode === 403) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onServiceTurnEndResponse(continuousRecognition: boolean): void {\r\n        if (!continuousRecognition) {\r\n            this.onComplete();\r\n        } else {\r\n            this.privRequestId = createNoDashGuid();\r\n        }\r\n    }\r\n\r\n    public async dispose(): Promise<void> {\r\n        if (!this.privIsDisposed) {\r\n            // we should have completed by now. If we did not its an unknown error.\r\n            this.privIsDisposed = true;\r\n            for (const detachable of this.privDetachables) {\r\n                await detachable.detach();\r\n            }\r\n        }\r\n    }\r\n\r\n    private onComplete(): void {\r\n        //\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}