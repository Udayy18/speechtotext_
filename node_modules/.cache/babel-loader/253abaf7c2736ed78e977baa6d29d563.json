{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { CancellationErrorCode, CancellationReason, ResultReason } from \"../sdk/Exports\";\nimport { RecognitionStatus } from \"./Exports\";\nexport class EnumTranslation {\n  static implTranslateRecognitionResult(recognitionStatus) {\n    let reason = ResultReason.Canceled;\n\n    switch (recognitionStatus) {\n      case RecognitionStatus.Success:\n        reason = ResultReason.RecognizedSpeech;\n        break;\n\n      case RecognitionStatus.NoMatch:\n      case RecognitionStatus.InitialSilenceTimeout:\n      case RecognitionStatus.BabbleTimeout:\n      case RecognitionStatus.EndOfDictation:\n        reason = ResultReason.NoMatch;\n        break;\n\n      case RecognitionStatus.Error:\n      case RecognitionStatus.BadRequest:\n      case RecognitionStatus.Forbidden:\n      default:\n        reason = ResultReason.Canceled;\n        break;\n    }\n\n    return reason;\n  }\n\n  static implTranslateCancelResult(recognitionStatus) {\n    let reason = CancellationReason.EndOfStream;\n\n    switch (recognitionStatus) {\n      case RecognitionStatus.Success:\n      case RecognitionStatus.EndOfDictation:\n      case RecognitionStatus.NoMatch:\n        reason = CancellationReason.EndOfStream;\n        break;\n\n      case RecognitionStatus.InitialSilenceTimeout:\n      case RecognitionStatus.BabbleTimeout:\n      case RecognitionStatus.Error:\n      case RecognitionStatus.BadRequest:\n      case RecognitionStatus.Forbidden:\n      default:\n        reason = CancellationReason.Error;\n        break;\n    }\n\n    return reason;\n  }\n\n  static implTranslateCancelErrorCode(recognitionStatus) {\n    let reason = CancellationErrorCode.NoError;\n\n    switch (recognitionStatus) {\n      case RecognitionStatus.Error:\n        reason = CancellationErrorCode.ServiceError;\n        break;\n\n      case RecognitionStatus.TooManyRequests:\n        reason = CancellationErrorCode.TooManyRequests;\n        break;\n\n      case RecognitionStatus.BadRequest:\n        reason = CancellationErrorCode.BadRequestParameters;\n        break;\n\n      case RecognitionStatus.Forbidden:\n        reason = CancellationErrorCode.Forbidden;\n        break;\n\n      default:\n        reason = CancellationErrorCode.NoError;\n        break;\n    }\n\n    return reason;\n  }\n\n  static implTranslateErrorDetails(cancellationErrorCode) {\n    let errorDetails = \"The speech service encountered an internal error and could not continue.\";\n\n    switch (cancellationErrorCode) {\n      case CancellationErrorCode.Forbidden:\n        errorDetails = \"The recognizer is using a free subscription that ran out of quota.\";\n        break;\n\n      case CancellationErrorCode.BadRequestParameters:\n        errorDetails = \"Invalid parameter or unsupported audio format in the request.\";\n        break;\n\n      case CancellationErrorCode.TooManyRequests:\n        errorDetails = \"The number of parallel requests exceeded the number of allowed concurrent transcriptions.\";\n        break;\n\n      default:\n        break;\n    }\n\n    return errorDetails;\n  }\n\n}","map":{"version":3,"sources":["src/common.speech/EnumTranslation.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SACI,qBADJ,EAEI,kBAFJ,EAGI,YAHJ,QAIO,gBAJP;AAKA,SAAS,iBAAT,QAAkC,WAAlC;AAEA,OAAM,MAAO,eAAP,CAAsB;AACjB,SAAO,8BAAP,CAAsC,iBAAtC,EAA0E;AAC7E,QAAI,MAAM,GAAG,YAAY,CAAC,QAA1B;;AACA,YAAQ,iBAAR;AACI,WAAK,iBAAiB,CAAC,OAAvB;AACI,QAAA,MAAM,GAAG,YAAY,CAAC,gBAAtB;AACA;;AACJ,WAAK,iBAAiB,CAAC,OAAvB;AACA,WAAK,iBAAiB,CAAC,qBAAvB;AACA,WAAK,iBAAiB,CAAC,aAAvB;AACA,WAAK,iBAAiB,CAAC,cAAvB;AACI,QAAA,MAAM,GAAG,YAAY,CAAC,OAAtB;AACA;;AACJ,WAAK,iBAAiB,CAAC,KAAvB;AACA,WAAK,iBAAiB,CAAC,UAAvB;AACA,WAAK,iBAAiB,CAAC,SAAvB;AACA;AACI,QAAA,MAAM,GAAG,YAAY,CAAC,QAAtB;AACA;AAfR;;AAiBA,WAAO,MAAP;AACH;;AAEM,SAAO,yBAAP,CAAiC,iBAAjC,EAAqE;AACxE,QAAI,MAAM,GAAG,kBAAkB,CAAC,WAAhC;;AACA,YAAQ,iBAAR;AACI,WAAK,iBAAiB,CAAC,OAAvB;AACA,WAAK,iBAAiB,CAAC,cAAvB;AACA,WAAK,iBAAiB,CAAC,OAAvB;AACI,QAAA,MAAM,GAAG,kBAAkB,CAAC,WAA5B;AACA;;AACJ,WAAK,iBAAiB,CAAC,qBAAvB;AACA,WAAK,iBAAiB,CAAC,aAAvB;AACA,WAAK,iBAAiB,CAAC,KAAvB;AACA,WAAK,iBAAiB,CAAC,UAAvB;AACA,WAAK,iBAAiB,CAAC,SAAvB;AACA;AACI,QAAA,MAAM,GAAG,kBAAkB,CAAC,KAA5B;AACA;AAbR;;AAeA,WAAO,MAAP;AACH;;AAEM,SAAO,4BAAP,CAAoC,iBAApC,EAAwE;AAC3E,QAAI,MAAM,GAA0B,qBAAqB,CAAC,OAA1D;;AACA,YAAQ,iBAAR;AACI,WAAK,iBAAiB,CAAC,KAAvB;AACI,QAAA,MAAM,GAAG,qBAAqB,CAAC,YAA/B;AACA;;AACJ,WAAK,iBAAiB,CAAC,eAAvB;AACI,QAAA,MAAM,GAAG,qBAAqB,CAAC,eAA/B;AACA;;AACJ,WAAK,iBAAiB,CAAC,UAAvB;AACI,QAAA,MAAM,GAAG,qBAAqB,CAAC,oBAA/B;AACA;;AACJ,WAAK,iBAAiB,CAAC,SAAvB;AACI,QAAA,MAAM,GAAG,qBAAqB,CAAC,SAA/B;AACA;;AACJ;AACI,QAAA,MAAM,GAAG,qBAAqB,CAAC,OAA/B;AACA;AAfR;;AAkBA,WAAO,MAAP;AAEH;;AAEM,SAAO,yBAAP,CAAiC,qBAAjC,EAA6E;AAChF,QAAI,YAAY,GAAW,0EAA3B;;AACA,YAAQ,qBAAR;AACI,WAAK,qBAAqB,CAAC,SAA3B;AACI,QAAA,YAAY,GAAG,oEAAf;AACA;;AACJ,WAAK,qBAAqB,CAAC,oBAA3B;AACI,QAAA,YAAY,GAAG,+DAAf;AACA;;AACJ,WAAK,qBAAqB,CAAC,eAA3B;AACI,QAAA,YAAY,GAAG,2FAAf;AACA;;AACJ;AACI;AAXR;;AAaA,WAAO,YAAP;AACH;;AAnFuB","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ResultReason\r\n} from \"../sdk/Exports\";\r\nimport { RecognitionStatus } from \"./Exports\";\r\n\r\nexport class EnumTranslation {\r\n    public static implTranslateRecognitionResult(recognitionStatus: RecognitionStatus): ResultReason {\r\n        let reason = ResultReason.Canceled;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Success:\r\n                reason = ResultReason.RecognizedSpeech;\r\n                break;\r\n            case RecognitionStatus.NoMatch:\r\n            case RecognitionStatus.InitialSilenceTimeout:\r\n            case RecognitionStatus.BabbleTimeout:\r\n            case RecognitionStatus.EndOfDictation:\r\n                reason = ResultReason.NoMatch;\r\n                break;\r\n            case RecognitionStatus.Error:\r\n            case RecognitionStatus.BadRequest:\r\n            case RecognitionStatus.Forbidden:\r\n            default:\r\n                reason = ResultReason.Canceled;\r\n                break;\r\n        }\r\n        return reason;\r\n    }\r\n\r\n    public static implTranslateCancelResult(recognitionStatus: RecognitionStatus): CancellationReason {\r\n        let reason = CancellationReason.EndOfStream;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Success:\r\n            case RecognitionStatus.EndOfDictation:\r\n            case RecognitionStatus.NoMatch:\r\n                reason = CancellationReason.EndOfStream;\r\n                break;\r\n            case RecognitionStatus.InitialSilenceTimeout:\r\n            case RecognitionStatus.BabbleTimeout:\r\n            case RecognitionStatus.Error:\r\n            case RecognitionStatus.BadRequest:\r\n            case RecognitionStatus.Forbidden:\r\n            default:\r\n                reason = CancellationReason.Error;\r\n                break;\r\n        }\r\n        return reason;\r\n    }\r\n\r\n    public static implTranslateCancelErrorCode(recognitionStatus: RecognitionStatus): CancellationErrorCode {\r\n        let reason: CancellationErrorCode = CancellationErrorCode.NoError;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Error:\r\n                reason = CancellationErrorCode.ServiceError;\r\n                break;\r\n            case RecognitionStatus.TooManyRequests:\r\n                reason = CancellationErrorCode.TooManyRequests;\r\n                break;\r\n            case RecognitionStatus.BadRequest:\r\n                reason = CancellationErrorCode.BadRequestParameters;\r\n                break;\r\n            case RecognitionStatus.Forbidden:\r\n                reason = CancellationErrorCode.Forbidden;\r\n                break;\r\n            default:\r\n                reason = CancellationErrorCode.NoError;\r\n                break;\r\n        }\r\n\r\n        return reason;\r\n\r\n    }\r\n\r\n    public static implTranslateErrorDetails(cancellationErrorCode: CancellationErrorCode): string {\r\n        let errorDetails: string = \"The speech service encountered an internal error and could not continue.\";\r\n        switch (cancellationErrorCode) {\r\n            case CancellationErrorCode.Forbidden:\r\n                errorDetails = \"The recognizer is using a free subscription that ran out of quota.\";\r\n                break;\r\n            case CancellationErrorCode.BadRequestParameters:\r\n                errorDetails = \"Invalid parameter or unsupported audio format in the request.\";\r\n                break;\r\n            case CancellationErrorCode.TooManyRequests:\r\n                errorDetails = \"The number of parallel requests exceeded the number of allowed concurrent transcriptions.\";\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return errorDetails;\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}