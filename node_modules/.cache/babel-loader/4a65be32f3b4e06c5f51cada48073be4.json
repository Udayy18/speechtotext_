{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/* eslint-disable max-classes-per-file */\nimport { AudioSourceErrorEvent, AudioStreamNodeAttachedEvent, AudioStreamNodeAttachingEvent, AudioStreamNodeDetachedEvent, AudioStreamNodeErrorEvent, ConnectionEstablishedEvent, ConnectionEstablishErrorEvent, ConnectionMessageReceivedEvent, ConnectionStartEvent } from \"../common/Exports\";\nimport { ConnectingToServiceEvent, RecognitionTriggeredEvent } from \"./RecognitionEvents\";\nexport class ServiceTelemetryListener {\n  constructor(requestId, audioSourceId, audioNodeId) {\n    this.privIsDisposed = false;\n    this.privListeningTriggerMetric = null;\n    this.privMicMetric = null;\n    this.privConnectionEstablishMetric = null;\n    this.privRequestId = requestId;\n    this.privAudioSourceId = audioSourceId;\n    this.privAudioNodeId = audioNodeId;\n    this.privReceivedMessages = {};\n    this.privPhraseLatencies = [];\n    this.privHypothesisLatencies = [];\n  }\n\n  phraseReceived(audioReceivedTime) {\n    if (audioReceivedTime > 0) {\n      // 0 indicates the time is unknown. Drop it.\n      this.privPhraseLatencies.push(Date.now() - audioReceivedTime);\n    }\n  }\n\n  hypothesisReceived(audioReceivedTime) {\n    if (audioReceivedTime > 0) {\n      // 0 indicates the time is unknown. Drop it.\n      this.privHypothesisLatencies.push(Date.now() - audioReceivedTime);\n    }\n  }\n\n  onEvent(e) {\n    if (this.privIsDisposed) {\n      return;\n    }\n\n    if (e instanceof RecognitionTriggeredEvent && e.requestId === this.privRequestId) {\n      this.privListeningTriggerMetric = {\n        End: e.eventTime,\n        Name: \"ListeningTrigger\",\n        Start: e.eventTime\n      };\n    }\n\n    if (e instanceof AudioStreamNodeAttachingEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\n      this.privMicStartTime = e.eventTime;\n    }\n\n    if (e instanceof AudioStreamNodeAttachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\n      this.privMicStartTime = e.eventTime;\n    }\n\n    if (e instanceof AudioSourceErrorEvent && e.audioSourceId === this.privAudioSourceId) {\n      if (!this.privMicMetric) {\n        this.privMicMetric = {\n          End: e.eventTime,\n          Error: e.error,\n          Name: \"Microphone\",\n          Start: this.privMicStartTime\n        };\n      }\n    }\n\n    if (e instanceof AudioStreamNodeErrorEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\n      if (!this.privMicMetric) {\n        this.privMicMetric = {\n          End: e.eventTime,\n          Error: e.error,\n          Name: \"Microphone\",\n          Start: this.privMicStartTime\n        };\n      }\n    }\n\n    if (e instanceof AudioStreamNodeDetachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\n      if (!this.privMicMetric) {\n        this.privMicMetric = {\n          End: e.eventTime,\n          Name: \"Microphone\",\n          Start: this.privMicStartTime\n        };\n      }\n    }\n\n    if (e instanceof ConnectingToServiceEvent && e.requestId === this.privRequestId) {\n      this.privConnectionId = e.sessionId;\n    }\n\n    if (e instanceof ConnectionStartEvent && e.connectionId === this.privConnectionId) {\n      this.privConnectionStartTime = e.eventTime;\n    }\n\n    if (e instanceof ConnectionEstablishedEvent && e.connectionId === this.privConnectionId) {\n      if (!this.privConnectionEstablishMetric) {\n        this.privConnectionEstablishMetric = {\n          End: e.eventTime,\n          Id: this.privConnectionId,\n          Name: \"Connection\",\n          Start: this.privConnectionStartTime\n        };\n      }\n    }\n\n    if (e instanceof ConnectionEstablishErrorEvent && e.connectionId === this.privConnectionId) {\n      if (!this.privConnectionEstablishMetric) {\n        this.privConnectionEstablishMetric = {\n          End: e.eventTime,\n          Error: this.getConnectionError(e.statusCode),\n          Id: this.privConnectionId,\n          Name: \"Connection\",\n          Start: this.privConnectionStartTime\n        };\n      }\n    }\n\n    if (e instanceof ConnectionMessageReceivedEvent && e.connectionId === this.privConnectionId) {\n      if (e.message && e.message.headers && e.message.headers.path) {\n        if (!this.privReceivedMessages[e.message.headers.path]) {\n          this.privReceivedMessages[e.message.headers.path] = new Array();\n        }\n\n        const maxMessagesToSend = 50;\n\n        if (this.privReceivedMessages[e.message.headers.path].length < maxMessagesToSend) {\n          this.privReceivedMessages[e.message.headers.path].push(e.networkReceivedTime);\n        }\n      }\n    }\n  }\n\n  getTelemetry() {\n    const metrics = new Array();\n\n    if (this.privListeningTriggerMetric) {\n      metrics.push(this.privListeningTriggerMetric);\n    }\n\n    if (this.privMicMetric) {\n      metrics.push(this.privMicMetric);\n    }\n\n    if (this.privConnectionEstablishMetric) {\n      metrics.push(this.privConnectionEstablishMetric);\n    }\n\n    if (this.privPhraseLatencies.length > 0) {\n      metrics.push({\n        PhraseLatencyMs: this.privPhraseLatencies\n      });\n    }\n\n    if (this.privHypothesisLatencies.length > 0) {\n      metrics.push({\n        FirstHypothesisLatencyMs: this.privHypothesisLatencies\n      });\n    }\n\n    const telemetry = {\n      Metrics: metrics,\n      ReceivedMessages: this.privReceivedMessages\n    };\n    const json = JSON.stringify(telemetry); // We dont want to send the same telemetry again. So clean those out.\n\n    this.privReceivedMessages = {};\n    this.privListeningTriggerMetric = null;\n    this.privMicMetric = null;\n    this.privConnectionEstablishMetric = null;\n    this.privPhraseLatencies = [];\n    this.privHypothesisLatencies = [];\n    return json;\n  } // Determines if there are any telemetry events to send to the service.\n\n\n  get hasTelemetry() {\n    return Object.keys(this.privReceivedMessages).length !== 0 || this.privListeningTriggerMetric !== null || this.privMicMetric !== null || this.privConnectionEstablishMetric !== null || this.privPhraseLatencies.length !== 0 || this.privHypothesisLatencies.length !== 0;\n  }\n\n  dispose() {\n    this.privIsDisposed = true;\n  }\n\n  getConnectionError(statusCode) {\n    /*\n    -- Websocket status codes --\n    NormalClosure = 1000,\n    EndpointUnavailable = 1001,\n    ProtocolError = 1002,\n    InvalidMessageType = 1003,\n    Empty = 1005,\n    InvalidPayloadData = 1007,\n    PolicyViolation = 1008,\n    MessageTooBig = 1009,\n    MandatoryExtension = 1010,\n    InternalServerError = 1011\n    */\n    switch (statusCode) {\n      case 400:\n      case 1002:\n      case 1003:\n      case 1005:\n      case 1007:\n      case 1008:\n      case 1009:\n        return \"BadRequest\";\n\n      case 401:\n        return \"Unauthorized\";\n\n      case 403:\n        return \"Forbidden\";\n\n      case 503:\n      case 1001:\n        return \"ServerUnavailable\";\n\n      case 500:\n      case 1011:\n        return \"ServerError\";\n\n      case 408:\n      case 504:\n        return \"Timeout\";\n\n      default:\n        return \"statuscode:\" + statusCode.toString();\n    }\n  }\n\n}","map":{"version":3,"sources":["src/common.speech/ServiceTelemetryListener.Internal.ts"],"names":[],"mappings":"AAAA;AACA;;AAEA;AAEA,SACI,qBADJ,EAEI,4BAFJ,EAGI,6BAHJ,EAII,4BAJJ,EAKI,yBALJ,EAMI,0BANJ,EAOI,6BAPJ,EAQI,8BARJ,EASI,oBATJ,QAaO,mBAbP;AAcA,SAAS,wBAAT,EAAmC,yBAAnC,QAAoE,qBAApE;AAiBA,OAAM,MAAO,wBAAP,CAA+B;AAoBjC,EAAA,WAAA,CAAmB,SAAnB,EAAsC,aAAtC,EAA6D,WAA7D,EAAgF;AAnBxE,SAAA,cAAA,GAA0B,KAA1B;AAMA,SAAA,0BAAA,GAAsC,IAAtC;AACA,SAAA,aAAA,GAAyB,IAAzB;AACA,SAAA,6BAAA,GAAyC,IAAzC;AAYJ,SAAK,aAAL,GAAqB,SAArB;AACA,SAAK,iBAAL,GAAyB,aAAzB;AACA,SAAK,eAAL,GAAuB,WAAvB;AAEA,SAAK,oBAAL,GAA4B,EAA5B;AACA,SAAK,mBAAL,GAA2B,EAA3B;AACA,SAAK,uBAAL,GAA+B,EAA/B;AACH;;AAEM,EAAA,cAAc,CAAC,iBAAD,EAA0B;AAC3C,QAAI,iBAAiB,GAAG,CAAxB,EAA2B;AAAE;AACzB,WAAK,mBAAL,CAAyB,IAAzB,CAA8B,IAAI,CAAC,GAAL,KAAa,iBAA3C;AACH;AACJ;;AAEM,EAAA,kBAAkB,CAAC,iBAAD,EAA0B;AAC/C,QAAI,iBAAiB,GAAG,CAAxB,EAA2B;AAAE;AACzB,WAAK,uBAAL,CAA6B,IAA7B,CAAkC,IAAI,CAAC,GAAL,KAAa,iBAA/C;AACH;AACJ;;AAEM,EAAA,OAAO,CAAC,CAAD,EAAiB;AAC3B,QAAI,KAAK,cAAT,EAAyB;AACrB;AACH;;AAED,QAAI,CAAC,YAAY,yBAAb,IAA0C,CAAC,CAAC,SAAF,KAAgB,KAAK,aAAnE,EAAkF;AAC9E,WAAK,0BAAL,GAAkC;AAC9B,QAAA,GAAG,EAAE,CAAC,CAAC,SADuB;AAE9B,QAAA,IAAI,EAAE,kBAFwB;AAG9B,QAAA,KAAK,EAAE,CAAC,CAAC;AAHqB,OAAlC;AAKH;;AAED,QAAI,CAAC,YAAY,6BAAb,IAA8C,CAAC,CAAC,aAAF,KAAoB,KAAK,iBAAvE,IAA4F,CAAC,CAAC,WAAF,KAAkB,KAAK,eAAvH,EAAwI;AACpI,WAAK,gBAAL,GAAwB,CAAC,CAAC,SAA1B;AACH;;AAED,QAAI,CAAC,YAAY,4BAAb,IAA6C,CAAC,CAAC,aAAF,KAAoB,KAAK,iBAAtE,IAA2F,CAAC,CAAC,WAAF,KAAkB,KAAK,eAAtH,EAAuI;AACnI,WAAK,gBAAL,GAAwB,CAAC,CAAC,SAA1B;AACH;;AAED,QAAI,CAAC,YAAY,qBAAb,IAAsC,CAAC,CAAC,aAAF,KAAoB,KAAK,iBAAnE,EAAsF;AAClF,UAAI,CAAC,KAAK,aAAV,EAAyB;AACrB,aAAK,aAAL,GAAqB;AACjB,UAAA,GAAG,EAAE,CAAC,CAAC,SADU;AAEjB,UAAA,KAAK,EAAE,CAAC,CAAC,KAFQ;AAGjB,UAAA,IAAI,EAAE,YAHW;AAIjB,UAAA,KAAK,EAAE,KAAK;AAJK,SAArB;AAMH;AACJ;;AAED,QAAI,CAAC,YAAY,yBAAb,IAA0C,CAAC,CAAC,aAAF,KAAoB,KAAK,iBAAnE,IAAwF,CAAC,CAAC,WAAF,KAAkB,KAAK,eAAnH,EAAoI;AAChI,UAAI,CAAC,KAAK,aAAV,EAAyB;AACrB,aAAK,aAAL,GAAqB;AACjB,UAAA,GAAG,EAAE,CAAC,CAAC,SADU;AAEjB,UAAA,KAAK,EAAE,CAAC,CAAC,KAFQ;AAGjB,UAAA,IAAI,EAAE,YAHW;AAIjB,UAAA,KAAK,EAAE,KAAK;AAJK,SAArB;AAMH;AACJ;;AAED,QAAI,CAAC,YAAY,4BAAb,IAA6C,CAAC,CAAC,aAAF,KAAoB,KAAK,iBAAtE,IAA2F,CAAC,CAAC,WAAF,KAAkB,KAAK,eAAtH,EAAuI;AACnI,UAAI,CAAC,KAAK,aAAV,EAAyB;AACrB,aAAK,aAAL,GAAqB;AACjB,UAAA,GAAG,EAAE,CAAC,CAAC,SADU;AAEjB,UAAA,IAAI,EAAE,YAFW;AAGjB,UAAA,KAAK,EAAE,KAAK;AAHK,SAArB;AAKH;AACJ;;AAED,QAAI,CAAC,YAAY,wBAAb,IAAyC,CAAC,CAAC,SAAF,KAAgB,KAAK,aAAlE,EAAiF;AAC7E,WAAK,gBAAL,GAAwB,CAAC,CAAC,SAA1B;AACH;;AAED,QAAI,CAAC,YAAY,oBAAb,IAAqC,CAAC,CAAC,YAAF,KAAmB,KAAK,gBAAjE,EAAmF;AAC/E,WAAK,uBAAL,GAA+B,CAAC,CAAC,SAAjC;AACH;;AAED,QAAI,CAAC,YAAY,0BAAb,IAA2C,CAAC,CAAC,YAAF,KAAmB,KAAK,gBAAvE,EAAyF;AACrF,UAAI,CAAC,KAAK,6BAAV,EAAyC;AACrC,aAAK,6BAAL,GAAqC;AACjC,UAAA,GAAG,EAAE,CAAC,CAAC,SAD0B;AAEjC,UAAA,EAAE,EAAE,KAAK,gBAFwB;AAGjC,UAAA,IAAI,EAAE,YAH2B;AAIjC,UAAA,KAAK,EAAE,KAAK;AAJqB,SAArC;AAMH;AACJ;;AAED,QAAI,CAAC,YAAY,6BAAb,IAA8C,CAAC,CAAC,YAAF,KAAmB,KAAK,gBAA1E,EAA4F;AACxF,UAAI,CAAC,KAAK,6BAAV,EAAyC;AACrC,aAAK,6BAAL,GAAqC;AACjC,UAAA,GAAG,EAAE,CAAC,CAAC,SAD0B;AAEjC,UAAA,KAAK,EAAE,KAAK,kBAAL,CAAwB,CAAC,CAAC,UAA1B,CAF0B;AAGjC,UAAA,EAAE,EAAE,KAAK,gBAHwB;AAIjC,UAAA,IAAI,EAAE,YAJ2B;AAKjC,UAAA,KAAK,EAAE,KAAK;AALqB,SAArC;AAOH;AACJ;;AAED,QAAI,CAAC,YAAY,8BAAb,IAA+C,CAAC,CAAC,YAAF,KAAmB,KAAK,gBAA3E,EAA6F;AACzF,UAAI,CAAC,CAAC,OAAF,IAAa,CAAC,CAAC,OAAF,CAAU,OAAvB,IAAkC,CAAC,CAAC,OAAF,CAAU,OAAV,CAAkB,IAAxD,EAA8D;AAC1D,YAAI,CAAC,KAAK,oBAAL,CAA0B,CAAC,CAAC,OAAF,CAAU,OAAV,CAAkB,IAA5C,CAAL,EAAwD;AACpD,eAAK,oBAAL,CAA0B,CAAC,CAAC,OAAF,CAAU,OAAV,CAAkB,IAA5C,IAAoD,IAAI,KAAJ,EAApD;AACH;;AACD,cAAM,iBAAiB,GAAG,EAA1B;;AACA,YAAI,KAAK,oBAAL,CAA0B,CAAC,CAAC,OAAF,CAAU,OAAV,CAAkB,IAA5C,EAAkD,MAAlD,GAA2D,iBAA/D,EAAkF;AAC9E,eAAK,oBAAL,CAA0B,CAAC,CAAC,OAAF,CAAU,OAAV,CAAkB,IAA5C,EAAkD,IAAlD,CAAuD,CAAC,CAAC,mBAAzD;AACH;AACJ;AACJ;AACJ;;AAEM,EAAA,YAAY,GAAA;AACf,UAAM,OAAO,GAAG,IAAI,KAAJ,EAAhB;;AAEA,QAAI,KAAK,0BAAT,EAAqC;AACjC,MAAA,OAAO,CAAC,IAAR,CAAa,KAAK,0BAAlB;AACH;;AAED,QAAI,KAAK,aAAT,EAAwB;AACpB,MAAA,OAAO,CAAC,IAAR,CAAa,KAAK,aAAlB;AACH;;AAED,QAAI,KAAK,6BAAT,EAAwC;AACpC,MAAA,OAAO,CAAC,IAAR,CAAa,KAAK,6BAAlB;AACH;;AAED,QAAI,KAAK,mBAAL,CAAyB,MAAzB,GAAkC,CAAtC,EAAyC;AACrC,MAAA,OAAO,CAAC,IAAR,CAAa;AACT,QAAA,eAAe,EAAE,KAAK;AADb,OAAb;AAGH;;AAED,QAAI,KAAK,uBAAL,CAA6B,MAA7B,GAAsC,CAA1C,EAA6C;AACzC,MAAA,OAAO,CAAC,IAAR,CAAa;AACT,QAAA,wBAAwB,EAAE,KAAK;AADtB,OAAb;AAGH;;AAED,UAAM,SAAS,GAAe;AAC1B,MAAA,OAAO,EAAE,OADiB;AAE1B,MAAA,gBAAgB,EAAE,KAAK;AAFG,KAA9B;AAKA,UAAM,IAAI,GAAG,IAAI,CAAC,SAAL,CAAe,SAAf,CAAb,CAhCe,CAkCf;;AACA,SAAK,oBAAL,GAA4B,EAA5B;AACA,SAAK,0BAAL,GAAkC,IAAlC;AACA,SAAK,aAAL,GAAqB,IAArB;AACA,SAAK,6BAAL,GAAqC,IAArC;AACA,SAAK,mBAAL,GAA2B,EAA3B;AACA,SAAK,uBAAL,GAA+B,EAA/B;AACA,WAAO,IAAP;AACH,GArLgC,CAuLjC;;;AACA,MAAW,YAAX,GAAuB;AACnB,WAAQ,MAAM,CAAC,IAAP,CAAY,KAAK,oBAAjB,EAAuC,MAAvC,KAAkD,CAAlD,IACJ,KAAK,0BAAL,KAAoC,IADhC,IAEJ,KAAK,aAAL,KAAuB,IAFnB,IAGJ,KAAK,6BAAL,KAAuC,IAHnC,IAIJ,KAAK,mBAAL,CAAyB,MAAzB,KAAoC,CAJhC,IAKJ,KAAK,uBAAL,CAA6B,MAA7B,KAAwC,CAL5C;AAMH;;AAEM,EAAA,OAAO,GAAA;AACV,SAAK,cAAL,GAAsB,IAAtB;AACH;;AAEO,EAAA,kBAAkB,CAAC,UAAD,EAAmB;AACzC;;;;;;;;;;;;AAYE;AAEF,YAAQ,UAAR;AACI,WAAK,GAAL;AACA,WAAK,IAAL;AACA,WAAK,IAAL;AACA,WAAK,IAAL;AACA,WAAK,IAAL;AACA,WAAK,IAAL;AACA,WAAK,IAAL;AAAW,eAAO,YAAP;;AACX,WAAK,GAAL;AAAU,eAAO,cAAP;;AACV,WAAK,GAAL;AAAU,eAAO,WAAP;;AACV,WAAK,GAAL;AACA,WAAK,IAAL;AAAW,eAAO,mBAAP;;AACX,WAAK,GAAL;AACA,WAAK,IAAL;AAAW,eAAO,aAAP;;AACX,WAAK,GAAL;AACA,WAAK,GAAL;AAAU,eAAO,SAAP;;AACV;AAAS,eAAO,gBAAgB,UAAU,CAAC,QAAX,EAAvB;AAhBb;AAkBH;;AAtOgC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    ConnectionEstablishedEvent,\r\n    ConnectionEstablishErrorEvent,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionStartEvent,\r\n    IEventListener,\r\n    IStringDictionary,\r\n    PlatformEvent,\r\n} from \"../common/Exports\";\r\nimport { ConnectingToServiceEvent, RecognitionTriggeredEvent } from \"./RecognitionEvents\";\r\n\r\nexport interface ITelemetry {\r\n    Metrics: IMetric[];\r\n    ReceivedMessages: IStringDictionary<string[]>;\r\n}\r\n\r\nexport interface IMetric {\r\n    End?: string;\r\n    Error?: string;\r\n    Id?: string;\r\n    Name?: string;\r\n    Start?: string;\r\n    PhraseLatencyMs?: number[];\r\n    FirstHypothesisLatencyMs?: number[];\r\n}\r\n\r\nexport class ServiceTelemetryListener implements IEventListener<PlatformEvent> {\r\n    private privIsDisposed: boolean = false;\r\n\r\n    private privRequestId: string;\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n\r\n    private privListeningTriggerMetric: IMetric = null;\r\n    private privMicMetric: IMetric = null;\r\n    private privConnectionEstablishMetric: IMetric = null;\r\n\r\n    private privMicStartTime: string;\r\n\r\n    private privConnectionId: string;\r\n    private privConnectionStartTime: string;\r\n\r\n    private privReceivedMessages: IStringDictionary<string[]>;\r\n    private privPhraseLatencies: number[];\r\n    private privHypothesisLatencies: number[];\r\n\r\n    public constructor(requestId: string, audioSourceId: string, audioNodeId: string) {\r\n        this.privRequestId = requestId;\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n\r\n        this.privReceivedMessages = {};\r\n        this.privPhraseLatencies = [];\r\n        this.privHypothesisLatencies = [];\r\n    }\r\n\r\n    public phraseReceived(audioReceivedTime: number): void {\r\n        if (audioReceivedTime > 0) { // 0 indicates the time is unknown. Drop it.\r\n            this.privPhraseLatencies.push(Date.now() - audioReceivedTime);\r\n        }\r\n    }\r\n\r\n    public hypothesisReceived(audioReceivedTime: number): void {\r\n        if (audioReceivedTime > 0) { // 0 indicates the time is unknown. Drop it.\r\n            this.privHypothesisLatencies.push(Date.now() - audioReceivedTime);\r\n        }\r\n    }\r\n\r\n    public onEvent(e: PlatformEvent): void {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (e instanceof RecognitionTriggeredEvent && e.requestId === this.privRequestId) {\r\n            this.privListeningTriggerMetric = {\r\n                End: e.eventTime,\r\n                Name: \"ListeningTrigger\",\r\n                Start: e.eventTime,\r\n            };\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeAttachingEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            this.privMicStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeAttachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            this.privMicStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof AudioSourceErrorEvent && e.audioSourceId === this.privAudioSourceId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Error: e.error,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeErrorEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Error: e.error,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeDetachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectingToServiceEvent && e.requestId === this.privRequestId) {\r\n            this.privConnectionId = e.sessionId;\r\n        }\r\n\r\n        if (e instanceof ConnectionStartEvent && e.connectionId === this.privConnectionId) {\r\n            this.privConnectionStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof ConnectionEstablishedEvent && e.connectionId === this.privConnectionId) {\r\n            if (!this.privConnectionEstablishMetric) {\r\n                this.privConnectionEstablishMetric = {\r\n                    End: e.eventTime,\r\n                    Id: this.privConnectionId,\r\n                    Name: \"Connection\",\r\n                    Start: this.privConnectionStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectionEstablishErrorEvent && e.connectionId === this.privConnectionId) {\r\n            if (!this.privConnectionEstablishMetric) {\r\n                this.privConnectionEstablishMetric = {\r\n                    End: e.eventTime,\r\n                    Error: this.getConnectionError(e.statusCode),\r\n                    Id: this.privConnectionId,\r\n                    Name: \"Connection\",\r\n                    Start: this.privConnectionStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectionMessageReceivedEvent && e.connectionId === this.privConnectionId) {\r\n            if (e.message && e.message.headers && e.message.headers.path) {\r\n                if (!this.privReceivedMessages[e.message.headers.path]) {\r\n                    this.privReceivedMessages[e.message.headers.path] = new Array<string>();\r\n                }\r\n                const maxMessagesToSend = 50;\r\n                if (this.privReceivedMessages[e.message.headers.path].length < maxMessagesToSend) {\r\n                    this.privReceivedMessages[e.message.headers.path].push(e.networkReceivedTime);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public getTelemetry(): string {\r\n        const metrics = new Array<IMetric>();\r\n\r\n        if (this.privListeningTriggerMetric) {\r\n            metrics.push(this.privListeningTriggerMetric);\r\n        }\r\n\r\n        if (this.privMicMetric) {\r\n            metrics.push(this.privMicMetric);\r\n        }\r\n\r\n        if (this.privConnectionEstablishMetric) {\r\n            metrics.push(this.privConnectionEstablishMetric);\r\n        }\r\n\r\n        if (this.privPhraseLatencies.length > 0) {\r\n            metrics.push({\r\n                PhraseLatencyMs: this.privPhraseLatencies,\r\n            });\r\n        }\r\n\r\n        if (this.privHypothesisLatencies.length > 0) {\r\n            metrics.push({\r\n                FirstHypothesisLatencyMs: this.privHypothesisLatencies,\r\n            });\r\n        }\r\n\r\n        const telemetry: ITelemetry = {\r\n            Metrics: metrics,\r\n            ReceivedMessages: this.privReceivedMessages,\r\n        };\r\n\r\n        const json = JSON.stringify(telemetry);\r\n\r\n        // We dont want to send the same telemetry again. So clean those out.\r\n        this.privReceivedMessages = {};\r\n        this.privListeningTriggerMetric = null;\r\n        this.privMicMetric = null;\r\n        this.privConnectionEstablishMetric = null;\r\n        this.privPhraseLatencies = [];\r\n        this.privHypothesisLatencies = [];\r\n        return json;\r\n    }\r\n\r\n    // Determines if there are any telemetry events to send to the service.\r\n    public get hasTelemetry(): boolean {\r\n        return (Object.keys(this.privReceivedMessages).length !== 0 ||\r\n            this.privListeningTriggerMetric !== null ||\r\n            this.privMicMetric !== null ||\r\n            this.privConnectionEstablishMetric !== null ||\r\n            this.privPhraseLatencies.length !== 0 ||\r\n            this.privHypothesisLatencies.length !== 0);\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.privIsDisposed = true;\r\n    }\r\n\r\n    private getConnectionError(statusCode: number): string {\r\n        /*\r\n        -- Websocket status codes --\r\n        NormalClosure = 1000,\r\n        EndpointUnavailable = 1001,\r\n        ProtocolError = 1002,\r\n        InvalidMessageType = 1003,\r\n        Empty = 1005,\r\n        InvalidPayloadData = 1007,\r\n        PolicyViolation = 1008,\r\n        MessageTooBig = 1009,\r\n        MandatoryExtension = 1010,\r\n        InternalServerError = 1011\r\n        */\r\n\r\n        switch (statusCode) {\r\n            case 400:\r\n            case 1002:\r\n            case 1003:\r\n            case 1005:\r\n            case 1007:\r\n            case 1008:\r\n            case 1009: return \"BadRequest\";\r\n            case 401: return \"Unauthorized\";\r\n            case 403: return \"Forbidden\";\r\n            case 503:\r\n            case 1001: return \"ServerUnavailable\";\r\n            case 500:\r\n            case 1011: return \"ServerError\";\r\n            case 408:\r\n            case 504: return \"Timeout\";\r\n            default: return \"statuscode:\" + statusCode.toString();\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}